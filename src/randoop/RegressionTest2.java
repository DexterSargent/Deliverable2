import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        ParkingSystem.Manager manager0 = ParkingSystem.Manager.getInstance();
        manager0.setManagerInfo("Paid $ 100.0 with Mobile Pay", "Jane", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        java.lang.String str5 = manager0.getName();
        java.lang.String str6 = manager0.getManagerId();
        org.junit.Assert.assertNotNull(manager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Jane" + "'", str5, "Jane");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str6, "Paid $ 100.0 with Mobile Pay");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.Client client24 = ParkingSystem.Client.getInstance();
        java.lang.String str25 = client24.getName();
        client24.setValidated(true);
        ParkingSystem.Booking booking28 = client24.getBookingDetails();
        java.lang.String str29 = client24.getUsername();
        java.lang.String str30 = client24.getUsername();
        ParkingSystem.Booking booking31 = client24.getBookingDetails();
        cSVManager0.saveClient(client24);
        ParkingSystem.Client client33 = ParkingSystem.Client.getInstance();
        java.lang.String str34 = client33.getName();
        client33.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str43 = client33.getUsername();
        java.lang.String str44 = client33.getPassword();
        java.lang.String str45 = client33.getUsername();
        boolean boolean46 = client33.checkIn();
        client33.setClientInfo("staff", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", true);
        boolean boolean55 = client33.cancelBooking();
        java.lang.String str56 = client33.getPassword();
        cSVManager0.saveClient(client33);
        boolean boolean65 = client33.confirmBooking("ST001", "Jane", (int) '#', "h40rNQ7kR1", (int) (short) 10, "H33Itw4InT", "h40rNQ7kR1");
        org.junit.Assert.assertNotNull(strArray1);
// flaky "1) test1002(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "1) test1002(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
// flaky "1) test1002(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky "1) test1002(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "staff" + "'", str13, "staff");
// flaky "1) test1002(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertNotNull(client24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "empty" + "'", str25, "empty");
        org.junit.Assert.assertNull(booking28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jane" + "'", str29, "Jane");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Jane" + "'", str30, "Jane");
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertNotNull(client33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "empty" + "'", str34, "empty");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "disabled" + "'", str44, "disabled");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str56, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        int int32 = booking25.getDuration();
        boolean boolean33 = booking25.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double8 = booking7.getTotalCost();
        java.lang.String str9 = booking7.getLotId();
        boolean boolean10 = booking7.isCheckedIn();
        boolean boolean11 = booking7.isCheckedIn();
        java.lang.String str12 = booking7.getClientId();
        double double13 = booking7.getTotalCost();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "jane" + "'", str9, "jane");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "staff" + "'", str12, "staff");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        client0.assignProxy(parkingSpaceProxy10);
        ParkingSystem.Booking booking12 = client0.getBookingDetails();
        java.lang.String str13 = client0.getClientId();
        boolean boolean14 = client0.getIsValidated();
        java.lang.String str15 = client0.getExtraId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str1, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "staff" + "'", str13, "staff");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str15, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        boolean boolean10 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLotIterator7.next();
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        spaceManager12.toggleLot("Jane", false);
        spaceManager12.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager21 = new ParkingSystem.SpaceManager();
        boolean boolean24 = spaceManager21.isSpaceAvailable("hi!", (int) '#');
        spaceManager21.toggleLot("disabled", false);
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean38 = spaceManager21.assignBooking("empty", (int) (short) 0, booking37);
        boolean boolean39 = spaceManager12.assignBooking("hi!", 0, booking37);
        double double40 = booking37.getTotalCost();
        booking37.setDuration((-1));
        java.lang.String str43 = booking37.getLotId();
        booking37.setStartTime("");
        int int46 = booking37.getDuration();
        boolean boolean47 = parkingSpace11.assignBooking(booking37);
        ParkingSystem.SpaceState spaceState48 = parkingSpace11.getState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jane" + "'", str43, "jane");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(spaceState48);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        java.lang.String str2 = client0.getClientId();
        java.lang.String str3 = client0.getClientType();
        java.lang.String str4 = client0.getPassword();
        java.lang.String str5 = client0.getName();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7" + "'", str1, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "staff" + "'", str2, "staff");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str3, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str4, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str5, "2afd610d-a8cb-413a-bbee-7927f86b526c");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        boolean boolean11 = mobilePay0.processPayment("Jane", (double) 10L, "jane", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str12 = mobilePay0.getPaymentMessage();
        java.lang.String str13 = mobilePay0.getPaymentMessage();
        boolean boolean18 = mobilePay0.processPayment("Paid $ 1470.0 with Mobile Pay", (double) (short) -1, "Refunded without deposit ($0.0)", "K6PkM9rcCx");
        boolean boolean23 = mobilePay0.processPayment("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", (double) (byte) 0, "Paid $ 0.0 with Mobile Pay", "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str12, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str13, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean26 = bookingManager0.confirmBooking("empty", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "Refunded total cost of $1.0", (int) (byte) 1, "Card number should be 16 digits", 32, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled");
        ParkingSystem.BookingManager bookingManager27 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager28 = new ParkingSystem.CheckInManager(bookingManager27);
        ParkingSystem.SpaceManager spaceManager29 = bookingManager27.getSpaceManager();
        double double32 = bookingManager27.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit33 = new ParkingSystem.DebitOrCredit();
        bookingManager27.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit33);
        boolean boolean39 = debitOrCredit33.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str40 = debitOrCredit33.getPaymentMessage();
        boolean boolean43 = debitOrCredit33.validateCard("pass", (double) 100.0f);
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit33);
        boolean boolean54 = bookingManager0.confirmBooking("CLT-390234b0-d56e-4275-bd7b-122280609c69", "Refunded total cost of $100.0", "Jane", "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", (int) (short) 1, "Paid $ 1.0 with Mobile Pay", (int) ' ', "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(spaceManager29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 165.0d + "'", double32 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Card number should be 16 digits" + "'", str40, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        int int9 = booking7.getDuration();
        double double10 = booking7.getTotalCost();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        spaceManager4.addParkingLot("hi!");
        boolean boolean9 = spaceManager4.isSpaceAvailable("Paid $ 0.0 with Mobile Pay", (int) ' ');
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        boolean boolean15 = spaceManager12.isSpaceAvailable("hi!", (int) '#');
        spaceManager12.toggleLot("disabled", false);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean29 = spaceManager12.assignBooking("empty", (int) (short) 0, booking28);
        boolean boolean30 = booking28.isCheckedIn();
        java.lang.String str31 = booking28.getClientId();
        java.lang.String str32 = booking28.getStartTime();
        boolean boolean33 = spaceManager4.assignBooking("ST001", (int) ' ', booking28);
        boolean boolean36 = spaceManager4.isSpaceAvailable("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (short) -1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "staff" + "'", str31, "staff");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Jane" + "'", str32, "Jane");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        java.lang.String str4 = client0.getExtraId();
        ParkingSystem.User user5 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        boolean boolean17 = parkingSpaceProxy6.cancelBooking("");
        user5.assignProxy(parkingSpaceProxy6);
        parkingSpaceProxy6.addParkingLot("staff");
        boolean boolean23 = parkingSpaceProxy6.extendBooking("Refunded total cost of $-1.0", (int) '#');
        client0.assignProxy(parkingSpaceProxy6);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str1, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str4, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        parkingSpaceFacade9.toggleLot("ST001", false);
        ParkingSystem.Booking booking14 = parkingSpaceFacade9.getBookingDetails("3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean24 = parkingSpaceFacade9.confirmBooking("Refunded without deposit ($-42.0)", "Refunded without deposit ($0.0)", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "qPYDfDnbtD", (int) (byte) 10, "fhd49ADb", (int) (byte) -1, "FNuxCiXmkP", "8ca2ec61-774c-409d-89d5-5b9171b40497");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str1, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertNull(booking14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean35 = parkingSpaceProxy14.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry12.assignProxyToManager("empty", parkingSpaceProxy14);
        java.util.List<ParkingSystem.Client> clientList37 = accountRegistry12.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(clientList37);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.toggleSpace("empty", "Paid $ 10.0 with Mobile Pay", false);
        boolean boolean34 = parkingSpaceProxy15.extendBooking("disabled", 100);
        boolean boolean44 = parkingSpaceProxy15.confirmBooking("02659ad3-0b5c-4c48-a915-a466f2b50775", "TXCrKOGD", "disabled", "K6PkM9rcCx", 2, "", (int) (short) -1, "0b35479f-5869-423e-9abc-e4ab9cef903d", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean13 = bookingManager0.confirmBooking("empty", "Jane", "disabled", "pass", (int) (byte) 0, "hi!", (int) 'a', "hi!", "");
        double double15 = bookingManager0.getHourlyRate("Jane");
        double double17 = bookingManager0.getHourlyRate("Paid $ 0.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        double double21 = bookingManager0.calculateCost("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (int) 'a');
        double double23 = bookingManager0.getHourlyRate("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        ParkingSystem.CheckInManager checkInManager24 = new ParkingSystem.CheckInManager(bookingManager0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 15.0d + "'", double17 == 15.0d);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1470.0d + "'", double21 == 1470.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 15.0d + "'", double23 == 15.0d);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.AccountRegistry accountRegistry17 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry17);
        java.lang.String str19 = superManager18.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry20 = superManager18.registry;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager18);
        java.lang.String str22 = superManager18.getPassword();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager18.registry;
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(superManager18);
// flaky "2) test1017(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str19, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry20);
// flaky "2) test1017(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str22, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNotNull(accountRegistry23);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager2 = parkingSpaceFacade0.getSpaceManager();
        boolean boolean5 = spaceManager2.isSpaceAvailable("Paid $ 0.0 with Mobile Pay", (int) (short) 1);
        spaceManager2.toggleSpace("Card number should be 16 digits", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", false);
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        boolean boolean18 = booking16.isCheckedIn();
        booking16.setCheckedIn(true);
        java.lang.String str21 = booking16.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "disabled" + "'", str21, "disabled");
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        boolean boolean16 = accountRegistry6.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        parkingSpaceProxy18.validateClient("Jane");
        parkingSpaceProxy18.toggleSpace("", "staff", false);
        boolean boolean29 = parkingSpaceProxy18.cancelBooking("Jane");
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy18);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap31 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager32 = ParkingSystem.SuperManager.createFromCSV("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "Refunded without deposit ($0.0)", "Refunded without deposit ($-42.0)", accountRegistry6);
        superManager32.setManagerInfo("13b04414-31a5-407f-8ea3-fba4613c73d1", "", "Refunded without deposit ($-96.0)");
// flaky "3) test1020(RegressionTest2)":         superManager32.validateClient("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(superManager32);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj17 = parkingSpaceProxy14.login("empty", "Jane");
        parkingSpaceProxy14.validateClient("Jane");
        parkingSpaceProxy14.toggleSpace("", "staff", false);
        boolean boolean25 = parkingSpaceProxy14.cancelBooking("");
        boolean boolean31 = parkingSpaceProxy14.register("jane", "jane", "Jane", "hi!", "disabled");
        user0.parkingProxy = parkingSpaceProxy14;
        boolean boolean34 = parkingSpaceProxy14.checkIn("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        boolean boolean10 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLotIterator7.next();
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        spaceManager12.toggleLot("Jane", false);
        spaceManager12.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager21 = new ParkingSystem.SpaceManager();
        boolean boolean24 = spaceManager21.isSpaceAvailable("hi!", (int) '#');
        spaceManager21.toggleLot("disabled", false);
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean38 = spaceManager21.assignBooking("empty", (int) (short) 0, booking37);
        boolean boolean39 = spaceManager12.assignBooking("hi!", 0, booking37);
        double double40 = booking37.getTotalCost();
        booking37.setDuration((-1));
        java.lang.String str43 = booking37.getLotId();
        booking37.setStartTime("");
        int int46 = booking37.getDuration();
        boolean boolean47 = parkingSpace11.assignBooking(booking37);
        java.lang.String str48 = booking37.getClientId();
        booking37.setStartTime("Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jane" + "'", str43, "jane");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "staff" + "'", str48, "staff");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.AccountRegistry accountRegistry15 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry15);
        java.lang.String str17 = superManager16.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry21 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry21);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = null;
        accountRegistry21.assignProxyToManager("disabled", parkingSpaceProxy24);
        superManager16.registry = accountRegistry21;
        ParkingSystem.AccountRegistry accountRegistry27 = superManager16.getRegistry();
        ParkingSystem.Manager manager28 = accountRegistry27.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry31 = parkingSpaceProxy30.getRegistry();
        boolean boolean37 = parkingSpaceProxy30.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy30.toggleLot("hi!", false);
        accountRegistry27.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy30);
        ParkingSystem.User user43 = new ParkingSystem.User();
        java.lang.Object obj44 = user43.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj48 = parkingSpaceProxy45.login("empty", "Jane");
        parkingSpaceProxy45.validateClient("Jane");
        java.lang.String str53 = parkingSpaceProxy45.scanSpace("", "");
        parkingSpaceProxy45.toggleSpace("", "disabled", true);
        user43.parkingProxy = parkingSpaceProxy45;
        ParkingSystem.ParkingLot parkingLot60 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator61 = parkingLot60.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator62 = parkingLot60.getIterator();
        user43.user = parkingLot60;
        ParkingSystem.User user64 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy65 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj68 = parkingSpaceProxy65.login("empty", "Jane");
        parkingSpaceProxy65.validateClient("Jane");
        parkingSpaceProxy65.toggleSpace("", "staff", false);
        boolean boolean76 = parkingSpaceProxy65.cancelBooking("");
        user64.assignProxy(parkingSpaceProxy65);
        user43.user = parkingSpaceProxy65;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy79 = user43.parkingProxy;
        parkingSpaceProxy79.addParkingLot("pass");
        accountRegistry27.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy79);
        accountRegistry6.assignProxyToClient("13b04414-31a5-407f-8ea3-fba4613c73d1", parkingSpaceProxy79);
        parkingSpaceProxy79.toggleSpace("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "pass", false);
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str17, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertNotNull(accountRegistry27);
        org.junit.Assert.assertNotNull(manager28);
        org.junit.Assert.assertNotNull(accountRegistry31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "disabled" + "'", str53, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator61);
        org.junit.Assert.assertNotNull(parkingLotIterator62);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy79);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        boolean boolean6 = parkingSpaceProxy0.extendBooking("pass", 0);
        boolean boolean8 = parkingSpaceProxy0.checkOut("Paid $ 10.0 with Mobile Pay");
        java.lang.String str11 = parkingSpaceProxy0.scanSpace("hi!", "Jane");
        boolean boolean21 = parkingSpaceProxy0.confirmBooking("CLT-035180a0-4707-410d-a011-2a4f0f46838b", "", "Refunded without deposit ($0.0)", "2afd610d-a8cb-413a-bbee-7927f86b526c", 0, "25527a32-01ef-45ba-816a-1d0a2fc2a52d", (int) ' ', "02659ad3-0b5c-4c48-a915-a466f2b50775", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        java.lang.String str24 = parkingSpaceProxy0.scanSpace("CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", "Card number should be 16 digits");
        java.lang.Object obj27 = parkingSpaceProxy0.login("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded total cost of $-1.0");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disabled" + "'", str24, "disabled");
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("");
        java.lang.String str14 = parkingSpaceProxy0.scanSpace("staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean17 = parkingSpaceProxy0.extendBooking("jane", (int) ' ');
        boolean boolean19 = parkingSpaceProxy0.checkIn("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean21 = parkingSpaceProxy0.checkOut("Refunded without deposit ($-42.0)");
        java.lang.Object obj24 = parkingSpaceProxy0.login("Paid $ 10.0 with Mobile Pay", "Refunded total cost of $1.0");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getLicensePlate();
        int int9 = booking7.getSpaceId();
        booking7.setCheckedIn(true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        ParkingSystem.Booking booking43 = parkingSpaceFacade33.getBookingDetails("jane");
        boolean boolean53 = parkingSpaceFacade33.confirmBooking("4a1f2343-8b2e-4dea-ba69-efd105414390", "Paid $ 1470.0 with Mobile Pay", "Refunded total cost of $0.0", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", 52, "H33Itw4InT", (-1), "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "CLT-d2153556-bc61-49e7-b73d-6af2a45e5167");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        java.lang.String str14 = superManager13.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = null;
        accountRegistry18.assignProxyToManager("disabled", parkingSpaceProxy21);
        superManager13.registry = accountRegistry18;
        ParkingSystem.AccountRegistry accountRegistry24 = superManager13.getRegistry();
        ParkingSystem.Manager manager25 = accountRegistry24.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean34 = parkingSpaceProxy27.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy27.toggleLot("hi!", false);
        accountRegistry24.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        accountRegistry3.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        java.util.List<ParkingSystem.Client> clientList40 = accountRegistry3.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str14, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(manager25);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(clientList40);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "Refunded without deposit ($-96.0)";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean10 = client0.checkIn();
        ParkingSystem.Booking booking11 = client0.getBookingDetails();
        ParkingSystem.AccountRegistry accountRegistry15 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry15);
        boolean boolean18 = accountRegistry15.requiresValidation("disabled");
        int int19 = accountRegistry15.getManagersSize();
        boolean boolean25 = accountRegistry15.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj30 = parkingSpaceProxy27.login("empty", "Jane");
        parkingSpaceProxy27.validateClient("Jane");
        parkingSpaceProxy27.toggleSpace("", "staff", false);
        boolean boolean38 = parkingSpaceProxy27.cancelBooking("Jane");
        accountRegistry15.assignProxyToClient("pass", parkingSpaceProxy27);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap40 = accountRegistry15.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy42 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj45 = parkingSpaceProxy42.login("empty", "Jane");
        parkingSpaceProxy42.validateClient("Jane");
        parkingSpaceProxy42.toggleSpace("", "staff", false);
        boolean boolean53 = parkingSpaceProxy42.cancelBooking("Jane");
        boolean boolean55 = parkingSpaceProxy42.checkOut("empty");
        boolean boolean65 = parkingSpaceProxy42.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry15.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy42);
        client0.assignProxy(parkingSpaceProxy42);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertNotNull(superManager16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        spaceManager8.removeBooking("jane", (int) '#');
        spaceManager8.addParkingLot("qPYDfDnbtD");
        spaceManager8.removeBooking("h40rNQ7kR1", (int) (short) -1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        parkingLot1.setEnabled(true);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        double double5 = bookingManager3.getHourlyRate("jane");
        boolean boolean10 = bookingManager3.extendBooking("3b453211-7dd1-4452-8741-a206711c1217", (int) '4', "CLT-f02c481e-1504-4abf-b598-76152da8586a", "8ca2ec61-774c-409d-89d5-5b9171b40497");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getUsername();
        java.lang.String str15 = client0.getPassword();
        java.lang.String str16 = client0.getName();
        client0.setValidated(true);
        boolean boolean19 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        int int32 = booking25.getDuration();
        booking25.setStartTime("Refunded without deposit ($0.0)");
        java.lang.String str35 = booking25.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "disabled" + "'", str35, "disabled");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("9701df9a-2178-4ad5-8076-46ff5f05b3e8", 0.0d, "disabled", "");
        boolean boolean21 = debitOrCredit6.validateCard("empty", (double) '4');
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        boolean boolean25 = debitOrCredit6.validateCard("Paid $ 0.0 with Mobile Pay", (double) 1);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.AccountRegistry accountRegistry17 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry17);
        java.lang.String str19 = superManager18.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry20 = superManager18.registry;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager18);
        java.lang.String str22 = superManager18.getManagerId();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str19, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str22, "13b04414-31a5-407f-8ea3-fba4613c73d1");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getClientId();
        java.lang.String str9 = booking7.getLotId();
        booking7.setDuration(10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime12 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "staff" + "'", str8, "staff");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "jane" + "'", str9, "jane");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.lang.String str8 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = superManager7.registry;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap10 = accountRegistry9.getManagers();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("Paid $ 100.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ -1.0 with Mobile Pay", accountRegistry9);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str8, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        boolean boolean36 = accountRegistry24.registerClient("staff", "staff", "pass", "disabled", "disabled");
        ParkingSystem.Manager manager37 = accountRegistry24.autoGenerateManager();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry24.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str5, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str20, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(manager37);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean8 = booking7.isCheckedIn();
        booking7.setStartTime("ST001");
        java.lang.String str11 = booking7.getClientId();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "staff" + "'", str11, "staff");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        int int18 = booking15.getDuration();
        int int19 = booking15.getSpaceId();
        java.lang.String str20 = booking15.getLotId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "jane" + "'", str20, "jane");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.SpaceManager spaceManager14 = new ParkingSystem.SpaceManager();
        boolean boolean17 = spaceManager14.isSpaceAvailable("hi!", (int) '#');
        spaceManager14.toggleLot("disabled", false);
        ParkingSystem.Booking booking30 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean31 = spaceManager14.assignBooking("empty", (int) (short) 0, booking30);
        spaceManager14.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap33 = spaceManager14.getParkingLots();
        cSVManager0.loadParkingLots(strMap33);
        cSVManager0.updateClientValidation("K6PkM9rcCx", false);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        boolean boolean6 = paymentManager0.refundDeposit((double) 1);
        paymentManager0.paymentMessage = "Paid $ 10.0 with Mobile Pay";
        ParkingSystem.BookingManager bookingManager9 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager10 = new ParkingSystem.CheckInManager(bookingManager9);
        ParkingSystem.SpaceManager spaceManager11 = bookingManager9.getSpaceManager();
        double double14 = bookingManager9.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit15 = new ParkingSystem.DebitOrCredit();
        bookingManager9.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit15);
        boolean boolean21 = debitOrCredit15.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str22 = debitOrCredit15.getPaymentMessage();
        boolean boolean27 = debitOrCredit15.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean30 = debitOrCredit15.validateCard("Jane", (double) '4');
        java.lang.String str31 = debitOrCredit15.getPaymentMessage();
        boolean boolean36 = debitOrCredit15.processPayment("02659ad3-0b5c-4c48-a915-a466f2b50775", 0.0d, "TXCrKOGD", "02659ad3-0b5c-4c48-a915-a466f2b50775");
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit15);
        boolean boolean39 = paymentManager0.refundDeposit((double) (byte) 1);
        boolean boolean42 = paymentManager0.refundWithoutDeposit((double) (byte) 10, (double) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(spaceManager11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 165.0d + "'", double14 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Card number should be 16 digits" + "'", str31, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("");
        java.lang.String str14 = parkingSpaceProxy0.scanSpace("staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean17 = parkingSpaceProxy0.extendBooking("jane", (int) ' ');
        boolean boolean19 = parkingSpaceProxy0.checkIn("2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        user0.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        user0.assignProxy(parkingSpaceProxy25);
        boolean boolean36 = parkingSpaceProxy25.confirmBooking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "09622cbf-e665-45db-b1ad-365065947a20", "Paid $ 15.0 with Mobile Pay", (int) (byte) -1, "Refunded without deposit ($0.0)", 0, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "13b04414-31a5-407f-8ea3-fba4613c73d1");
        boolean boolean38 = parkingSpaceProxy25.checkIn("hi!");
        java.lang.String str41 = parkingSpaceProxy25.scanSpace("3b453211-7dd1-4452-8741-a206711c1217", "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
// flaky "4) test1046(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy24);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disabled" + "'", str41, "disabled");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        ParkingSystem.MobilePay mobilePay20 = new ParkingSystem.MobilePay();
        boolean boolean25 = mobilePay20.processPayment("hi!", (-1.0d), "", "");
        boolean boolean30 = mobilePay20.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean35 = mobilePay20.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) 10.0f, "staff", "empty");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay20);
        double double38 = bookingManager0.getDeposit("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 15.0d + "'", double38 == 15.0d);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        client0.assignProxy(parkingSpaceProxy10);
        boolean boolean21 = parkingSpaceProxy10.confirmBooking("staff", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "", "Paid $ -1.0 with Mobile Pay", 10, "Refunded without deposit ($0.0)", (int) (short) 0, "Paid $ 0.0 with Mobile Pay", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        boolean boolean31 = parkingSpaceProxy10.confirmBooking("jane", "Paid $ 0.0 with Mobile Pay", "Refunded without deposit ($0.0)", "", 32, "empty", (int) (short) 0, "Paid $ 0.0 with Mobile Pay", "Card number should be 16 digits");
        boolean boolean37 = parkingSpaceProxy10.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "tbHxuilT", "pass", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Card number should be 16 digits" + "'", str1, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingLotIterator parkingLotIterator9 = parkingLot1.getIterator();
        boolean boolean10 = parkingLot1.isEnabled();
        ParkingSystem.ParkingLotIterator parkingLotIterator11 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator11);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        ParkingSystem.Manager manager0 = ParkingSystem.Manager.getInstance();
        manager0.setManagerInfo("hi!", "disabled", "hi!");
        java.lang.String str5 = manager0.getManagerId();
        java.lang.String str6 = manager0.getManagerId();
        org.junit.Assert.assertNotNull(manager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        java.lang.String str14 = superManager13.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = null;
        accountRegistry18.assignProxyToManager("disabled", parkingSpaceProxy21);
        superManager13.registry = accountRegistry18;
        ParkingSystem.AccountRegistry accountRegistry24 = superManager13.getRegistry();
        ParkingSystem.Manager manager25 = accountRegistry24.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean34 = parkingSpaceProxy27.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy27.toggleLot("hi!", false);
        accountRegistry24.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        accountRegistry3.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        parkingSpaceProxy27.displayPendingValidations();
        boolean boolean42 = parkingSpaceProxy27.cancelBooking("Refunded total cost of $-1.0");
        boolean boolean44 = parkingSpaceProxy27.checkIn("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        boolean boolean46 = parkingSpaceProxy27.cancelBooking("empty");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade47 = parkingSpaceProxy27.getFacade();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str14, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(manager25);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade47);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        java.lang.String str19 = debitOrCredit17.getPaymentMessage();
        java.lang.String str20 = debitOrCredit17.getPaymentMessage();
        java.lang.String str21 = debitOrCredit17.getPaymentMessage();
        boolean boolean26 = debitOrCredit17.processPayment("FNuxCiXmkP", (double) 1, "Refunded total cost of $-1.0", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        boolean boolean11 = paymentManager0.refundDeposit(0.0d);
        java.lang.String str12 = paymentManager0.paymentMessage;
        paymentManager0.refundMessage = "Refunded without deposit ($-42.0)";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str12, "Paid $ 100.0 with Mobile Pay");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        boolean boolean2 = paymentManager0.refundDeposit(100.0d);
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        boolean boolean7 = paymentManager0.refundWithoutDeposit(0.0d, 495.0d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean25 = bookingManager0.confirmBooking("3b453211-7dd1-4452-8741-a206711c1217", "FNuxCiXmkP", "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "Refunded total cost of $1.0", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", 52, "8ca2ec61-774c-409d-89d5-5b9171b40497", "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        java.lang.String str4 = parkingSpaceProxy0.scanSpace("empty", "hi!");
        boolean boolean14 = parkingSpaceProxy0.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy0.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean24 = parkingSpaceProxy0.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        boolean boolean28 = parkingSpaceProxy0.editBooking("disabled", "Card number should be 16 digits", (int) (byte) -1);
        java.lang.Object obj31 = parkingSpaceProxy0.login("Paid $ 0.0 with Mobile Pay", "jane");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade32 = parkingSpaceProxy0.getFacade();
        parkingSpaceProxy0.toggleSpace("Refunded without deposit ($0.0)", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", true);
        parkingSpaceProxy0.validateClient("Refunded total cost of $100.0");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(parkingSpaceFacade32);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        java.lang.String str61 = parkingSpace58.scanSpace();
        int int62 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace58.getCurrentBooking();
        int int64 = parkingSpace58.getSpaceId();
        java.lang.String str65 = enabled0.scanSpace(parkingSpace58);
        boolean boolean66 = parkingSpace58.isAvailable();
        java.lang.String str67 = parkingSpace58.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "empty" + "'", str61, "empty");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "empty" + "'", str65, "empty");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "empty" + "'", str67, "empty");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        boolean boolean9 = accountRegistry3.requiresValidation("disabled");
        int int10 = accountRegistry3.getManagersSize();
        int int11 = accountRegistry3.getManagersSize();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry2 = parkingSpaceProxy0.getRegistry();
        boolean boolean8 = accountRegistry2.registerClient("4c45f11e-b09a-4d81-adf1-86cfd519dc3c", "3b453211-7dd1-4452-8741-a206711c1217", "8ca2ec61-774c-409d-89d5-5b9171b40497", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNotNull(accountRegistry2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        boolean boolean6 = parkingSpaceProxy3.checkIn("");
        parkingSpaceProxy3.validateClient("");
        user0.assignProxy(parkingSpaceProxy3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = user0.parkingProxy;
        ParkingSystem.Client client11 = ParkingSystem.Client.getInstance();
        java.lang.String str12 = client11.getName();
        client11.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry16 = parkingSpaceProxy15.getRegistry();
        boolean boolean18 = parkingSpaceProxy15.checkIn("");
        client11.assignProxy(parkingSpaceProxy15);
        boolean boolean20 = client11.cancelBooking();
        java.lang.String str21 = client11.getExtraId();
        java.lang.String str22 = client11.getName();
        java.lang.String str23 = client11.getName();
        boolean boolean24 = client11.checkIn();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean27 = parkingSpaceProxy25.cancelBooking("pass");
        parkingSpaceProxy25.toggleSpace("jane", "Paid $ -1.0 with Mobile Pay", false);
        boolean boolean33 = parkingSpaceProxy25.checkOut("Paid $ 0.0 with Mobile Pay");
        boolean boolean37 = parkingSpaceProxy25.editBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0);
        client11.assignProxy(parkingSpaceProxy25);
        boolean boolean46 = client11.confirmBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "Refunded total cost of $100.0", (int) (byte) 100, "Paid $ 10.0 with Mobile Pay", (-1), "disabled", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        user0.user = "Refunded total cost of $100.0";
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = user0.parkingProxy;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy10);
        org.junit.Assert.assertNotNull(client11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "4c45f11e-b09a-4d81-adf1-86cfd519dc3c" + "'", str12, "4c45f11e-b09a-4d81-adf1-86cfd519dc3c");
        org.junit.Assert.assertNotNull(accountRegistry16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49" + "'", str21, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4c45f11e-b09a-4d81-adf1-86cfd519dc3c" + "'", str22, "4c45f11e-b09a-4d81-adf1-86cfd519dc3c");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "4c45f11e-b09a-4d81-adf1-86cfd519dc3c" + "'", str23, "4c45f11e-b09a-4d81-adf1-86cfd519dc3c");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy48);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        boolean boolean9 = accountRegistry3.requiresValidation("disabled");
        java.lang.Object obj12 = accountRegistry3.login("jane", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        java.lang.Object obj15 = accountRegistry3.login("Refunded total cost of $-1.0", "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        java.lang.String str18 = booking15.getLicensePlate();
        java.lang.String str19 = booking15.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        boolean boolean14 = parkingSpaceProxy3.cancelBooking("");
        boolean boolean20 = parkingSpaceProxy3.register("jane", "jane", "Jane", "hi!", "disabled");
        accountRegistry1.assignProxyToManager("empty", parkingSpaceProxy3);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry1.loadManagersFromCSV();
// flaky "5) test1063(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        java.util.List<java.lang.String[]> strArrayList25 = cSVManager0.readCSV("Jane");
        ParkingSystem.AccountRegistry accountRegistry35 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager36 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry35);
        boolean boolean38 = accountRegistry35.requiresValidation("disabled");
        int int39 = accountRegistry35.getManagersSize();
        ParkingSystem.SuperManager superManager40 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry35);
        ParkingSystem.AccountRegistry accountRegistry41 = superManager40.getRegistry();
        accountRegistry41.validateClient("pass");
        ParkingSystem.SuperManager superManager44 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry41);
        cSVManager0.saveManager((ParkingSystem.Manager) superManager44);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy46 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry47 = parkingSpaceProxy46.getRegistry();
        boolean boolean53 = parkingSpaceProxy46.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean56 = parkingSpaceProxy46.extendBooking("pass", (int) (byte) 10);
        ParkingSystem.AccountRegistry accountRegistry57 = parkingSpaceProxy46.getRegistry();
        superManager44.registry = accountRegistry57;
        org.junit.Assert.assertNotNull(strArray1);
// flaky "6) test1064(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "3) test1064(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disabled" + "'", str13, "disabled");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(superManager36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(superManager40);
        org.junit.Assert.assertNotNull(accountRegistry41);
        org.junit.Assert.assertNotNull(superManager44);
        org.junit.Assert.assertNotNull(accountRegistry47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(accountRegistry57);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace(10);
        ParkingSystem.ParkingLot parkingLot3 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking5 = null;
        boolean boolean6 = parkingLot3.assignBooking(0, booking5);
        boolean boolean8 = parkingLot3.isSpaceAvailable((int) '#');
        boolean boolean10 = parkingLot3.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLot3.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking13 = parkingSpace12.getCurrentBooking();
        ParkingSystem.Booking booking14 = parkingSpace12.getCurrentBooking();
        ParkingSystem.Disabled disabled15 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace16 = null;
        java.lang.String str17 = disabled15.scanSpace(parkingSpace16);
        ParkingSystem.ParkingSpace parkingSpace18 = null;
        java.lang.String str19 = disabled15.scanSpace(parkingSpace18);
        parkingSpace12.setState((ParkingSystem.SpaceState) disabled15);
        parkingSpace1.setState((ParkingSystem.SpaceState) disabled15);
        ParkingSystem.ParkingLot parkingLot23 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking25 = null;
        boolean boolean26 = parkingLot23.assignBooking(0, booking25);
        boolean boolean28 = parkingLot23.isSpaceAvailable((int) '#');
        boolean boolean30 = parkingLot23.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace32 = parkingLot23.getParkingSpace((int) (byte) 10);
        int int33 = parkingSpace32.getSpaceId();
        java.lang.String str34 = parkingSpace32.scanSpace();
        java.lang.String str35 = disabled15.scanSpace(parkingSpace32);
        ParkingSystem.ParkingLot parkingLot37 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking39 = null;
        boolean boolean40 = parkingLot37.assignBooking(0, booking39);
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot37.assignBooking(1, booking42);
        ParkingSystem.ParkingLotIterator parkingLotIterator44 = parkingLot37.getIterator();
        ParkingSystem.ParkingSpace parkingSpace45 = parkingLotIterator44.next();
        boolean boolean46 = parkingSpace45.isAvailable();
        ParkingSystem.Booking booking47 = parkingSpace45.getCurrentBooking();
        java.lang.String str48 = disabled15.scanSpace(parkingSpace45);
        ParkingSystem.ParkingLot parkingLot50 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking52 = null;
        boolean boolean53 = parkingLot50.assignBooking(0, booking52);
        ParkingSystem.Booking booking55 = null;
        boolean boolean56 = parkingLot50.assignBooking(1, booking55);
        ParkingSystem.ParkingLot parkingLot59 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking61 = null;
        boolean boolean62 = parkingLot59.assignBooking(0, booking61);
        boolean boolean64 = parkingLot59.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking73 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean74 = parkingLot59.assignBooking((int) (short) -1, booking73);
        java.lang.String str75 = booking73.getLotId();
        boolean boolean76 = parkingLot50.assignBooking(0, booking73);
        java.lang.String str77 = booking73.getStartTime();
        boolean boolean78 = parkingSpace45.assignBooking(booking73);
        int int79 = parkingSpace45.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertNull(booking14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(parkingSpace32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "empty" + "'", str34, "empty");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "disabled" + "'", str35, "disabled");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator44);
        org.junit.Assert.assertNotNull(parkingSpace45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(booking47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disabled" + "'", str48, "disabled");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "jane" + "'", str75, "jane");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Jane" + "'", str77, "Jane");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        boolean boolean29 = accountRegistry3.requiresValidation("empty");
        boolean boolean31 = accountRegistry3.requiresValidation("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        accountRegistry3.validateClient("4a1f2343-8b2e-4dea-ba69-efd105414390");
        accountRegistry3.validateClient("CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean4 = parkingSpaceFacade0.cancelBooking("jane");
        boolean boolean7 = parkingSpaceFacade0.extendBooking("hi!", (-1));
        parkingSpaceFacade0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        parkingSpaceFacade0.toggleSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ 10.0 with Mobile Pay", true);
        ParkingSystem.SpaceManager spaceManager15 = parkingSpaceFacade0.getSpaceManager();
        boolean boolean19 = parkingSpaceFacade0.editBooking("02659ad3-0b5c-4c48-a915-a466f2b50775", "CLT-55105d92-54d6-44d2-965a-736022b7f7cd", (int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(spaceManager15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        parkingSpaceProxy1.addParkingLot("staff");
        boolean boolean17 = parkingSpaceProxy1.cancelBooking("ST001");
        boolean boolean20 = parkingSpaceProxy1.extendBooking("Paid $ 0.0 with Mobile Pay", (int) (byte) 0);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        boolean boolean11 = mobilePay0.processPayment("Jane", (double) 10L, "jane", "Paid $ 10.0 with Mobile Pay");
        boolean boolean16 = mobilePay0.processPayment("Jane", (double) (byte) 0, "hi!", "Jane");
        java.lang.String str17 = mobilePay0.getPaymentMessage();
        boolean boolean22 = mobilePay0.processPayment("Refunded without deposit ($-96.0)", (double) ' ', "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean27 = mobilePay0.processPayment("CLT-035180a0-4707-410d-a011-2a4f0f46838b", (double) (short) 10, "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str17, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user0.assignProxy(parkingSpaceProxy30);
        boolean boolean37 = parkingSpaceProxy30.cancelBooking("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff");
        parkingSpaceProxy30.toggleSpace("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "02659ad3-0b5c-4c48-a915-a466f2b50775", false);
        boolean boolean43 = parkingSpaceProxy30.checkIn("Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNotNull(client20);
// flaky "7) test1070(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str21, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.Booking booking5 = parkingSpace4.getCurrentBooking();
        ParkingSystem.ParkingLot parkingLot7 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot7.assignBooking(0, booking9);
        boolean boolean12 = parkingLot7.isSpaceAvailable((int) '#');
        boolean boolean14 = parkingLot7.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace16 = parkingLot7.getParkingSpace((int) (byte) 10);
        int int17 = parkingSpace16.getSpaceId();
        ParkingSystem.Booking booking18 = parkingSpace16.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager19 = new ParkingSystem.SpaceManager();
        boolean boolean22 = spaceManager19.isSpaceAvailable("hi!", (int) '#');
        spaceManager19.toggleLot("disabled", false);
        ParkingSystem.Booking booking35 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean36 = spaceManager19.assignBooking("empty", (int) (short) 0, booking35);
        boolean boolean37 = parkingSpace16.assignBooking(booking35);
        ParkingSystem.SpaceManager spaceManager38 = new ParkingSystem.SpaceManager();
        boolean boolean41 = spaceManager38.isSpaceAvailable("hi!", (int) '#');
        spaceManager38.toggleLot("disabled", false);
        ParkingSystem.Booking booking54 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean55 = spaceManager38.assignBooking("empty", (int) (short) 0, booking54);
        boolean boolean56 = booking54.isCheckedIn();
        java.lang.String str57 = booking54.getClientId();
        boolean boolean58 = parkingSpace16.assignBooking(booking54);
        boolean boolean59 = parkingSpace4.assignBooking(booking54);
        parkingSpace4.removeBooking();
        int int61 = parkingSpace4.getSpaceId();
        ParkingSystem.Booking booking62 = parkingSpace4.getCurrentBooking();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(parkingSpace16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(booking18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "staff" + "'", str57, "staff");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(booking62);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        boolean boolean44 = parkingSpaceFacade33.extendBooking("staff", 0);
        ParkingSystem.Booking booking46 = parkingSpaceFacade33.getBookingDetails("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(booking46);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean18 = bookingManager0.cancelBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        ParkingSystem.AccountRegistry accountRegistry19 = bookingManager0.getAccountRegistry();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap20 = bookingManager0.getActiveBookings();
        boolean boolean25 = bookingManager0.extendBooking("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", (int) (byte) 100, "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean7 = parkingSpaceFacade0.editBooking("Card number should be 16 digits", "", (int) (short) 0);
        parkingSpaceFacade0.toggleSpace("Paid $ 10.0 with Mobile Pay", "Refunded total cost of $1.0", true);
        java.lang.String str14 = parkingSpaceFacade0.scanSpace("disabled", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "disabled";
        boolean boolean10 = paymentManager0.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        paymentManager0.paymentMessage = "";
        paymentManager0.paymentMessage = "9701df9a-2178-4ad5-8076-46ff5f05b3e8";
        boolean boolean19 = paymentManager0.processPayment("tbHxuilT", 0.0d, "0b35479f-5869-423e-9abc-e4ab9cef903d", "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        boolean boolean21 = parkingSpaceProxy9.editBooking("empty", "Refunded without deposit ($0.0)", 100);
        java.lang.Object obj24 = parkingSpaceProxy9.login("25527a32-01ef-45ba-816a-1d0a2fc2a52d", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jane" + "'", str6, "jane");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user0.assignProxy(parkingSpaceProxy30);
        boolean boolean37 = parkingSpaceProxy30.cancelBooking("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff");
        parkingSpaceProxy30.toggleSpace("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", false);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNotNull(client20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jane" + "'", str21, "jane");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        ParkingSystem.User user13 = new ParkingSystem.User();
        java.lang.Object obj14 = user13.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        java.lang.String str23 = parkingSpaceProxy15.scanSpace("", "");
        parkingSpaceProxy15.toggleSpace("", "disabled", true);
        user13.parkingProxy = parkingSpaceProxy15;
        ParkingSystem.ParkingLot parkingLot30 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator31 = parkingLot30.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator32 = parkingLot30.getIterator();
        user13.user = parkingLot30;
        ParkingSystem.User user34 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj38 = parkingSpaceProxy35.login("empty", "Jane");
        parkingSpaceProxy35.validateClient("Jane");
        parkingSpaceProxy35.toggleSpace("", "staff", false);
        boolean boolean46 = parkingSpaceProxy35.cancelBooking("");
        user34.assignProxy(parkingSpaceProxy35);
        user13.user = parkingSpaceProxy35;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy49 = user13.parkingProxy;
        client0.assignProxy(parkingSpaceProxy49);
        ParkingSystem.Booking booking52 = parkingSpaceProxy49.getBookingDetails("");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator31);
        org.junit.Assert.assertNotNull(parkingLotIterator32);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy49);
        org.junit.Assert.assertNull(booking52);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean19 = bookingManager0.cancelBooking("Refunded total cost of $1.0");
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        checkInManager20.refundMessage = "Refunded total cost of $1.0";
        java.lang.String str23 = checkInManager20.refundMessage;
        java.lang.String str24 = checkInManager20.refundMessage;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Refunded total cost of $1.0" + "'", str23, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Refunded total cost of $1.0" + "'", str24, "Refunded total cost of $1.0");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundDeposit((double) 1.0f);
        java.lang.String str4 = paymentManager0.paymentMessage;
        boolean boolean6 = paymentManager0.refundDeposit(0.0d);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        boolean boolean48 = parkingSpace25.isAvailable();
        ParkingSystem.SpaceState spaceState49 = parkingSpace25.getState();
        java.lang.String str50 = parkingSpace25.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(spaceState49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean2 = parkingSpaceProxy0.cancelBooking("pass");
        parkingSpaceProxy0.addParkingLot("pass");
        boolean boolean6 = parkingSpaceProxy0.checkIn("Paid $ 100.0 with Mobile Pay");
        boolean boolean12 = parkingSpaceProxy0.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Refunded without deposit ($-42.0)", "Paid $ 0.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled");
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy0.getRegistry();
        parkingSpaceProxy0.autoGenerateManager();
        parkingSpaceProxy0.autoGenerateManager();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry13);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        java.lang.String str61 = parkingSpace58.scanSpace();
        int int62 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace58.getCurrentBooking();
        int int64 = parkingSpace58.getSpaceId();
        java.lang.String str65 = enabled0.scanSpace(parkingSpace58);
        boolean boolean66 = parkingSpace58.isAvailable();
        parkingSpace58.removeBooking();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "empty" + "'", str61, "empty");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "empty" + "'", str65, "empty");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        boolean boolean24 = bookingManager0.confirmBooking("Paid $ 10.0 with Mobile Pay", "empty", "empty", "Paid $ 10.0 with Mobile Pay", 0, "Jane", (int) 'a', "Jane", "empty");
        boolean boolean34 = bookingManager0.confirmBooking("empty", "hi!", "Paid $ 10.0 with Mobile Pay", "staff", (int) (byte) -1, "staff", (int) (short) 10, "empty", "Paid $ -1.0 with Mobile Pay");
        boolean boolean39 = bookingManager0.extendBooking("Paid $ 0.0 with Mobile Pay", (int) (byte) 1, "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        double double41 = bookingManager0.getDeposit("2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 15.0d + "'", double41 == 15.0d);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("Jane", "staff", (int) (short) 100);
        parkingSpaceFacade0.toggleSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", false);
        boolean boolean13 = parkingSpaceFacade0.extendBooking("disabled", (int) '4');
        boolean boolean15 = parkingSpaceFacade0.checkOut("9fJ5pCUl");
        ParkingSystem.SpaceManager spaceManager16 = parkingSpaceFacade0.getSpaceManager();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(spaceManager16);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        boolean boolean13 = client0.checkIn();
        boolean boolean14 = client0.checkIn();
        boolean boolean15 = client0.getIsValidated();
        ParkingSystem.Booking booking16 = client0.getBookingDetails();
        java.lang.String str17 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
// flaky "8) test1086(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        client0.assignProxy(parkingSpaceProxy15);
        parkingSpaceProxy15.validateClient("13b04414-31a5-407f-8ea3-fba4613c73d1");
        boolean boolean24 = parkingSpaceProxy15.extendBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (int) (byte) 10);
        parkingSpaceProxy15.toggleLot("Refunded total cost of $1.0", true);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean8 = booking7.isCheckedIn();
        int int9 = booking7.getDuration();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        ParkingSystem.Booking booking22 = bookingManager19.getBooking("staff");
        double double24 = bookingManager19.getHourlyRate("CLT-390234b0-d56e-4275-bd7b-122280609c69");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 15.0d + "'", double24 == 15.0d);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        java.lang.String str12 = superManager11.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager11.getRegistry();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList15 = cSVManager0.loadManagers();
// flaky "9) test1090(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "4) test1090(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str12, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry13);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean10 = parkingSpaceFacade0.confirmBooking("staff", "", "disabled", "hi!", (int) 'a', "jane", (int) 'a', "hi!", "");
        parkingSpaceFacade0.toggleLot("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", true);
        ParkingSystem.CheckInManager checkInManager14 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean18 = parkingSpaceFacade0.editBooking("8ca2ec61-774c-409d-89d5-5b9171b40497", "fhd49ADb", (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(checkInManager14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.CheckInManager checkInManager4 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean6 = parkingSpaceFacade0.checkOut("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(checkInManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled14);
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking19 = null;
        boolean boolean20 = parkingLot17.assignBooking(0, booking19);
        boolean boolean22 = parkingLot17.isSpaceAvailable((int) '#');
        boolean boolean24 = parkingLot17.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace26 = parkingLot17.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking27 = parkingSpace26.getCurrentBooking();
        parkingSpace26.removeBooking();
        int int29 = parkingSpace26.getSpaceId();
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        boolean boolean38 = parkingSpace26.assignBooking(booking37);
        java.lang.String str39 = enabled14.scanSpace(parkingSpace26);
        ParkingSystem.ParkingLot parkingLot41 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking43 = null;
        boolean boolean44 = parkingLot41.assignBooking(0, booking43);
        boolean boolean46 = parkingLot41.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator47 = parkingLot41.getIterator();
        boolean boolean48 = parkingLotIterator47.hasNext();
        ParkingSystem.ParkingSpace parkingSpace49 = parkingLotIterator47.next();
        ParkingSystem.ParkingSpace parkingSpace50 = parkingLotIterator47.next();
        java.lang.String str51 = enabled14.scanSpace(parkingSpace50);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parkingSpace26);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(parkingSpace49);
        org.junit.Assert.assertNotNull(parkingSpace50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "empty" + "'", str51, "empty");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled14);
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking19 = null;
        boolean boolean20 = parkingLot17.assignBooking(0, booking19);
        boolean boolean22 = parkingLot17.isSpaceAvailable((int) '#');
        boolean boolean24 = parkingLot17.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace26 = parkingLot17.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking27 = parkingSpace26.getCurrentBooking();
        parkingSpace26.removeBooking();
        ParkingSystem.Booking booking29 = parkingSpace26.getCurrentBooking();
        java.lang.String str30 = enabled14.scanSpace(parkingSpace26);
        ParkingSystem.Disabled disabled31 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingLot parkingLot33 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking35 = null;
        boolean boolean36 = parkingLot33.assignBooking(0, booking35);
        boolean boolean38 = parkingLot33.isSpaceAvailable((int) '#');
        boolean boolean40 = parkingLot33.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace42 = parkingLot33.getParkingSpace((int) (byte) 10);
        int int43 = parkingSpace42.getSpaceId();
        ParkingSystem.Booking booking44 = parkingSpace42.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager45 = new ParkingSystem.SpaceManager();
        boolean boolean48 = spaceManager45.isSpaceAvailable("hi!", (int) '#');
        spaceManager45.toggleLot("disabled", false);
        ParkingSystem.Booking booking61 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean62 = spaceManager45.assignBooking("empty", (int) (short) 0, booking61);
        boolean boolean63 = parkingSpace42.assignBooking(booking61);
        java.lang.String str64 = disabled31.scanSpace(parkingSpace42);
        java.lang.String str65 = parkingSpace42.scanSpace();
        ParkingSystem.ParkingLot parkingLot67 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking69 = null;
        boolean boolean70 = parkingLot67.assignBooking(0, booking69);
        boolean boolean72 = parkingLot67.isSpaceAvailable((int) '#');
        boolean boolean74 = parkingLot67.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace76 = parkingLot67.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking77 = parkingSpace76.getCurrentBooking();
        ParkingSystem.Booking booking78 = parkingSpace76.getCurrentBooking();
        ParkingSystem.Disabled disabled79 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace80 = null;
        java.lang.String str81 = disabled79.scanSpace(parkingSpace80);
        ParkingSystem.ParkingSpace parkingSpace82 = null;
        java.lang.String str83 = disabled79.scanSpace(parkingSpace82);
        parkingSpace76.setState((ParkingSystem.SpaceState) disabled79);
        parkingSpace42.setState((ParkingSystem.SpaceState) disabled79);
        java.lang.String str86 = enabled14.scanSpace(parkingSpace42);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parkingSpace26);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertNull(booking29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "empty" + "'", str30, "empty");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(parkingSpace42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNull(booking44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "disabled" + "'", str64, "disabled");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "disabled" + "'", str65, "disabled");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(parkingSpace76);
        org.junit.Assert.assertNull(booking77);
        org.junit.Assert.assertNull(booking78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "disabled" + "'", str81, "disabled");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "disabled" + "'", str83, "disabled");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "disabled" + "'", str86, "disabled");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("Jane");
        parkingSpaceProxy0.addParkingLot("Refunded without deposit ($0.0)");
        parkingSpaceProxy0.autoGenerateManager();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean6 = bookingManager0.extendBooking("jane", (int) (byte) 100, "hi!", "jane");
        ParkingSystem.SpaceManager spaceManager7 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap8 = bookingManager0.getActiveBookings();
        ParkingSystem.CheckInManager checkInManager9 = new ParkingSystem.CheckInManager(bookingManager0);
        java.lang.String str10 = checkInManager9.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(spaceManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        boolean boolean22 = client0.editBooking("jane", 0);
        ParkingSystem.Booking booking23 = client0.getBookingDetails();
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        accountRegistry27.assignProxyToManager("disabled", parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry36 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry36);
        java.lang.String str38 = superManager37.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry42 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager43 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry42);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = null;
        accountRegistry42.assignProxyToManager("disabled", parkingSpaceProxy45);
        superManager37.registry = accountRegistry42;
        ParkingSystem.AccountRegistry accountRegistry48 = superManager37.getRegistry();
        ParkingSystem.Manager manager49 = accountRegistry48.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry52 = parkingSpaceProxy51.getRegistry();
        boolean boolean58 = parkingSpaceProxy51.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy51.toggleLot("hi!", false);
        accountRegistry48.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy51);
        accountRegistry27.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy51);
        parkingSpaceProxy51.displayPendingValidations();
        boolean boolean66 = parkingSpaceProxy51.checkIn("13b04414-31a5-407f-8ea3-fba4613c73d1");
        client0.assignProxy(parkingSpaceProxy51);
        org.junit.Assert.assertNotNull(client0);
// flaky "10) test1097(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str1, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "5) test1097(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky "2) test1097(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str11, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(booking23);
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str38, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(superManager43);
        org.junit.Assert.assertNotNull(accountRegistry48);
        org.junit.Assert.assertNotNull(manager49);
        org.junit.Assert.assertNotNull(accountRegistry52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        accountRegistry1.assignProxyToManager("pass", parkingSpaceProxy3);
        ParkingSystem.Manager manager14 = accountRegistry1.autoGenerateManager();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(manager14);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        java.lang.String str22 = superManager21.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager21.registry;
        java.lang.String str24 = superManager21.getManagerId();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getName();
        client25.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry30 = parkingSpaceProxy29.getRegistry();
        boolean boolean32 = parkingSpaceProxy29.checkIn("");
        client25.assignProxy(parkingSpaceProxy29);
        boolean boolean34 = client25.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        client25.assignProxy(parkingSpaceProxy35);
        superManager21.assignProxy(parkingSpaceProxy35);
        user0.assignProxy(parkingSpaceProxy35);
        ParkingSystem.AccountRegistry accountRegistry39 = parkingSpaceProxy35.getRegistry();
        boolean boolean41 = parkingSpaceProxy35.checkOut("Refunded total cost of $1.0");
        parkingSpaceProxy35.toggleSpace("Paid $ 100.0 with Mobile Pay", "", false);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str22, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str24, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(client25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "empty" + "'", str26, "empty");
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(accountRegistry39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = parkingSpaceProxy0.getFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        java.lang.String str3 = checkInManager2.refundMessage;
        org.junit.Assert.assertNotNull(parkingSpaceFacade1);
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean18 = client0.extendBooking((int) '#');
        boolean boolean19 = client0.checkOut();
        boolean boolean20 = client0.cancelBooking();
        org.junit.Assert.assertNotNull(client0);
// flaky "11) test1101(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "6) test1101(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "staff" + "'", str10, "staff");
// flaky "3) test1101(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
// flaky "2) test1101(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "jane" + "'", str12, "jane");
// flaky "2) test1101(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str13, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        ParkingSystem.SpaceManager spaceManager32 = new ParkingSystem.SpaceManager();
        boolean boolean35 = spaceManager32.isSpaceAvailable("hi!", (int) '#');
        spaceManager32.toggleLot("disabled", false);
        ParkingSystem.Booking booking48 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean49 = spaceManager32.assignBooking("empty", (int) (short) 0, booking48);
        ParkingSystem.SpaceManager spaceManager52 = new ParkingSystem.SpaceManager();
        boolean boolean55 = spaceManager52.isSpaceAvailable("hi!", (int) '#');
        spaceManager52.toggleLot("disabled", false);
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean69 = spaceManager52.assignBooking("empty", (int) (short) 0, booking68);
        boolean boolean70 = spaceManager32.assignBooking("disabled", (int) (byte) 0, booking68);
        boolean boolean71 = parkingSpace10.assignBooking(booking68);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime72 = booking68.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager21 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap22 = spaceManager21.getParkingLots();
        spaceManager21.toggleSpace("TXCrKOGD", "Paid $ 10.0 with Mobile Pay", false);
        ParkingSystem.ParkingLot parkingLot30 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking32 = null;
        boolean boolean33 = parkingLot30.assignBooking(0, booking32);
        boolean boolean35 = parkingLot30.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator36 = parkingLot30.getIterator();
        boolean boolean37 = parkingLotIterator36.hasNext();
        ParkingSystem.ParkingSpace parkingSpace38 = parkingLotIterator36.next();
        ParkingSystem.SpaceManager spaceManager39 = new ParkingSystem.SpaceManager();
        boolean boolean42 = spaceManager39.isSpaceAvailable("hi!", (int) '#');
        spaceManager39.toggleLot("disabled", false);
        ParkingSystem.Booking booking55 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean56 = spaceManager39.assignBooking("empty", (int) (short) 0, booking55);
        ParkingSystem.SpaceManager spaceManager59 = new ParkingSystem.SpaceManager();
        boolean boolean62 = spaceManager59.isSpaceAvailable("hi!", (int) '#');
        spaceManager59.toggleLot("disabled", false);
        ParkingSystem.Booking booking75 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean76 = spaceManager59.assignBooking("empty", (int) (short) 0, booking75);
        boolean boolean77 = spaceManager39.assignBooking("disabled", (int) (byte) 0, booking75);
        boolean boolean78 = parkingSpace38.assignBooking(booking75);
        java.lang.String str79 = booking75.getLotId();
        boolean boolean80 = spaceManager21.assignBooking("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", (int) (short) 1, booking75);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parkingSpace38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "jane" + "'", str79, "jane");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager3 = parkingSpaceFacade1.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap4 = spaceManager3.getParkingLots();
        cSVManager0.loadParkingLots(strMap4);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.CSVManager cSVManager7 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray8 = cSVManager7.loadSuperManager();
        java.lang.String[] strArray9 = cSVManager7.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade10 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager11 = parkingSpaceFacade10.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap12 = spaceManager11.getParkingLots();
        cSVManager7.saveParkingLots(strMap12);
        cSVManager0.saveParkingLots(strMap12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList15 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertNotNull(spaceManager3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "12) test1104(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray8);
// flaky "7) test1104(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray8, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray9);
// flaky "4) test1104(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean10 = parkingSpaceFacade0.confirmBooking("staff", "", "disabled", "hi!", (int) 'a', "jane", (int) 'a', "hi!", "");
        parkingSpaceFacade0.toggleLot("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", true);
        ParkingSystem.CheckInManager checkInManager14 = parkingSpaceFacade0.getCheckInManager();
        java.lang.String str15 = checkInManager14.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(checkInManager14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean3 = parkingSpaceProxy0.checkIn("");
        parkingSpaceProxy0.displayPendingValidations();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean7 = parkingSpaceProxy0.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean11 = parkingSpaceProxy0.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean14 = parkingSpaceProxy0.extendBooking("", 0);
        parkingSpaceProxy0.validateClient("Paid $ -1.0 with Mobile Pay");
        boolean boolean18 = parkingSpaceProxy0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry2 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = parkingSpaceProxy0.getFacade();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNotNull(accountRegistry2);
        org.junit.Assert.assertNotNull(parkingSpaceFacade3);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        java.lang.String str18 = booking15.getLicensePlate();
        booking15.setStartTime("hi!");
        java.lang.String str21 = booking15.getStartTime();
        int int22 = booking15.getDuration();
        int int23 = booking15.getDuration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.AccountRegistry accountRegistry13 = bookingManager12.getAccountRegistry();
        ParkingSystem.SpaceManager spaceManager14 = bookingManager12.getSpaceManager();
        boolean boolean24 = bookingManager12.confirmBooking("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "empty", "empty", 100, "83a51dc6-0c8f-4f21-ae40-68699828f95d", (int) (short) -1, "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        org.junit.Assert.assertNotNull(client0);
// flaky "13) test1110(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(spaceManager14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.Enabled enabled3 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot5 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking7 = null;
        boolean boolean8 = parkingLot5.assignBooking(0, booking7);
        boolean boolean10 = parkingLot5.isSpaceAvailable((int) '#');
        boolean boolean12 = parkingLot5.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace14 = parkingLot5.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking15 = parkingSpace14.getCurrentBooking();
        parkingSpace14.removeBooking();
        java.lang.String str17 = enabled3.scanSpace(parkingSpace14);
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean26 = parkingLot19.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace28 = parkingLot19.getParkingSpace((int) (byte) 10);
        int int29 = parkingSpace28.getSpaceId();
        ParkingSystem.Booking booking30 = parkingSpace28.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager31 = new ParkingSystem.SpaceManager();
        boolean boolean34 = spaceManager31.isSpaceAvailable("hi!", (int) '#');
        spaceManager31.toggleLot("disabled", false);
        ParkingSystem.Booking booking47 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean48 = spaceManager31.assignBooking("empty", (int) (short) 0, booking47);
        boolean boolean49 = parkingSpace28.assignBooking(booking47);
        java.lang.String str50 = enabled3.scanSpace(parkingSpace28);
        java.lang.String str51 = disabled0.scanSpace(parkingSpace28);
        ParkingSystem.Booking booking52 = parkingSpace28.getCurrentBooking();
        int int53 = parkingSpace28.getSpaceId();
        java.lang.String str54 = parkingSpace28.scanSpace();
        boolean boolean55 = parkingSpace28.isAvailable();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpace14);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disabled" + "'", str51, "disabled");
        org.junit.Assert.assertNotNull(booking52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "disabled" + "'", str54, "disabled");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        boolean boolean4 = client0.extendBooking(100);
        java.lang.String str5 = client0.getClientId();
        client0.setValidated(true);
        org.junit.Assert.assertNotNull(client0);
// flaky "14) test1112(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
// flaky "8) test1112(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky "5) test1112(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        double double22 = bookingManager19.getDeposit("02659ad3-0b5c-4c48-a915-a466f2b50775");
        ParkingSystem.MobilePay mobilePay23 = new ParkingSystem.MobilePay();
        boolean boolean28 = mobilePay23.processPayment("hi!", (-1.0d), "", "");
        java.lang.String str29 = mobilePay23.getPaymentMessage();
        bookingManager19.setPaymentStrategy((ParkingSystem.Strategy) mobilePay23);
        ParkingSystem.Booking booking32 = bookingManager19.getBooking("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        boolean boolean42 = bookingManager19.confirmBooking("K6PkM9rcCx", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", (int) (short) 0, "Paid $ 15.0 with Mobile Pay", (int) (byte) -1, "hi!", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "15) test1113(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 15.0d + "'", double22 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str29, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNull(booking32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean6 = bookingManager0.cancelBooking("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        ParkingSystem.ParkingLot parkingLot11 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking13 = null;
        boolean boolean14 = parkingLot11.assignBooking(0, booking13);
        boolean boolean16 = parkingLot11.isSpaceAvailable((int) '#');
        boolean boolean18 = parkingLot11.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace20 = parkingLot11.getParkingSpace((int) (byte) 10);
        int int21 = parkingSpace20.getSpaceId();
        ParkingSystem.Booking booking22 = parkingSpace20.getCurrentBooking();
        java.lang.String str23 = parkingSpace20.scanSpace();
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        parkingSpace20.setState((ParkingSystem.SpaceState) enabled24);
        parkingSpace9.setState((ParkingSystem.SpaceState) enabled24);
        ParkingSystem.Enabled enabled27 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot29 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking31 = null;
        boolean boolean32 = parkingLot29.assignBooking(0, booking31);
        boolean boolean34 = parkingLot29.isSpaceAvailable((int) '#');
        boolean boolean36 = parkingLot29.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace38 = parkingLot29.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking39 = parkingSpace38.getCurrentBooking();
        parkingSpace38.removeBooking();
        java.lang.String str41 = enabled27.scanSpace(parkingSpace38);
        ParkingSystem.ParkingLot parkingLot43 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking45 = null;
        boolean boolean46 = parkingLot43.assignBooking(0, booking45);
        boolean boolean48 = parkingLot43.isSpaceAvailable((int) '#');
        boolean boolean50 = parkingLot43.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace52 = parkingLot43.getParkingSpace((int) (byte) 10);
        int int53 = parkingSpace52.getSpaceId();
        ParkingSystem.Booking booking54 = parkingSpace52.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager55 = new ParkingSystem.SpaceManager();
        boolean boolean58 = spaceManager55.isSpaceAvailable("hi!", (int) '#');
        spaceManager55.toggleLot("disabled", false);
        ParkingSystem.Booking booking71 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean72 = spaceManager55.assignBooking("empty", (int) (short) 0, booking71);
        boolean boolean73 = parkingSpace52.assignBooking(booking71);
        java.lang.String str74 = enabled27.scanSpace(parkingSpace52);
        java.lang.String str75 = enabled24.scanSpace(parkingSpace52);
        ParkingSystem.Booking booking83 = new ParkingSystem.Booking("Jane", "Refunded without deposit ($-42.0)", (int) (short) 0, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) (short) 10, "Paid $ -1.0 with Mobile Pay", (double) (short) 10);
        booking83.setCheckedIn(true);
        boolean boolean86 = parkingSpace52.assignBooking(booking83);
        java.lang.String str87 = booking83.getStartTime();
        java.lang.String str88 = booking83.getClientId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parkingSpace20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "empty" + "'", str23, "empty");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parkingSpace38);
        org.junit.Assert.assertNull(booking39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "empty" + "'", str41, "empty");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(parkingSpace52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNull(booking54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "disabled" + "'", str74, "disabled");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "disabled" + "'", str75, "disabled");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str87, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Jane" + "'", str88, "Jane");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.Booking booking4 = client0.getBookingDetails();
        java.lang.String str5 = client0.getUsername();
        java.lang.String str6 = client0.getUsername();
        ParkingSystem.Booking booking7 = client0.getBookingDetails();
        boolean boolean10 = client0.editBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", (int) '4');
        java.lang.String str11 = client0.getName();
        org.junit.Assert.assertNotNull(client0);
// flaky "16) test1116(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(booking4);
// flaky "9) test1116(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky "6) test1116(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(booking7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky "3) test1116(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        ParkingSystem.Client client10 = accountRegistry8.getClient("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str5, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str6, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertNull(client10);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        java.util.List<ParkingSystem.Client> clientList14 = accountRegistry3.displayPendingValidations();
        ParkingSystem.AccountRegistry accountRegistry19 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager20 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry19);
        boolean boolean22 = accountRegistry19.requiresValidation("disabled");
        int int23 = accountRegistry19.getManagersSize();
        boolean boolean29 = accountRegistry19.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy31 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj34 = parkingSpaceProxy31.login("empty", "Jane");
        parkingSpaceProxy31.validateClient("Jane");
        parkingSpaceProxy31.toggleSpace("", "staff", false);
        boolean boolean42 = parkingSpaceProxy31.cancelBooking("Jane");
        accountRegistry19.assignProxyToClient("pass", parkingSpaceProxy31);
        parkingSpaceProxy31.autoGenerateManager();
        parkingSpaceProxy31.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade49 = parkingSpaceProxy31.getFacade();
        accountRegistry3.assignProxyToClient("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy31);
        boolean boolean52 = parkingSpaceProxy31.checkOut("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(clientList14);
        org.junit.Assert.assertNotNull(superManager20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.SpaceManager spaceManager15 = new ParkingSystem.SpaceManager();
        boolean boolean18 = spaceManager15.isSpaceAvailable("hi!", (int) '#');
        spaceManager15.toggleLot("disabled", false);
        ParkingSystem.Booking booking31 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean32 = spaceManager15.assignBooking("empty", (int) (short) 0, booking31);
        java.lang.String str33 = booking31.getClientId();
        boolean boolean34 = parkingSpace10.assignBooking(booking31);
        java.lang.String str35 = booking31.getClientId();
        double double36 = booking31.getTotalCost();
        int int37 = booking31.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "staff" + "'", str33, "staff");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "staff" + "'", str35, "staff");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        boolean boolean15 = accountRegistry12.requiresValidation("disabled");
        int int16 = accountRegistry12.getManagersSize();
        boolean boolean22 = accountRegistry12.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj27 = parkingSpaceProxy24.login("empty", "Jane");
        parkingSpaceProxy24.validateClient("Jane");
        parkingSpaceProxy24.toggleSpace("", "staff", false);
        boolean boolean35 = parkingSpaceProxy24.cancelBooking("Jane");
        accountRegistry12.assignProxyToClient("pass", parkingSpaceProxy24);
        parkingSpaceProxy24.autoGenerateManager();
        parkingSpaceProxy24.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        superManager4.assignProxy(parkingSpaceProxy24);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade43 = parkingSpaceProxy24.getFacade();
        parkingSpaceFacade43.toggleLot("pass", false);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str5, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str6, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade43);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str17 = client7.getUsername();
        java.lang.String str18 = client7.getPassword();
        java.lang.String str19 = client7.getClientType();
        boolean boolean20 = client7.getIsValidated();
        boolean boolean28 = client7.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        java.lang.String str29 = client7.getName();
        boolean boolean30 = client7.getIsValidated();
        cSVManager0.saveClient(client7);
        java.lang.String[] strArray32 = cSVManager0.loadSuperManager();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList33 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "17) test1121(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray32);
// flaky "10) test1121(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray32, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.Enabled enabled3 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot5 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking7 = null;
        boolean boolean8 = parkingLot5.assignBooking(0, booking7);
        boolean boolean10 = parkingLot5.isSpaceAvailable((int) '#');
        boolean boolean12 = parkingLot5.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace14 = parkingLot5.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking15 = parkingSpace14.getCurrentBooking();
        parkingSpace14.removeBooking();
        java.lang.String str17 = enabled3.scanSpace(parkingSpace14);
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean26 = parkingLot19.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace28 = parkingLot19.getParkingSpace((int) (byte) 10);
        int int29 = parkingSpace28.getSpaceId();
        ParkingSystem.Booking booking30 = parkingSpace28.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager31 = new ParkingSystem.SpaceManager();
        boolean boolean34 = spaceManager31.isSpaceAvailable("hi!", (int) '#');
        spaceManager31.toggleLot("disabled", false);
        ParkingSystem.Booking booking47 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean48 = spaceManager31.assignBooking("empty", (int) (short) 0, booking47);
        boolean boolean49 = parkingSpace28.assignBooking(booking47);
        java.lang.String str50 = enabled3.scanSpace(parkingSpace28);
        java.lang.String str51 = disabled0.scanSpace(parkingSpace28);
        java.lang.String str52 = parkingSpace28.scanSpace();
        ParkingSystem.Booking booking53 = parkingSpace28.getCurrentBooking();
        double double54 = booking53.getTotalCost();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpace14);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disabled" + "'", str51, "disabled");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "disabled" + "'", str52, "disabled");
        org.junit.Assert.assertNotNull(booking53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap20 = bookingManager0.getActiveBookings();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap21 = bookingManager0.getActiveBookings();
        double double24 = bookingManager0.calculateCost("pass", (int) (short) -1);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager21 = bookingManager0.getSpaceManager();
        ParkingSystem.SpaceManager spaceManager22 = bookingManager0.getSpaceManager();
        ParkingSystem.SpaceManager spaceManager23 = bookingManager0.getSpaceManager();
        boolean boolean26 = spaceManager23.isSpaceAvailable("Paid $ 100.0 with Mobile Pay", 32);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager21);
        org.junit.Assert.assertNotNull(spaceManager22);
        org.junit.Assert.assertNotNull(spaceManager23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        boolean boolean10 = mobilePay0.processPayment("jane", 15.0d, "jane", "");
        boolean boolean15 = mobilePay0.processPayment("", (double) 0, "Refunded without deposit ($-42.0)", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        java.lang.String str16 = mobilePay0.getPaymentMessage();
        java.lang.String str17 = mobilePay0.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str16, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str17, "Paid $ 0.0 with Mobile Pay");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean4 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) 10);
        parkingSpaceFacade0.toggleLot("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", true);
        boolean boolean9 = parkingSpaceFacade0.cancelBooking("2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean12 = parkingSpaceFacade0.extendBooking("Paid $ 15.0 with Mobile Pay", (int) 'a');
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        java.lang.String str9 = superManager4.getPassword();
        ParkingSystem.AccountRegistry accountRegistry13 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry13);
        boolean boolean16 = accountRegistry13.requiresValidation("disabled");
        int int17 = accountRegistry13.getManagersSize();
        boolean boolean23 = accountRegistry13.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        java.util.List<ParkingSystem.Client> clientList24 = accountRegistry13.displayPendingValidations();
        superManager4.registry = accountRegistry13;
        ParkingSystem.AccountRegistry accountRegistry32 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager33 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry32);
        ParkingSystem.AccountRegistry accountRegistry37 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager38 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry37);
        superManager33.registry = accountRegistry37;
        ParkingSystem.SuperManager superManager40 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry37);
        superManager4.registry = accountRegistry37;
        ParkingSystem.AccountRegistry accountRegistry42 = superManager4.getRegistry();
        java.lang.String str43 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry44 = superManager4.getRegistry();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str5, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str6, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str9, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(clientList24);
        org.junit.Assert.assertNotNull(superManager33);
        org.junit.Assert.assertNotNull(superManager38);
        org.junit.Assert.assertNotNull(superManager40);
        org.junit.Assert.assertNotNull(accountRegistry42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str43, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry44);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        boolean boolean23 = bookingManager0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "", "Jane");
        java.lang.Class<?> wildcardClass24 = bookingManager0.getClass();
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        java.lang.String str4 = paymentManager0.paymentMessage;
        ParkingSystem.BookingManager bookingManager5 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager6 = new ParkingSystem.CheckInManager(bookingManager5);
        ParkingSystem.Booking booking8 = bookingManager5.getBooking("");
        ParkingSystem.SpaceManager spaceManager9 = bookingManager5.getSpaceManager();
        boolean boolean19 = bookingManager5.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double21 = bookingManager5.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit22 = new ParkingSystem.DebitOrCredit();
        bookingManager5.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit22);
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit22);
        paymentManager0.refundMessage = "disabled";
        boolean boolean29 = paymentManager0.refundWithoutDeposit((double) 0L, (double) 0.0f);
        java.lang.String str30 = paymentManager0.refundMessage;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(booking8);
        org.junit.Assert.assertNotNull(spaceManager9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Refunded without deposit ($0.0)" + "'", str30, "Refunded without deposit ($0.0)");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        parkingLot1.removeBooking(2);
        ParkingSystem.ParkingSpace parkingSpace5 = parkingLot1.getParkingSpace(0);
        int int6 = parkingSpace5.getSpaceId();
        org.junit.Assert.assertNotNull(parkingSpace5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Card number should be 16 digits");
        ParkingSystem.CSVManager cSVManager5 = new ParkingSystem.CSVManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap6 = null;
        cSVManager5.loadParkingLots(strMap6);
        ParkingSystem.CSVManager cSVManager8 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList10 = cSVManager8.readCSV("");
        java.util.List<java.lang.String[]> strArrayList12 = cSVManager8.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap13 = null;
        cSVManager8.loadParkingLots(strMap13);
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        ParkingSystem.Manager manager20 = superManager19.autoGenerateManager();
        cSVManager8.saveManager((ParkingSystem.Manager) superManager19);
        ParkingSystem.SpaceManager spaceManager22 = new ParkingSystem.SpaceManager();
        boolean boolean25 = spaceManager22.isSpaceAvailable("hi!", (int) '#');
        spaceManager22.toggleLot("disabled", false);
        ParkingSystem.Booking booking38 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean39 = spaceManager22.assignBooking("empty", (int) (short) 0, booking38);
        spaceManager22.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap41 = spaceManager22.getParkingLots();
        cSVManager8.loadParkingLots(strMap41);
        ParkingSystem.SpaceManager spaceManager43 = new ParkingSystem.SpaceManager();
        boolean boolean46 = spaceManager43.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str49 = spaceManager43.scanSpace("disabled", "");
        spaceManager43.addParkingLot("hi!");
        java.lang.String str54 = spaceManager43.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap55 = spaceManager43.getParkingLots();
        cSVManager8.saveParkingLots(strMap55);
        cSVManager5.saveParkingLots(strMap55);
        cSVManager0.loadParkingLots(strMap55);
        cSVManager0.updateClientValidation("Refunded total cost of $100.0", false);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList12);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(manager20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "disabled" + "'", str49, "disabled");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "disabled" + "'", str54, "disabled");
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager9 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry10 = superManager4.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry11 = superManager4.registry;
        superManager4.setManagerInfo("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", "Paid $ 1.0 with Mobile Pay", "");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str5, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str6, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNotNull(manager9);
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertNotNull(accountRegistry11);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.User user2 = new ParkingSystem.User();
        java.lang.Object obj3 = user2.user;
        ParkingSystem.Client client4 = ParkingSystem.Client.getInstance();
        java.lang.String str5 = client4.getName();
        client4.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry9 = parkingSpaceProxy8.getRegistry();
        boolean boolean11 = parkingSpaceProxy8.checkIn("");
        client4.assignProxy(parkingSpaceProxy8);
        boolean boolean13 = client4.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        client4.assignProxy(parkingSpaceProxy14);
        ParkingSystem.AccountRegistry accountRegistry16 = parkingSpaceProxy14.getRegistry();
        boolean boolean18 = parkingSpaceProxy14.checkIn("hi!");
        user2.parkingProxy = parkingSpaceProxy14;
        user2.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = user2.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        user2.assignProxy(parkingSpaceProxy27);
        boolean boolean38 = parkingSpaceProxy27.confirmBooking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "09622cbf-e665-45db-b1ad-365065947a20", "Paid $ 15.0 with Mobile Pay", (int) (byte) -1, "Refunded without deposit ($0.0)", 0, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "13b04414-31a5-407f-8ea3-fba4613c73d1");
        user0.assignProxy(parkingSpaceProxy27);
        boolean boolean49 = parkingSpaceProxy27.confirmBooking("", "Refunded without deposit ($-42.0)", "Refunded without deposit ($0.0)", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) (byte) -1, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) (byte) 100, "Refunded without deposit ($-96.0)", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(client4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jane" + "'", str5, "jane");
        org.junit.Assert.assertNotNull(accountRegistry9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(accountRegistry16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy26);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        java.lang.String str1 = mobilePay0.getPaymentMessage();
        boolean boolean6 = mobilePay0.processPayment("Jane", 10.0d, "empty", "jane");
        boolean boolean11 = mobilePay0.processPayment("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", (double) 100L, "89de8237-29df-4908-9de4-6dc1ce90de94", "staff");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("pass");
        parkingLot1.removeBooking(0);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        boolean boolean11 = parkingLot6.isSpaceAvailable((int) '#');
        boolean boolean13 = parkingLot6.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace15 = parkingLot6.getParkingSpace((int) (byte) 10);
        int int16 = parkingSpace15.getSpaceId();
        ParkingSystem.Booking booking17 = parkingSpace15.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager18 = new ParkingSystem.SpaceManager();
        boolean boolean21 = spaceManager18.isSpaceAvailable("hi!", (int) '#');
        spaceManager18.toggleLot("disabled", false);
        ParkingSystem.Booking booking34 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean35 = spaceManager18.assignBooking("empty", (int) (short) 0, booking34);
        boolean boolean36 = parkingSpace15.assignBooking(booking34);
        ParkingSystem.SpaceManager spaceManager37 = new ParkingSystem.SpaceManager();
        boolean boolean40 = spaceManager37.isSpaceAvailable("hi!", (int) '#');
        spaceManager37.toggleLot("disabled", false);
        ParkingSystem.Booking booking53 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean54 = spaceManager37.assignBooking("empty", (int) (short) 0, booking53);
        boolean boolean55 = booking53.isCheckedIn();
        java.lang.String str56 = booking53.getClientId();
        boolean boolean57 = parkingSpace15.assignBooking(booking53);
        boolean boolean58 = parkingLot1.assignBooking((int) 'a', booking53);
        boolean boolean59 = booking53.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parkingSpace15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNull(booking17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "staff" + "'", str56, "staff");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        int int2 = accountRegistry1.getManagersSize();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        java.lang.String str4 = parkingSpaceProxy0.scanSpace("empty", "hi!");
        boolean boolean14 = parkingSpaceProxy0.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean18 = parkingSpaceProxy0.editBooking("pass", "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 100);
        parkingSpaceProxy0.autoGenerateManager();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        parkingLot1.setEnabled(true);
        parkingLot1.removeBooking((int) (short) 10);
        ParkingSystem.ParkingLotIterator parkingLotIterator11 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) (short) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator14 = parkingLot1.getIterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator11);
        org.junit.Assert.assertNotNull(parkingLotIterator14);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        parkingSpace11.removeBooking();
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking19 = null;
        boolean boolean20 = parkingLot17.assignBooking(0, booking19);
        boolean boolean22 = parkingLot17.isSpaceAvailable((int) '#');
        boolean boolean24 = parkingLot17.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace26 = parkingLot17.getParkingSpace((int) (byte) 10);
        ParkingSystem.SpaceState spaceState27 = parkingSpace26.getState();
        ParkingSystem.ParkingLot parkingLot29 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking31 = null;
        boolean boolean32 = parkingLot29.assignBooking(0, booking31);
        boolean boolean34 = parkingLot29.isSpaceAvailable((int) '#');
        boolean boolean35 = parkingLot29.isEnabled();
        boolean boolean37 = parkingLot29.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator38 = parkingLot29.getIterator();
        boolean boolean39 = parkingLotIterator38.hasNext();
        ParkingSystem.ParkingSpace parkingSpace40 = parkingLotIterator38.next();
        java.lang.String str41 = spaceState27.scanSpace(parkingSpace40);
        parkingSpace11.setState(spaceState27);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parkingSpace26);
        org.junit.Assert.assertNotNull(spaceState27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(parkingSpace40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "empty" + "'", str41, "empty");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        java.lang.String str29 = booking25.getStartTime();
        int int30 = booking25.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jane" + "'", str29, "Jane");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        spaceManager19.addParkingLot("Jane");
        boolean boolean24 = spaceManager19.isSpaceAvailable("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", (int) (short) 10);
        ParkingSystem.ParkingLot parkingLot28 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking30 = null;
        boolean boolean31 = parkingLot28.assignBooking(0, booking30);
        boolean boolean33 = parkingLot28.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator34 = parkingLot28.getIterator();
        boolean boolean35 = parkingLotIterator34.hasNext();
        ParkingSystem.ParkingSpace parkingSpace36 = parkingLotIterator34.next();
        ParkingSystem.SpaceManager spaceManager37 = new ParkingSystem.SpaceManager();
        boolean boolean40 = spaceManager37.isSpaceAvailable("hi!", (int) '#');
        spaceManager37.toggleLot("disabled", false);
        ParkingSystem.Booking booking53 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean54 = spaceManager37.assignBooking("empty", (int) (short) 0, booking53);
        ParkingSystem.SpaceManager spaceManager57 = new ParkingSystem.SpaceManager();
        boolean boolean60 = spaceManager57.isSpaceAvailable("hi!", (int) '#');
        spaceManager57.toggleLot("disabled", false);
        ParkingSystem.Booking booking73 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean74 = spaceManager57.assignBooking("empty", (int) (short) 0, booking73);
        boolean boolean75 = spaceManager37.assignBooking("disabled", (int) (byte) 0, booking73);
        boolean boolean76 = parkingSpace36.assignBooking(booking73);
        java.lang.String str77 = booking73.getClientId();
        java.lang.String str78 = booking73.getLotId();
        booking73.setStartTime("disabled");
        int int81 = booking73.getSpaceId();
        boolean boolean82 = spaceManager19.assignBooking("empty", (int) (byte) -1, booking73);
        java.lang.String str85 = spaceManager19.scanSpace("CLT-390234b0-d56e-4275-bd7b-122280609c69", "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parkingSpace36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "staff" + "'", str77, "staff");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "jane" + "'", str78, "jane");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "disabled" + "'", str85, "disabled");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.Disabled disabled48 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace49 = null;
        java.lang.String str50 = disabled48.scanSpace(parkingSpace49);
        ParkingSystem.ParkingSpace parkingSpace51 = null;
        java.lang.String str52 = disabled48.scanSpace(parkingSpace51);
        ParkingSystem.ParkingLot parkingLot54 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking56 = null;
        boolean boolean57 = parkingLot54.assignBooking(0, booking56);
        boolean boolean59 = parkingLot54.isSpaceAvailable((int) '#');
        boolean boolean61 = parkingLot54.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace63 = parkingLot54.getParkingSpace((int) (byte) 10);
        int int64 = parkingSpace63.getSpaceId();
        ParkingSystem.Booking booking65 = parkingSpace63.getCurrentBooking();
        java.lang.String str66 = parkingSpace63.scanSpace();
        ParkingSystem.Enabled enabled67 = new ParkingSystem.Enabled();
        parkingSpace63.setState((ParkingSystem.SpaceState) enabled67);
        java.lang.String str69 = disabled48.scanSpace(parkingSpace63);
        java.lang.String str70 = enabled0.scanSpace(parkingSpace63);
        ParkingSystem.ParkingSpace parkingSpace71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = enabled0.scanSpace(parkingSpace71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.ParkingSpace.getCurrentBooking()\" because \"space\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "disabled" + "'", str52, "disabled");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(parkingSpace63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(booking65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "empty" + "'", str66, "empty");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "disabled" + "'", str69, "disabled");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "empty" + "'", str70, "empty");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean5 = parkingSpaceFacade0.checkIn("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.ParkingLotIterator parkingLotIterator5 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace7 = parkingLot1.getParkingSpace(32);
        boolean boolean8 = parkingSpace7.isAvailable();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertNotNull(parkingLotIterator5);
        org.junit.Assert.assertNotNull(parkingSpace7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        boolean boolean5 = parkingSpaceFacade0.checkOut("disabled");
        ParkingSystem.SpaceManager spaceManager6 = parkingSpaceFacade0.getSpaceManager();
        ParkingSystem.BookingManager bookingManager7 = parkingSpaceFacade0.getBookingManager();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(spaceManager6);
        org.junit.Assert.assertNotNull(bookingManager7);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry21 = parkingSpaceProxy20.getRegistry();
        java.lang.String str24 = parkingSpaceProxy20.scanSpace("empty", "hi!");
        accountRegistry15.assignProxyToClient("", parkingSpaceProxy20);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry15.assignProxyToClient("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", parkingSpaceProxy27);
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disabled" + "'", str24, "disabled");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        boolean boolean11 = spaceManager8.isSpaceAvailable("83a51dc6-0c8f-4f21-ae40-68699828f95d", 0);
        spaceManager8.toggleLot("89de8237-29df-4908-9de4-6dc1ce90de94", false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.BookingManager bookingManager1 = parkingSpaceFacade0.getBookingManager();
        ParkingSystem.Booking booking3 = parkingSpaceFacade0.getBookingDetails("");
        boolean boolean5 = parkingSpaceFacade0.cancelBooking("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        java.lang.String str8 = parkingSpaceFacade0.scanSpace("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "");
        ParkingSystem.Booking booking10 = parkingSpaceFacade0.getBookingDetails("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(bookingManager1);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertNull(booking10);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.paymentMessage = "staff";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (short) 0);
        boolean boolean6 = paymentManager0.refundTotalCost((double) 100.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        java.lang.String str14 = debitOrCredit6.getPaymentMessage();
        java.lang.String str15 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Card number should be 16 digits" + "'", str14, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Card number should be 16 digits" + "'", str15, "Card number should be 16 digits");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.AccountRegistry accountRegistry6 = bookingManager0.getAccountRegistry();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry6);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        ParkingSystem.Booking booking15 = client0.getBookingDetails();
        boolean boolean17 = client0.extendBooking(0);
        java.lang.String str18 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
// flaky "18) test1152(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.lang.String str7 = superManager4.getManagerId();
        ParkingSystem.Client client8 = ParkingSystem.Client.getInstance();
        java.lang.String str9 = client8.getName();
        client8.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy12.getRegistry();
        boolean boolean15 = parkingSpaceProxy12.checkIn("");
        client8.assignProxy(parkingSpaceProxy12);
        boolean boolean17 = client8.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        client8.assignProxy(parkingSpaceProxy18);
        superManager4.assignProxy(parkingSpaceProxy18);
        boolean boolean30 = parkingSpaceProxy18.confirmBooking("Paid $ 100.0 with Mobile Pay", "", "Paid $ -1.0 with Mobile Pay", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 0, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 32, "ST001", "Refunded total cost of $1.0");
        parkingSpaceProxy18.toggleLot("25527a32-01ef-45ba-816a-1d0a2fc2a52d", false);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade34 = parkingSpaceProxy18.getFacade();
        boolean boolean40 = parkingSpaceProxy18.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "89de8237-29df-4908-9de4-6dc1ce90de94", "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager4);
// flaky "19) test1153(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str5, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry6);
// flaky "11) test1153(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str7, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean35 = parkingSpaceProxy14.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry12.assignProxyToManager("empty", parkingSpaceProxy14);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy38 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade39 = parkingSpaceProxy38.getFacade();
        accountRegistry12.assignProxyToManager("", parkingSpaceProxy38);
        parkingSpaceProxy38.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean44 = parkingSpaceProxy38.cancelBooking("Paid $ 0.0 with Mobile Pay");
        boolean boolean46 = parkingSpaceProxy38.checkOut("ST001");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap6 = bookingManager0.getActiveBookings();
        boolean boolean16 = bookingManager0.confirmBooking("jane", "8ca2ec61-774c-409d-89d5-5b9171b40497", "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "83a51dc6-0c8f-4f21-ae40-68699828f95d", 1, "ST001", (int) (byte) 0, "H33Itw4InT", "");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager18);
        ParkingSystem.SpaceManager spaceManager22 = bookingManager18.getSpaceManager();
        spaceManager22.addParkingLot("83a51dc6-0c8f-4f21-ae40-68699828f95d");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(spaceManager22);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        java.lang.String str5 = parkingSpaceFacade0.scanSpace("Paid $ 10.0 with Mobile Pay", "hi!");
        boolean boolean8 = parkingSpaceFacade0.extendBooking("e8686ac8-1df7-4a9b-b299-8fbcdd585528", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        java.lang.String str12 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
// flaky "20) test1158(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "12) test1158(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky "7) test1158(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled14);
        ParkingSystem.Enabled enabled16 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled16);
        ParkingSystem.Enabled enabled18 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot20 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking22 = null;
        boolean boolean23 = parkingLot20.assignBooking(0, booking22);
        boolean boolean25 = parkingLot20.isSpaceAvailable((int) '#');
        boolean boolean27 = parkingLot20.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace29 = parkingLot20.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking30 = parkingSpace29.getCurrentBooking();
        parkingSpace29.removeBooking();
        java.lang.String str32 = enabled18.scanSpace(parkingSpace29);
        ParkingSystem.ParkingLot parkingLot34 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking36 = null;
        boolean boolean37 = parkingLot34.assignBooking(0, booking36);
        boolean boolean39 = parkingLot34.isSpaceAvailable((int) '#');
        boolean boolean41 = parkingLot34.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace43 = parkingLot34.getParkingSpace((int) (byte) 10);
        int int44 = parkingSpace43.getSpaceId();
        ParkingSystem.Booking booking45 = parkingSpace43.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager46 = new ParkingSystem.SpaceManager();
        boolean boolean49 = spaceManager46.isSpaceAvailable("hi!", (int) '#');
        spaceManager46.toggleLot("disabled", false);
        ParkingSystem.Booking booking62 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean63 = spaceManager46.assignBooking("empty", (int) (short) 0, booking62);
        boolean boolean64 = parkingSpace43.assignBooking(booking62);
        java.lang.String str65 = enabled18.scanSpace(parkingSpace43);
        boolean boolean66 = parkingSpace43.isAvailable();
        int int67 = parkingSpace43.getSpaceId();
        java.lang.String str68 = enabled16.scanSpace(parkingSpace43);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingSpace29);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "empty" + "'", str32, "empty");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(parkingSpace43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNull(booking45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "disabled" + "'", str65, "disabled");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "disabled" + "'", str68, "disabled");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        parkingSpaceProxy18.validateClient("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        parkingSpaceProxy18.autoGenerateManager();
        org.junit.Assert.assertNotNull(superManager4);
// flaky "21) test1160(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str5, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot1.assignBooking((int) (short) 1, booking4);
        parkingLot1.removeBooking((int) (short) 0);
        parkingLot1.setEnabled(true);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        boolean boolean18 = booking16.isCheckedIn();
        java.lang.String str19 = booking16.getClientId();
        java.lang.String str20 = booking16.getStartTime();
        java.lang.String str21 = booking16.getLotId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "staff" + "'", str19, "staff");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Jane" + "'", str20, "Jane");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jane" + "'", str21, "jane");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.User user21 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("");
        user21.assignProxy(parkingSpaceProxy22);
        user0.user = parkingSpaceProxy22;
        ParkingSystem.User user36 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj40 = parkingSpaceProxy37.login("empty", "Jane");
        parkingSpaceProxy37.validateClient("Jane");
        parkingSpaceProxy37.toggleSpace("", "staff", false);
        boolean boolean48 = parkingSpaceProxy37.cancelBooking("");
        user36.assignProxy(parkingSpaceProxy37);
        parkingSpaceProxy37.displayPendingValidations();
        user0.parkingProxy = parkingSpaceProxy37;
        parkingSpaceProxy37.addParkingLot("CLT-631eb509-a6c4-407c-b16d-582a6faabddb");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.ParkingLot parkingLot14 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking16 = null;
        boolean boolean17 = parkingLot14.assignBooking(0, booking16);
        boolean boolean19 = parkingLot14.isSpaceAvailable((int) '#');
        boolean boolean21 = parkingLot14.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace23 = parkingLot14.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking24 = parkingSpace23.getCurrentBooking();
        ParkingSystem.Booking booking25 = parkingSpace23.getCurrentBooking();
        ParkingSystem.Disabled disabled26 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace27 = null;
        java.lang.String str28 = disabled26.scanSpace(parkingSpace27);
        ParkingSystem.ParkingSpace parkingSpace29 = null;
        java.lang.String str30 = disabled26.scanSpace(parkingSpace29);
        parkingSpace23.setState((ParkingSystem.SpaceState) disabled26);
        ParkingSystem.ParkingLot parkingLot33 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking35 = null;
        boolean boolean36 = parkingLot33.assignBooking(0, booking35);
        boolean boolean38 = parkingLot33.isSpaceAvailable((int) '#');
        boolean boolean40 = parkingLot33.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace42 = parkingLot33.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking43 = parkingSpace42.getCurrentBooking();
        parkingSpace42.removeBooking();
        parkingSpace42.removeBooking();
        java.lang.String str46 = disabled26.scanSpace(parkingSpace42);
        ParkingSystem.SpaceState spaceState47 = parkingSpace42.getState();
        parkingSpace10.setState(spaceState47);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(parkingSpace23);
        org.junit.Assert.assertNull(booking24);
        org.junit.Assert.assertNull(booking25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disabled" + "'", str28, "disabled");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "disabled" + "'", str30, "disabled");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(parkingSpace42);
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "disabled" + "'", str46, "disabled");
        org.junit.Assert.assertNotNull(spaceState47);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        boolean boolean14 = paymentManager0.processPayment("9701df9a-2178-4ad5-8076-46ff5f05b3e8", (double) 10.0f, "", "Card number should be 16 digits");
        paymentManager0.paymentMessage = "Card number should be 16 digits";
        java.lang.String str17 = paymentManager0.refundMessage;
        boolean boolean19 = paymentManager0.refundTotalCost((double) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str17, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean7 = parkingSpaceProxy0.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean11 = parkingSpaceProxy0.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean14 = parkingSpaceProxy0.extendBooking("", 0);
        boolean boolean16 = parkingSpaceProxy0.cancelBooking("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        spaceManager0.addParkingLot("Refunded total cost of $1.0");
        java.lang.String str16 = spaceManager0.scanSpace("Refunded total cost of $100.0", "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("Paid $ 1470.0 with Mobile Pay", "", (-1), "9fJ5pCUl", (int) (byte) -1, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", (double) 10);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        spaceManager0.addParkingLot("Refunded total cost of $1.0");
        spaceManager0.toggleLot("9701df9a-2178-4ad5-8076-46ff5f05b3e8", false);
        boolean boolean19 = spaceManager0.isSpaceAvailable("Paid $ 10.0 with Mobile Pay", (int) (short) 100);
        spaceManager0.removeBooking("tbHxuilT", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        parkingSpaceProxy18.validateClient("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        ParkingSystem.Booking booking33 = parkingSpaceProxy18.getBookingDetails("Refunded total cost of $100.0");
        parkingSpaceProxy18.addParkingLot("Card number should be 16 digits");
        org.junit.Assert.assertNotNull(superManager4);
// flaky "22) test1170(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str5, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(booking33);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean19 = bookingManager0.cancelBooking("Refunded total cost of $1.0");
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        checkInManager20.refundMessage = "Refunded total cost of $1.0";
        java.lang.String str23 = checkInManager20.refundMessage;
        checkInManager20.refundMessage = "TXCrKOGD";
        boolean boolean27 = checkInManager20.checkOut("Refunded deposit of $0.0");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Refunded total cost of $1.0" + "'", str23, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("Refunded without deposit ($0.0)");
        ParkingSystem.SpaceManager spaceManager6 = bookingManager0.getSpaceManager();
        spaceManager6.loadParkingLots();
        java.lang.String str10 = spaceManager6.scanSpace("9fJ5pCUl", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertNotNull(spaceManager6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        ParkingSystem.BookingManager bookingManager3 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager4 = new ParkingSystem.CheckInManager(bookingManager3);
        ParkingSystem.Booking booking6 = bookingManager3.getBooking("");
        ParkingSystem.SpaceManager spaceManager7 = bookingManager3.getSpaceManager();
        double double9 = bookingManager3.getDeposit("Jane");
        ParkingSystem.AccountRegistry accountRegistry10 = bookingManager3.getAccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $-1.0", "hi!", "Refunded without deposit ($-42.0)", accountRegistry10);
        java.lang.String str12 = superManager11.getPassword();
        ParkingSystem.AccountRegistry accountRegistry19 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager20 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry19);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap21 = accountRegistry19.getManagers();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry19);
        java.util.List<ParkingSystem.Client> clientList23 = accountRegistry19.displayPendingValidations();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getClientType();
        java.lang.String str27 = client25.getPassword();
        ParkingSystem.Client client28 = ParkingSystem.Client.getInstance();
        java.lang.String str29 = client28.getName();
        client28.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str38 = client28.getUsername();
        java.lang.String str39 = client28.getPassword();
        java.lang.String str40 = client28.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy41 = null;
        client28.assignProxy(parkingSpaceProxy41);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy43 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj46 = parkingSpaceProxy43.login("empty", "Jane");
        client28.assignProxy(parkingSpaceProxy43);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj51 = parkingSpaceProxy48.login("empty", "Jane");
        parkingSpaceProxy48.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy48.displayPendingValidations();
        client28.assignProxy(parkingSpaceProxy48);
        client25.assignProxy(parkingSpaceProxy48);
        boolean boolean68 = parkingSpaceProxy48.confirmBooking("Refunded without deposit ($-42.0)", "4a1f2343-8b2e-4dea-ba69-efd105414390", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", (int) (short) 100, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) (byte) 100, "4a1f2343-8b2e-4dea-ba69-efd105414390", "Refunded total cost of $1.0");
        accountRegistry19.assignProxyToManager("ST001", parkingSpaceProxy48);
        superManager11.registry = accountRegistry19;
        org.junit.Assert.assertNull(booking6);
        org.junit.Assert.assertNotNull(spaceManager7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 15.0d + "'", double9 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertNotNull(superManager11);
// flaky "23) test1173(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 1.0 with Mobile Pay" + "'", str12, "Paid $ 1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertNotNull(clientList23);
        org.junit.Assert.assertNotNull(client25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "empty" + "'", str26, "empty");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str27, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "empty" + "'", str29, "empty");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "disabled" + "'", str39, "disabled");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getLotId();
        double double9 = booking7.getTotalCost();
        int int10 = booking7.getDuration();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime11 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        parkingSpaceFacade9.toggleLot("ST001", false);
        ParkingSystem.CheckInManager checkInManager13 = parkingSpaceFacade9.getCheckInManager();
        org.junit.Assert.assertNotNull(client0);
// flaky "24) test1175(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str1, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertNotNull(checkInManager13);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        checkInManager1.refundMessage = "staff";
        boolean boolean7 = checkInManager1.checkIn("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        boolean boolean9 = checkInManager1.checkOut("Card number should be 16 digits");
        checkInManager1.refundMessage = "CLT-30fd593b-dedd-41b3-a919-c48700301f41";
        boolean boolean13 = checkInManager1.checkIn("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        boolean boolean5 = bookingManager0.extendBooking("jane", (int) (short) -1, "", "Paid $ 10.0 with Mobile Pay");
        double double7 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.CheckInManager checkInManager8 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean10 = checkInManager8.checkIn("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean12 = checkInManager8.checkIn("25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 15.0d + "'", double7 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry6.displayPendingValidations();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        boolean boolean21 = accountRegistry18.requiresValidation("disabled");
        int int22 = accountRegistry18.getManagersSize();
        ParkingSystem.SuperManager superManager23 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry18);
        ParkingSystem.AccountRegistry accountRegistry24 = superManager23.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry27 = parkingSpaceProxy26.getRegistry();
        boolean boolean33 = parkingSpaceProxy26.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean37 = parkingSpaceProxy26.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean47 = parkingSpaceProxy26.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry24.assignProxyToManager("empty", parkingSpaceProxy26);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy50 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade51 = parkingSpaceProxy50.getFacade();
        accountRegistry24.assignProxyToManager("", parkingSpaceProxy50);
        parkingSpaceProxy50.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean56 = parkingSpaceProxy50.cancelBooking("Paid $ -1.0 with Mobile Pay");
        accountRegistry6.assignProxyToManager("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", parkingSpaceProxy50);
        java.lang.Object obj60 = parkingSpaceProxy50.login("Refunded without deposit ($-42.0)", "jane");
        boolean boolean62 = parkingSpaceProxy50.checkIn("CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(superManager23);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(accountRegistry27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking2 = parkingSpaceProxy0.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = parkingSpaceProxy0.getFacade();
        boolean boolean5 = parkingSpaceProxy0.checkOut("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy0.autoGenerateManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade7 = parkingSpaceProxy0.getFacade();
        org.junit.Assert.assertNull(booking2);
        org.junit.Assert.assertNotNull(parkingSpaceFacade3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade7);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        ParkingSystem.Booking booking15 = client0.getBookingDetails();
        java.lang.String str16 = client0.getExtraId();
        boolean boolean18 = client0.extendBooking((int) ' ');
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap31 = accountRegistry24.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry37 = parkingSpaceProxy36.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy39 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj42 = parkingSpaceProxy39.login("empty", "Jane");
        parkingSpaceProxy39.validateClient("Jane");
        parkingSpaceProxy39.toggleSpace("", "staff", false);
        accountRegistry37.assignProxyToManager("pass", parkingSpaceProxy39);
        ParkingSystem.Client client51 = accountRegistry37.getClient("");
        ParkingSystem.SuperManager superManager52 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry37);
        boolean boolean58 = accountRegistry37.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy60 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry61 = parkingSpaceProxy60.getRegistry();
        boolean boolean63 = parkingSpaceProxy60.checkIn("");
        parkingSpaceProxy60.toggleLot("", true);
        accountRegistry37.assignProxyToManager("", parkingSpaceProxy60);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade68 = parkingSpaceProxy60.getFacade();
        accountRegistry24.assignProxyToClient("Paid $ 1470.0 with Mobile Pay", parkingSpaceProxy60);
        org.junit.Assert.assertNotNull(superManager4);
// flaky "25) test1181(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str5, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
// flaky "13) test1181(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str20, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(accountRegistry37);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(client51);
        org.junit.Assert.assertNotNull(superManager52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(accountRegistry61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade68);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager9 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry10 = superManager4.getRegistry();
        int int11 = accountRegistry10.getManagersSize();
        org.junit.Assert.assertNotNull(superManager4);
// flaky "26) test1182(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str5, "Paid $ 1470.0 with Mobile Pay");
// flaky "14) test1182(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str6, "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNotNull(manager9);
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        boolean boolean2 = client0.getIsValidated();
        client0.setValidated(false);
        boolean boolean5 = client0.cancelBooking();
        java.lang.String str6 = client0.getClientId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str1, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky "27) test1183(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc" + "'", str6, "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking11 = parkingSpace10.getCurrentBooking();
        java.lang.String str12 = parkingSpace10.scanSpace();
        int int13 = parkingSpace10.getSpaceId();
        boolean boolean14 = parkingSpace10.isAvailable();
        ParkingSystem.SpaceState spaceState15 = parkingSpace10.getState();
        int int16 = parkingSpace10.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(spaceState15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.ParkingLot parkingLot4 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot4.assignBooking(0, booking6);
        boolean boolean9 = parkingLot4.isSpaceAvailable((int) '#');
        boolean boolean11 = parkingLot4.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace13 = parkingLot4.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking14 = parkingSpace13.getCurrentBooking();
        parkingSpace13.removeBooking();
        java.lang.String str16 = parkingSpace13.scanSpace();
        int int17 = parkingSpace13.getSpaceId();
        java.lang.String str18 = disabled0.scanSpace(parkingSpace13);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parkingSpace13);
        org.junit.Assert.assertNull(booking14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "empty" + "'", str16, "empty");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean18 = bookingManager0.cancelBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        ParkingSystem.AccountRegistry accountRegistry19 = bookingManager0.getAccountRegistry();
        ParkingSystem.AccountRegistry accountRegistry20 = bookingManager0.getAccountRegistry();
        ParkingSystem.DebitOrCredit debitOrCredit21 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit21);
        ParkingSystem.BookingManager bookingManager23 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager24 = new ParkingSystem.CheckInManager(bookingManager23);
        ParkingSystem.SpaceManager spaceManager25 = bookingManager23.getSpaceManager();
        double double28 = bookingManager23.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit29 = new ParkingSystem.DebitOrCredit();
        bookingManager23.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit29);
        boolean boolean35 = debitOrCredit29.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str36 = debitOrCredit29.getPaymentMessage();
        boolean boolean41 = debitOrCredit29.processPayment("9701df9a-2178-4ad5-8076-46ff5f05b3e8", 0.0d, "disabled", "");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit29);
        boolean boolean47 = debitOrCredit29.processPayment("Paid $ 0.0 with Mobile Pay", (double) 1, "CLT-55105d92-54d6-44d2-965a-736022b7f7cd", "TXCrKOGD");
        java.lang.String str48 = debitOrCredit29.getPaymentMessage();
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNotNull(spaceManager25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 165.0d + "'", double28 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Card number should be 16 digits" + "'", str36, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Card number should be 16 digits" + "'", str48, "Card number should be 16 digits");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.Manager manager15 = accountRegistry8.autoGenerateManager();
// flaky "28) test1187(RegressionTest2)":         manager15.validateClient("Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNotNull(manager15);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        java.lang.String str21 = superManager19.getManagerId();
        java.lang.String str22 = superManager19.getPassword();
        superManager19.validateClient("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
// flaky "29) test1188(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Paid $ 1470.0 with Mobile Pay" + "'", str21, "Paid $ 1470.0 with Mobile Pay");
// flaky "15) test1188(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Paid $ 1.0 with Mobile Pay" + "'", str22, "Paid $ 1.0 with Mobile Pay");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        superManager4.setManagerInfo("Paid $ 0.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", "Refunded total cost of $1.0");
        java.lang.String str9 = superManager4.getManagerId();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        spaceManager0.toggleLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41", false);
        spaceManager0.addParkingLot("0b35479f-5869-423e-9abc-e4ab9cef903d");
        java.lang.String str14 = spaceManager0.scanSpace("CLT-55105d92-54d6-44d2-965a-736022b7f7cd", "Refunded total cost of $100.0");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        accountRegistry20.assignProxyToManager("jane", parkingSpaceProxy22);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj28 = parkingSpaceProxy25.login("empty", "Jane");
        boolean boolean31 = parkingSpaceProxy25.extendBooking("pass", 0);
        boolean boolean33 = parkingSpaceProxy25.checkOut("Paid $ 10.0 with Mobile Pay");
        accountRegistry20.assignProxyToClient("hi!", parkingSpaceProxy25);
        parkingSpaceProxy25.validateClient("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        parkingSpaceProxy25.toggleSpace("hi!", "Refunded total cost of $-1.0", false);
        parkingSpaceProxy25.toggleSpace("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786", "CLT-390234b0-d56e-4275-bd7b-122280609c69", false);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        ParkingSystem.ParkingLotIterator parkingLotIterator8 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator8.next();
        boolean boolean10 = parkingSpace9.isAvailable();
        ParkingSystem.Enabled enabled11 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking15 = null;
        boolean boolean16 = parkingLot13.assignBooking(0, booking15);
        boolean boolean18 = parkingLot13.isSpaceAvailable((int) '#');
        boolean boolean20 = parkingLot13.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace22 = parkingLot13.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking23 = parkingSpace22.getCurrentBooking();
        parkingSpace22.removeBooking();
        java.lang.String str25 = enabled11.scanSpace(parkingSpace22);
        ParkingSystem.ParkingLot parkingLot27 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking29 = null;
        boolean boolean30 = parkingLot27.assignBooking(0, booking29);
        boolean boolean32 = parkingLot27.isSpaceAvailable((int) '#');
        boolean boolean34 = parkingLot27.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace36 = parkingLot27.getParkingSpace((int) (byte) 10);
        int int37 = parkingSpace36.getSpaceId();
        ParkingSystem.Booking booking38 = parkingSpace36.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager39 = new ParkingSystem.SpaceManager();
        boolean boolean42 = spaceManager39.isSpaceAvailable("hi!", (int) '#');
        spaceManager39.toggleLot("disabled", false);
        ParkingSystem.Booking booking55 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean56 = spaceManager39.assignBooking("empty", (int) (short) 0, booking55);
        boolean boolean57 = parkingSpace36.assignBooking(booking55);
        java.lang.String str58 = enabled11.scanSpace(parkingSpace36);
        ParkingSystem.ParkingLot parkingLot60 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking62 = null;
        boolean boolean63 = parkingLot60.assignBooking(0, booking62);
        boolean boolean65 = parkingLot60.isSpaceAvailable((int) '#');
        boolean boolean67 = parkingLot60.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace69 = parkingLot60.getParkingSpace((int) (byte) 10);
        int int70 = parkingSpace69.getSpaceId();
        ParkingSystem.Booking booking71 = parkingSpace69.getCurrentBooking();
        java.lang.String str72 = parkingSpace69.scanSpace();
        int int73 = parkingSpace69.getSpaceId();
        ParkingSystem.Booking booking74 = parkingSpace69.getCurrentBooking();
        java.lang.String str75 = enabled11.scanSpace(parkingSpace69);
        ParkingSystem.ParkingLot parkingLot77 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking79 = null;
        boolean boolean80 = parkingLot77.assignBooking(0, booking79);
        boolean boolean82 = parkingLot77.isSpaceAvailable((int) '#');
        boolean boolean84 = parkingLot77.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace86 = parkingLot77.getParkingSpace((int) (byte) 10);
        ParkingSystem.Enabled enabled87 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot89 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator90 = parkingLot89.getIterator();
        ParkingSystem.ParkingSpace parkingSpace92 = parkingLot89.getParkingSpace((int) (byte) -1);
        java.lang.String str93 = enabled87.scanSpace(parkingSpace92);
        parkingSpace86.setState((ParkingSystem.SpaceState) enabled87);
        parkingSpace69.setState((ParkingSystem.SpaceState) enabled87);
        parkingSpace9.setState((ParkingSystem.SpaceState) enabled87);
        boolean boolean97 = parkingSpace9.isAvailable();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator8);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parkingSpace22);
        org.junit.Assert.assertNull(booking23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "empty" + "'", str25, "empty");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(parkingSpace36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNull(booking38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "disabled" + "'", str58, "disabled");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(parkingSpace69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(booking71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "empty" + "'", str72, "empty");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNull(booking74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "empty" + "'", str75, "empty");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(parkingSpace86);
        org.junit.Assert.assertNotNull(parkingLotIterator90);
        org.junit.Assert.assertNotNull(parkingSpace92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "empty" + "'", str93, "empty");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("hi!", "disabled");
        spaceManager0.addParkingLot("Card number should be 16 digits");
        ParkingSystem.ParkingLot parkingLot12 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking14 = null;
        boolean boolean15 = parkingLot12.assignBooking(0, booking14);
        boolean boolean17 = parkingLot12.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean27 = parkingLot12.assignBooking((int) (short) -1, booking26);
        java.lang.String str28 = booking26.getLotId();
        int int29 = booking26.getDuration();
        int int30 = booking26.getSpaceId();
        boolean boolean31 = spaceManager0.assignBooking("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", (int) (byte) 1, booking26);
        int int32 = booking26.getDuration();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "jane" + "'", str28, "jane");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry6.displayPendingValidations();
        ParkingSystem.Client client12 = ParkingSystem.Client.getInstance();
        java.lang.String str13 = client12.getClientType();
        java.lang.String str14 = client12.getPassword();
        ParkingSystem.Client client15 = ParkingSystem.Client.getInstance();
        java.lang.String str16 = client15.getName();
        client15.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str25 = client15.getUsername();
        java.lang.String str26 = client15.getPassword();
        java.lang.String str27 = client15.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy28 = null;
        client15.assignProxy(parkingSpaceProxy28);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        client15.assignProxy(parkingSpaceProxy30);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj38 = parkingSpaceProxy35.login("empty", "Jane");
        parkingSpaceProxy35.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy35.displayPendingValidations();
        client15.assignProxy(parkingSpaceProxy35);
        client12.assignProxy(parkingSpaceProxy35);
        boolean boolean55 = parkingSpaceProxy35.confirmBooking("Refunded without deposit ($-42.0)", "4a1f2343-8b2e-4dea-ba69-efd105414390", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", (int) (short) 100, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) (byte) 100, "4a1f2343-8b2e-4dea-ba69-efd105414390", "Refunded total cost of $1.0");
        accountRegistry6.assignProxyToManager("ST001", parkingSpaceProxy35);
        parkingSpaceProxy35.addParkingLot("CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(client12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str13, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str14, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(client15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = spaceManager4.scanSpace("hi!", "Jane");
        ParkingSystem.ParkingLot parkingLot11 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking13 = null;
        boolean boolean14 = parkingLot11.assignBooking(0, booking13);
        boolean boolean16 = parkingLot11.isSpaceAvailable((int) '#');
        boolean boolean18 = parkingLot11.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace20 = parkingLot11.getParkingSpace((int) (byte) 10);
        int int21 = parkingSpace20.getSpaceId();
        ParkingSystem.Booking booking22 = parkingSpace20.getCurrentBooking();
        java.lang.String str23 = parkingSpace20.scanSpace();
        int int24 = parkingSpace20.getSpaceId();
        ParkingSystem.SpaceManager spaceManager25 = new ParkingSystem.SpaceManager();
        boolean boolean28 = spaceManager25.isSpaceAvailable("hi!", (int) '#');
        spaceManager25.toggleLot("disabled", false);
        ParkingSystem.Booking booking41 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean42 = spaceManager25.assignBooking("empty", (int) (short) 0, booking41);
        java.lang.String str43 = booking41.getClientId();
        boolean boolean44 = parkingSpace20.assignBooking(booking41);
        boolean boolean45 = spaceManager4.assignBooking("", (int) (short) 1, booking41);
        java.lang.String str46 = booking41.getLicensePlate();
        int int47 = booking41.getDuration();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parkingSpace20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "empty" + "'", str23, "empty");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "staff" + "'", str43, "staff");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "disabled" + "'", str46, "disabled");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        java.lang.String str21 = superManager19.getManagerId();
        java.lang.String str22 = superManager19.getPassword();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager19.registry;
        ParkingSystem.User user25 = new ParkingSystem.User();
        java.lang.Object obj26 = user25.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = user25.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy28 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry29 = parkingSpaceProxy28.getRegistry();
        java.lang.String str32 = parkingSpaceProxy28.scanSpace("empty", "hi!");
        boolean boolean42 = parkingSpaceProxy28.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy28.autoGenerateManager();
        user25.user = parkingSpaceProxy28;
        accountRegistry23.assignProxyToClient("Refunded without deposit ($-96.0)", parkingSpaceProxy28);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry23.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str21, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Refunded total cost of $1.0" + "'", str22, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(parkingSpaceProxy27);
        org.junit.Assert.assertNotNull(accountRegistry29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "disabled" + "'", str32, "disabled");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean35 = parkingSpaceProxy14.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry12.assignProxyToManager("empty", parkingSpaceProxy14);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy38 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade39 = parkingSpaceProxy38.getFacade();
        accountRegistry12.assignProxyToManager("", parkingSpaceProxy38);
        parkingSpaceProxy38.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean44 = parkingSpaceProxy38.cancelBooking("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry45 = parkingSpaceProxy38.getRegistry();
        boolean boolean47 = accountRegistry45.requiresValidation("9fJ5pCUl");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(accountRegistry45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        boolean boolean14 = client5.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        client5.assignProxy(parkingSpaceProxy15);
        ParkingSystem.AccountRegistry accountRegistry17 = parkingSpaceProxy15.getRegistry();
        boolean boolean19 = parkingSpaceProxy15.checkIn("hi!");
        user3.parkingProxy = parkingSpaceProxy15;
        user3.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = user3.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy28 = user3.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = user3.parkingProxy;
        user0.user = parkingSpaceProxy29;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(accountRegistry17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy27);
        org.junit.Assert.assertNotNull(parkingSpaceProxy28);
        org.junit.Assert.assertNotNull(parkingSpaceProxy29);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        java.lang.Object obj15 = accountRegistry12.login("disabled", "pass");
        ParkingSystem.Manager manager16 = accountRegistry12.autoGenerateManager();
        boolean boolean22 = accountRegistry12.registerClient("", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "433f3d1f-f758-4ae3-972b-7fb179aedfd7", "02659ad3-0b5c-4c48-a915-a466f2b50775", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        boolean boolean15 = accountRegistry12.requiresValidation("disabled");
        int int16 = accountRegistry12.getManagersSize();
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry12);
        ParkingSystem.AccountRegistry accountRegistry18 = superManager17.getRegistry();
        accountRegistry18.validateClient("pass");
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        superManager21.assignProxy(parkingSpaceProxy22);
        ParkingSystem.AccountRegistry accountRegistry24 = superManager21.getRegistry();
        ParkingSystem.Client client26 = accountRegistry24.getClient("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.SuperManager superManager27 = ParkingSystem.SuperManager.createFromCSV("Refunded without deposit ($-96.0)", "pass", "3b453211-7dd1-4452-8741-a206711c1217", accountRegistry24);
        accountRegistry24.validateClient("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNull(client26);
        org.junit.Assert.assertNotNull(superManager27);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getUsername();
        java.lang.String str15 = client0.getPassword();
        ParkingSystem.Booking booking16 = client0.getBookingDetails();
        boolean boolean17 = client0.getIsValidated();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean10 = client0.checkIn();
        ParkingSystem.Booking booking11 = client0.getBookingDetails();
        boolean boolean12 = client0.checkOut();
        ParkingSystem.AccountRegistry accountRegistry16 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry16);
        boolean boolean19 = accountRegistry16.requiresValidation("disabled");
        int int20 = accountRegistry16.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("Jane");
        accountRegistry16.assignProxyToClient("pass", parkingSpaceProxy22);
        boolean boolean40 = parkingSpaceProxy22.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean46 = parkingSpaceProxy22.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean52 = parkingSpaceProxy22.register("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "staff", "Refunded total cost of $1.0", "Paid $ 10.0 with Mobile Pay", "jane");
        boolean boolean54 = parkingSpaceProxy22.cancelBooking("ST001");
        client0.assignProxy(parkingSpaceProxy22);
        boolean boolean61 = parkingSpaceProxy22.register("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "CLT-55105d92-54d6-44d2-965a-736022b7f7cd", "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client0);
// flaky "30) test1202(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-631eb509-a6c4-407c-b16d-582a6faabddb" + "'", str1, "CLT-631eb509-a6c4-407c-b16d-582a6faabddb");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean11 = bookingManager0.editBooking("Jane", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) (short) 1);
        ParkingSystem.SpaceManager spaceManager12 = bookingManager0.getSpaceManager();
        boolean boolean15 = spaceManager12.isSpaceAvailable("9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) '4');
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean25 = parkingLot19.isEnabled();
        boolean boolean27 = parkingLot19.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator28 = parkingLot19.getIterator();
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int38 = booking37.getDuration();
        java.lang.String str39 = booking37.getClientId();
        booking37.setStartTime("hi!");
        boolean boolean42 = booking37.isCheckedIn();
        java.lang.String str43 = booking37.getLotId();
        boolean boolean44 = parkingLot19.assignBooking((int) '#', booking37);
        boolean boolean45 = spaceManager12.assignBooking("CLT-92729d37-9255-42b4-9361-c1978aadacb0", (int) ' ', booking37);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(spaceManager12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "staff" + "'", str39, "staff");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jane" + "'", str43, "jane");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        ParkingSystem.Booking booking30 = new ParkingSystem.Booking("Paid $ 100.0 with Mobile Pay", "disabled", (int) (short) 1, "pass", (int) (byte) 0, "Card number should be 16 digits", (double) (-1));
        boolean boolean31 = spaceManager20.assignBooking("CLT-631eb509-a6c4-407c-b16d-582a6faabddb", 3, booking30);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa" + "'", str6, "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        java.util.List<ParkingSystem.Client> clientList15 = accountRegistry8.displayPendingValidations();
        accountRegistry8.validateClient("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        java.lang.Object obj20 = accountRegistry8.login("86z9Z9e0MN", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNotNull(clientList15);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy54 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry55 = parkingSpaceProxy54.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy57 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj60 = parkingSpaceProxy57.login("empty", "Jane");
        parkingSpaceProxy57.validateClient("Jane");
        parkingSpaceProxy57.toggleSpace("", "staff", false);
        accountRegistry55.assignProxyToManager("pass", parkingSpaceProxy57);
        ParkingSystem.Client client69 = accountRegistry55.getClient("");
        ParkingSystem.SuperManager superManager70 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry55);
        ParkingSystem.AccountRegistry accountRegistry71 = superManager70.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy73 = null;
        accountRegistry71.assignProxyToManager("jane", parkingSpaceProxy73);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy76 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj79 = parkingSpaceProxy76.login("empty", "Jane");
        boolean boolean82 = parkingSpaceProxy76.extendBooking("pass", 0);
        boolean boolean84 = parkingSpaceProxy76.checkOut("Paid $ 10.0 with Mobile Pay");
        accountRegistry71.assignProxyToClient("hi!", parkingSpaceProxy76);
        parkingSpaceProxy76.validateClient("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        user0.assignProxy(parkingSpaceProxy76);
        boolean boolean90 = parkingSpaceProxy76.cancelBooking("Refunded total cost of $0.0");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa" + "'", str6, "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(accountRegistry55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(client69);
        org.junit.Assert.assertNotNull(superManager70);
        org.junit.Assert.assertNotNull(accountRegistry71);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean9 = parkingLot1.isSpaceAvailable((int) (byte) 100);
        boolean boolean10 = parkingLot1.isEnabled();
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLot1.getParkingSpace((-1));
        ParkingSystem.ParkingLotIterator parkingLotIterator13 = parkingLot1.getIterator();
        boolean boolean14 = parkingLot1.isEnabled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
        org.junit.Assert.assertNotNull(parkingLotIterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        boolean boolean11 = parkingLot6.isSpaceAvailable((int) '#');
        boolean boolean13 = parkingLot6.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace15 = parkingLot6.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking16 = parkingSpace15.getCurrentBooking();
        parkingSpace15.removeBooking();
        int int18 = parkingSpace15.getSpaceId();
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        boolean boolean27 = parkingSpace15.assignBooking(booking26);
        boolean boolean28 = parkingSpace4.assignBooking(booking26);
        parkingSpace4.removeBooking();
        ParkingSystem.SpaceState spaceState30 = parkingSpace4.getState();
        ParkingSystem.ParkingLot parkingLot32 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking34 = null;
        boolean boolean35 = parkingLot32.assignBooking(0, booking34);
        boolean boolean37 = parkingLot32.isSpaceAvailable((int) '#');
        boolean boolean39 = parkingLot32.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace41 = parkingLot32.getParkingSpace((int) (byte) 10);
        int int42 = parkingSpace41.getSpaceId();
        ParkingSystem.Booking booking43 = parkingSpace41.getCurrentBooking();
        java.lang.String str44 = parkingSpace41.scanSpace();
        ParkingSystem.Enabled enabled45 = new ParkingSystem.Enabled();
        parkingSpace41.setState((ParkingSystem.SpaceState) enabled45);
        ParkingSystem.ParkingLot parkingLot48 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking50 = null;
        boolean boolean51 = parkingLot48.assignBooking(0, booking50);
        boolean boolean53 = parkingLot48.isSpaceAvailable((int) '#');
        boolean boolean55 = parkingLot48.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace57 = parkingLot48.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking58 = parkingSpace57.getCurrentBooking();
        parkingSpace57.removeBooking();
        int int60 = parkingSpace57.getSpaceId();
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        boolean boolean69 = parkingSpace57.assignBooking(booking68);
        java.lang.String str70 = enabled45.scanSpace(parkingSpace57);
        int int71 = parkingSpace57.getSpaceId();
        java.lang.String str72 = spaceState30.scanSpace(parkingSpace57);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parkingSpace15);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(spaceState30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(parkingSpace41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "empty" + "'", str44, "empty");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(parkingSpace57);
        org.junit.Assert.assertNull(booking58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.lang.String str8 = superManager7.getManagerId();
        java.lang.String str9 = superManager7.getManagerId();
        ParkingSystem.Manager manager10 = superManager7.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry11 = superManager7.registry;
        java.lang.String str12 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager7.registry;
        java.lang.String str14 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry15 = superManager7.getRegistry();
        accountRegistry15.validateClient("CLT-92729d37-9255-42b4-9361-c1978aadacb0");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", accountRegistry15);
        java.lang.Object obj21 = accountRegistry15.login("CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", "h40rNQ7kR1");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str8, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager10);
        org.junit.Assert.assertNotNull(accountRegistry11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str12, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str14, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        boolean boolean17 = parkingLot10.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace19 = parkingLot10.getParkingSpace((int) (byte) 10);
        int int20 = parkingSpace19.getSpaceId();
        ParkingSystem.Booking booking21 = parkingSpace19.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager22 = new ParkingSystem.SpaceManager();
        boolean boolean25 = spaceManager22.isSpaceAvailable("hi!", (int) '#');
        spaceManager22.toggleLot("disabled", false);
        ParkingSystem.Booking booking38 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean39 = spaceManager22.assignBooking("empty", (int) (short) 0, booking38);
        boolean boolean40 = parkingSpace19.assignBooking(booking38);
        ParkingSystem.SpaceManager spaceManager41 = new ParkingSystem.SpaceManager();
        boolean boolean44 = spaceManager41.isSpaceAvailable("hi!", (int) '#');
        spaceManager41.toggleLot("disabled", false);
        ParkingSystem.Booking booking57 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean58 = spaceManager41.assignBooking("empty", (int) (short) 0, booking57);
        boolean boolean59 = booking57.isCheckedIn();
        java.lang.String str60 = booking57.getClientId();
        boolean boolean61 = parkingSpace19.assignBooking(booking57);
        boolean boolean62 = parkingLot1.assignBooking(1, booking57);
        boolean boolean64 = parkingLot1.isSpaceAvailable((int) (short) 100);
        parkingLot1.removeBooking(3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(parkingSpace19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(booking21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "staff" + "'", str60, "staff");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Manager manager11 = accountRegistry8.autoGenerateManager();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry8.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(manager11);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getLotId();
        double double9 = booking7.getTotalCost();
        java.lang.String str10 = booking7.getLicensePlate();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        ParkingSystem.AccountRegistry accountRegistry21 = bookingManager19.getAccountRegistry();
        int int22 = accountRegistry21.getManagersSize();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "31) test1213(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "disabled";
        boolean boolean10 = paymentManager0.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        ParkingSystem.MobilePay mobilePay11 = new ParkingSystem.MobilePay();
        boolean boolean16 = mobilePay11.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str17 = mobilePay11.getPaymentMessage();
        java.lang.String str18 = mobilePay11.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay11);
        boolean boolean21 = paymentManager0.refundTotalCost((double) (byte) 10);
        java.lang.String str22 = paymentManager0.refundMessage;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str17, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str18, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Refunded total cost of $10.0" + "'", str22, "Refunded total cost of $10.0");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.Enabled enabled3 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot5 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking7 = null;
        boolean boolean8 = parkingLot5.assignBooking(0, booking7);
        boolean boolean10 = parkingLot5.isSpaceAvailable((int) '#');
        boolean boolean12 = parkingLot5.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace14 = parkingLot5.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking15 = parkingSpace14.getCurrentBooking();
        parkingSpace14.removeBooking();
        java.lang.String str17 = enabled3.scanSpace(parkingSpace14);
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean26 = parkingLot19.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace28 = parkingLot19.getParkingSpace((int) (byte) 10);
        int int29 = parkingSpace28.getSpaceId();
        ParkingSystem.Booking booking30 = parkingSpace28.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager31 = new ParkingSystem.SpaceManager();
        boolean boolean34 = spaceManager31.isSpaceAvailable("hi!", (int) '#');
        spaceManager31.toggleLot("disabled", false);
        ParkingSystem.Booking booking47 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean48 = spaceManager31.assignBooking("empty", (int) (short) 0, booking47);
        boolean boolean49 = parkingSpace28.assignBooking(booking47);
        java.lang.String str50 = enabled3.scanSpace(parkingSpace28);
        java.lang.String str51 = disabled0.scanSpace(parkingSpace28);
        ParkingSystem.ParkingLot parkingLot53 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking55 = null;
        boolean boolean56 = parkingLot53.assignBooking(0, booking55);
        boolean boolean58 = parkingLot53.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator59 = parkingLot53.getIterator();
        parkingLot53.removeBooking(0);
        ParkingSystem.ParkingSpace parkingSpace63 = parkingLot53.getParkingSpace(0);
        java.lang.String str64 = disabled0.scanSpace(parkingSpace63);
        ParkingSystem.ParkingLot parkingLot66 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking68 = null;
        boolean boolean69 = parkingLot66.assignBooking(0, booking68);
        boolean boolean71 = parkingLot66.isSpaceAvailable((int) '#');
        boolean boolean73 = parkingLot66.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace75 = parkingLot66.getParkingSpace((int) (byte) 10);
        int int76 = parkingSpace75.getSpaceId();
        parkingSpace75.removeBooking();
        java.lang.String str78 = disabled0.scanSpace(parkingSpace75);
        ParkingSystem.Enabled enabled79 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot81 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking83 = null;
        boolean boolean84 = parkingLot81.assignBooking(0, booking83);
        boolean boolean86 = parkingLot81.isSpaceAvailable((int) '#');
        boolean boolean88 = parkingLot81.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace90 = parkingLot81.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking91 = parkingSpace90.getCurrentBooking();
        parkingSpace90.removeBooking();
        java.lang.String str93 = enabled79.scanSpace(parkingSpace90);
        parkingSpace90.removeBooking();
        java.lang.String str95 = disabled0.scanSpace(parkingSpace90);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpace14);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disabled" + "'", str51, "disabled");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator59);
        org.junit.Assert.assertNotNull(parkingSpace63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "disabled" + "'", str64, "disabled");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(parkingSpace75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "disabled" + "'", str78, "disabled");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(parkingSpace90);
        org.junit.Assert.assertNull(booking91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "empty" + "'", str93, "empty");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "disabled" + "'", str95, "disabled");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        boolean boolean11 = paymentManager0.refundDeposit(0.0d);
        java.lang.String str12 = paymentManager0.paymentMessage;
        paymentManager0.refundMessage = "2afd610d-a8cb-413a-bbee-7927f86b526c";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str12, "Paid $ 100.0 with Mobile Pay");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean6 = parkingSpaceFacade0.extendBooking("disabled", 0);
        parkingSpaceFacade0.toggleSpace("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "", false);
        ParkingSystem.CheckInManager checkInManager11 = parkingSpaceFacade0.getCheckInManager();
        java.lang.String str12 = checkInManager11.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(checkInManager11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        ParkingSystem.Booking booking15 = client0.getBookingDetails();
        java.lang.String str16 = client0.getExtraId();
        ParkingSystem.Client client17 = ParkingSystem.Client.getInstance();
        java.lang.String str18 = client17.getName();
        client17.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str27 = client17.getUsername();
        java.lang.String str28 = client17.getPassword();
        java.lang.String str29 = client17.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        client17.assignProxy(parkingSpaceProxy30);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        client17.assignProxy(parkingSpaceProxy32);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking39 = parkingSpaceProxy37.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry40 = parkingSpaceProxy37.getRegistry();
        parkingSpaceProxy37.autoGenerateManager();
        client17.assignProxy(parkingSpaceProxy37);
        client0.assignProxy(parkingSpaceProxy37);
        org.junit.Assert.assertNotNull(client0);
// flaky "32) test1218(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(client17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disabled" + "'", str28, "disabled");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(booking39);
        org.junit.Assert.assertNotNull(accountRegistry40);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking2 = parkingSpaceProxy0.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry3 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.Manager manager4 = accountRegistry3.autoGenerateManager();
        java.lang.String str5 = manager4.getName();
        java.lang.String str6 = manager4.getPassword();
        org.junit.Assert.assertNull(booking2);
        org.junit.Assert.assertNotNull(accountRegistry3);
        org.junit.Assert.assertNotNull(manager4);
// flaky "33) test1219(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I673kmcH" + "'", str5, "I673kmcH");
// flaky "16) test1219(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SRiN5ev00N" + "'", str6, "SRiN5ev00N");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean10 = client0.cancelBooking();
        ParkingSystem.User user11 = new ParkingSystem.User();
        java.lang.Object obj12 = user11.user;
        ParkingSystem.Client client13 = ParkingSystem.Client.getInstance();
        java.lang.String str14 = client13.getName();
        client13.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry18 = parkingSpaceProxy17.getRegistry();
        boolean boolean20 = parkingSpaceProxy17.checkIn("");
        client13.assignProxy(parkingSpaceProxy17);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade22 = parkingSpaceProxy17.getFacade();
        user11.assignProxy(parkingSpaceProxy17);
        java.lang.String str26 = parkingSpaceProxy17.scanSpace("disabled", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        parkingSpaceProxy17.toggleLot("empty", true);
        client0.assignProxy(parkingSpaceProxy17);
        boolean boolean32 = parkingSpaceProxy17.checkIn("");
        boolean boolean34 = parkingSpaceProxy17.cancelBooking("CLT-55105d92-54d6-44d2-965a-736022b7f7cd");
        org.junit.Assert.assertNotNull(client0);
// flaky "34) test1220(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(client13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap7 = accountRegistry6.getManagers();
        ParkingSystem.Client client9 = ParkingSystem.Client.getInstance();
        java.lang.String str10 = client9.getName();
        client9.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str19 = client9.getUsername();
        java.lang.String str20 = client9.getPassword();
        java.lang.String str21 = client9.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        client9.assignProxy(parkingSpaceProxy22);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj27 = parkingSpaceProxy24.login("empty", "Jane");
        client9.assignProxy(parkingSpaceProxy24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking31 = parkingSpaceProxy29.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy29.getRegistry();
        parkingSpaceProxy29.autoGenerateManager();
        client9.assignProxy(parkingSpaceProxy29);
        boolean boolean38 = parkingSpaceProxy29.editBooking("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded total cost of $100.0", (int) (byte) 0);
        accountRegistry6.assignProxyToManager("Paid $ 100.0 with Mobile Pay", parkingSpaceProxy29);
        boolean boolean45 = parkingSpaceProxy29.register("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "pass", "25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(client9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        double double21 = bookingManager0.getDeposit("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        double double23 = bookingManager0.getDeposit("Jane");
        ParkingSystem.SpaceManager spaceManager24 = bookingManager0.getSpaceManager();
        spaceManager24.loadParkingLots();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 15.0d + "'", double23 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager24);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean7 = parkingSpaceFacade0.editBooking("Card number should be 16 digits", "", (int) (short) 0);
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("staff", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        parkingSpaceFacade0.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean14 = parkingSpaceFacade0.cancelBooking("e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        int int13 = parkingSpace10.getSpaceId();
        boolean boolean14 = parkingSpace10.isAvailable();
        int int15 = parkingSpace10.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.User user21 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("");
        user21.assignProxy(parkingSpaceProxy22);
        user0.user = parkingSpaceProxy22;
        java.lang.Object obj38 = user0.login("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "86z9Z9e0MN");
        ParkingSystem.Client client39 = ParkingSystem.Client.getInstance();
        java.lang.String str40 = client39.getName();
        client39.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str49 = client39.getUsername();
        java.lang.String str50 = client39.getPassword();
        java.lang.String str51 = client39.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy52 = null;
        client39.assignProxy(parkingSpaceProxy52);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy54 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj57 = parkingSpaceProxy54.login("empty", "Jane");
        client39.assignProxy(parkingSpaceProxy54);
        boolean boolean61 = parkingSpaceProxy54.extendBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) ' ');
        boolean boolean63 = parkingSpaceProxy54.cancelBooking("pass");
        user0.user = parkingSpaceProxy54;
        boolean boolean66 = parkingSpaceProxy54.checkOut("");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(client39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "06b0adae-5a80-41cd-b7f6-6da51afdd4f5" + "'", str40, "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        booking29.setCheckedIn(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("hi!", (-1.0d), "", "");
        boolean boolean10 = mobilePay0.processPayment("staff", (double) (-1L), "disabled", "pass");
        boolean boolean15 = mobilePay0.processPayment("H33Itw4InT", (-1.0d), "staff", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = parkingSpaceProxy0.getFacade();
        boolean boolean3 = parkingSpaceFacade1.checkOut("ST001");
        ParkingSystem.BookingManager bookingManager4 = parkingSpaceFacade1.getBookingManager();
        org.junit.Assert.assertNotNull(parkingSpaceFacade1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(bookingManager4);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.AccountRegistry accountRegistry17 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry17);
        java.lang.String str19 = superManager18.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry20 = superManager18.registry;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager18);
        ParkingSystem.Manager manager22 = superManager18.autoGenerateManager();
        java.lang.Class<?> wildcardClass23 = superManager18.getClass();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str19, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNotNull(manager22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.paymentMessage = "staff";
        paymentManager0.paymentMessage = "hi!";
        java.lang.String str5 = paymentManager0.refundMessage;
        java.lang.String str6 = paymentManager0.paymentMessage;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean21 = client0.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        boolean boolean22 = client0.getIsValidated();
        boolean boolean23 = client0.cancelBooking();
        org.junit.Assert.assertNotNull(client0);
// flaky "35) test1231(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tbHxuilT" + "'", str1, "tbHxuilT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("hi!", (-1.0d), "", "");
        boolean boolean10 = mobilePay0.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean15 = mobilePay0.processPayment("pass", (double) (short) -1, "Paid $ 100.0 with Mobile Pay", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean20 = mobilePay0.processPayment("K6PkM9rcCx", 100.0d, "Paid $ 15.0 with Mobile Pay", "disabled");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        user0.register("ST001", "TXCrKOGD", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = user0.parkingProxy;
        user0.register("Refunded total cost of $10.0", "", "13b04414-31a5-407f-8ea3-fba4613c73d1", "4a1f2343-8b2e-4dea-ba69-efd105414390", "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertNotNull(parkingSpaceProxy27);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        ParkingSystem.Client client15 = ParkingSystem.Client.getInstance();
        java.lang.String str16 = client15.getName();
        client15.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean25 = client15.cancelBooking();
        ParkingSystem.User user26 = new ParkingSystem.User();
        java.lang.Object obj27 = user26.user;
        ParkingSystem.Client client28 = ParkingSystem.Client.getInstance();
        java.lang.String str29 = client28.getName();
        client28.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry33 = parkingSpaceProxy32.getRegistry();
        boolean boolean35 = parkingSpaceProxy32.checkIn("");
        client28.assignProxy(parkingSpaceProxy32);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade37 = parkingSpaceProxy32.getFacade();
        user26.assignProxy(parkingSpaceProxy32);
        java.lang.String str41 = parkingSpaceProxy32.scanSpace("disabled", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        parkingSpaceProxy32.toggleLot("empty", true);
        client15.assignProxy(parkingSpaceProxy32);
        boolean boolean47 = parkingSpaceProxy32.checkIn("");
        client0.assignProxy(parkingSpaceProxy32);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $10.0" + "'", str1, "Refunded total cost of $10.0");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(client15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(client28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(accountRegistry33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disabled" + "'", str41, "disabled");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        boolean boolean15 = accountRegistry12.requiresValidation("disabled");
        int int16 = accountRegistry12.getManagersSize();
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry12);
        ParkingSystem.AccountRegistry accountRegistry18 = superManager17.getRegistry();
        accountRegistry18.validateClient("pass");
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry18);
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($-42.0)", "CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", accountRegistry18);
        java.lang.String str23 = superManager22.getPassword();
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Refunded total cost of $1.0" + "'", str23, "Refunded total cost of $1.0");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        int int10 = accountRegistry6.getManagersSize();
        java.util.List<ParkingSystem.Client> clientList11 = accountRegistry6.displayPendingValidations();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry6.loadManagersFromCSV();
// flaky "36) test1236(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(clientList11);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        boolean boolean7 = bookingManager0.cancelBooking("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("Jane");
        boolean boolean13 = parkingSpaceProxy0.checkOut("empty");
        boolean boolean23 = parkingSpaceProxy0.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.autoGenerateManager();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        parkingLot1.setEnabled(true);
        ParkingSystem.Booking booking12 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double13 = booking12.getTotalCost();
        java.lang.String str14 = booking12.getLotId();
        int int15 = booking12.getDuration();
        java.lang.String str16 = booking12.getLotId();
        boolean boolean17 = parkingLot1.assignBooking((int) (byte) 10, booking12);
        ParkingSystem.ParkingSpace parkingSpace19 = parkingLot1.getParkingSpace((int) ' ');
        boolean boolean21 = parkingLot1.isSpaceAvailable(1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "jane" + "'", str16, "jane");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(parkingSpace19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        java.lang.String[] strArray9 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray10 = cSVManager0.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        boolean boolean17 = accountRegistry14.requiresValidation("disabled");
        int int18 = accountRegistry14.getManagersSize();
        boolean boolean24 = accountRegistry14.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj29 = parkingSpaceProxy26.login("empty", "Jane");
        parkingSpaceProxy26.validateClient("Jane");
        parkingSpaceProxy26.toggleSpace("", "staff", false);
        boolean boolean37 = parkingSpaceProxy26.cancelBooking("Jane");
        accountRegistry14.assignProxyToClient("pass", parkingSpaceProxy26);
        parkingSpaceProxy26.autoGenerateManager();
        parkingSpaceProxy26.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade44 = parkingSpaceProxy26.getFacade();
        boolean boolean46 = parkingSpaceFacade44.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean48 = parkingSpaceFacade44.cancelBooking("Jane");
        boolean boolean51 = parkingSpaceFacade44.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager52 = parkingSpaceFacade44.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap53 = spaceManager52.getParkingLots();
        cSVManager0.loadParkingLots(strMap53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList55 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArray9);
// flaky "37) test1241(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray10);
// flaky "17) test1241(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray10, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(spaceManager52);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.SpaceManager spaceManager15 = new ParkingSystem.SpaceManager();
        boolean boolean18 = spaceManager15.isSpaceAvailable("hi!", (int) '#');
        spaceManager15.toggleLot("disabled", false);
        ParkingSystem.Booking booking31 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean32 = spaceManager15.assignBooking("empty", (int) (short) 0, booking31);
        java.lang.String str33 = booking31.getClientId();
        boolean boolean34 = parkingSpace10.assignBooking(booking31);
        int int35 = booking31.getDuration();
        boolean boolean36 = booking31.isCheckedIn();
        int int37 = booking31.getDuration();
        boolean boolean38 = booking31.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "staff" + "'", str33, "staff");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        spaceManager8.removeBooking("Jane", 3);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap28 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        boolean boolean41 = parkingSpaceProxy30.cancelBooking("Jane");
        boolean boolean43 = parkingSpaceProxy30.checkOut("empty");
        boolean boolean53 = parkingSpaceProxy30.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry3.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy30);
        ParkingSystem.Booking booking56 = parkingSpaceProxy30.getBookingDetails("K6PkM9rcCx");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(booking56);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        boolean boolean22 = client0.editBooking("jane", 0);
        ParkingSystem.Booking booking23 = client0.getBookingDetails();
        boolean boolean25 = client0.extendBooking((int) ' ');
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "staff" + "'", str10, "staff");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(booking23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        boolean boolean20 = client0.checkOut();
        ParkingSystem.AccountRegistry accountRegistry24 = null;
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("disabled", "staff", "staff", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        java.lang.String str31 = parkingSpaceProxy27.scanSpace("empty", "hi!");
        parkingSpaceProxy27.addParkingLot("empty");
        parkingSpaceProxy27.addParkingLot("");
        superManager25.assignProxy(parkingSpaceProxy27);
        client0.assignProxy(parkingSpaceProxy27);
        ParkingSystem.Booking booking39 = parkingSpaceProxy27.getBookingDetails("CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04");
        boolean boolean45 = parkingSpaceProxy27.register("CLT-849ed8c4-58ed-4643-99dc-d9a0cdbc1188", "CLT-849ed8c4-58ed-4643-99dc-d9a0cdbc1188", "", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Refunded total cost of $1.0" + "'", str10, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "disabled" + "'", str31, "disabled");
        org.junit.Assert.assertNull(booking39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.lang.String str8 = superManager7.getManagerId();
        java.lang.String str9 = superManager7.getManagerId();
        ParkingSystem.Manager manager10 = superManager7.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry11 = superManager7.registry;
        java.lang.String str12 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager7.registry;
        java.lang.String str14 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry15 = superManager7.getRegistry();
        accountRegistry15.validateClient("CLT-92729d37-9255-42b4-9361-c1978aadacb0");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", accountRegistry15);
        ParkingSystem.User user20 = new ParkingSystem.User();
        java.lang.Object obj21 = user20.user;
        ParkingSystem.Client client22 = ParkingSystem.Client.getInstance();
        java.lang.String str23 = client22.getName();
        client22.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry27 = parkingSpaceProxy26.getRegistry();
        boolean boolean29 = parkingSpaceProxy26.checkIn("");
        client22.assignProxy(parkingSpaceProxy26);
        boolean boolean31 = client22.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        client22.assignProxy(parkingSpaceProxy32);
        ParkingSystem.AccountRegistry accountRegistry34 = parkingSpaceProxy32.getRegistry();
        boolean boolean36 = parkingSpaceProxy32.checkIn("hi!");
        user20.parkingProxy = parkingSpaceProxy32;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy38 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry39 = parkingSpaceProxy38.getRegistry();
        boolean boolean45 = parkingSpaceProxy38.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy38.toggleLot("hi!", false);
        parkingSpaceProxy38.validateClient("3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean52 = parkingSpaceProxy38.checkIn("disabled");
        user20.assignProxy(parkingSpaceProxy38);
        accountRegistry15.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy38);
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str8, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager10);
        org.junit.Assert.assertNotNull(accountRegistry11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str12, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str14, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(client22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CLT-849ed8c4-58ed-4643-99dc-d9a0cdbc1188" + "'", str23, "CLT-849ed8c4-58ed-4643-99dc-d9a0cdbc1188");
        org.junit.Assert.assertNotNull(accountRegistry27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(accountRegistry34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(accountRegistry39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        java.lang.String str29 = superManager28.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry33 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry33);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = null;
        accountRegistry33.assignProxyToManager("disabled", parkingSpaceProxy36);
        superManager28.registry = accountRegistry33;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager28);
        ParkingSystem.AccountRegistry accountRegistry43 = null;
        ParkingSystem.SuperManager superManager44 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry43);
        java.lang.String str45 = superManager44.getName();
        ParkingSystem.AccountRegistry accountRegistry46 = superManager44.registry;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager44);
        java.lang.String[] strArray48 = cSVManager0.loadSuperManager();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "38) test1248(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "18) test1248(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "empty" + "'", str4, "empty");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "jane" + "'", str13, "jane");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str29, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager34);
        org.junit.Assert.assertNotNull(superManager44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str45, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry46);
        org.junit.Assert.assertNotNull(strArray48);
// flaky "8) test1248(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray48, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager3 = parkingSpaceFacade1.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap4 = spaceManager3.getParkingLots();
        cSVManager0.loadParkingLots(strMap4);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVManager0.saveParkingLots(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.Map.values()\" because \"parkingLots\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertNotNull(spaceManager3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "39) test1249(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        java.lang.String str19 = debitOrCredit6.getPaymentMessage();
        java.lang.String str20 = debitOrCredit6.getPaymentMessage();
        boolean boolean25 = debitOrCredit6.processPayment("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) ' ', "", "Jane");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Card number should be 16 digits" + "'", str19, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Card number should be 16 digits" + "'", str20, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean13 = bookingManager0.confirmBooking("empty", "Jane", "disabled", "pass", (int) (byte) 0, "hi!", (int) 'a', "hi!", "");
        double double15 = bookingManager0.getHourlyRate("Jane");
        double double18 = bookingManager0.calculateCost("Paid $ 10.0 with Mobile Pay", (int) (byte) 1);
        ParkingSystem.AccountRegistry accountRegistry19 = bookingManager0.getAccountRegistry();
        ParkingSystem.AccountRegistry accountRegistry20 = bookingManager0.getAccountRegistry();
        boolean boolean30 = bookingManager0.confirmBooking("83a51dc6-0c8f-4f21-ae40-68699828f95d", "433f3d1f-f758-4ae3-972b-7fb179aedfd7", "CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "tbHxuilT", (int) (byte) 0, "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", 2, "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc", "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 30.0d + "'", double18 == 30.0d);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        java.lang.Object obj51 = user0.user;
        user0.register("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded without deposit ($-42.0)", "Paid $ -1.0 with Mobile Pay", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", "");
        ParkingSystem.User user58 = new ParkingSystem.User();
        java.lang.Object obj59 = user58.user;
        ParkingSystem.Client client60 = ParkingSystem.Client.getInstance();
        java.lang.String str61 = client60.getName();
        client60.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy64 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry65 = parkingSpaceProxy64.getRegistry();
        boolean boolean67 = parkingSpaceProxy64.checkIn("");
        client60.assignProxy(parkingSpaceProxy64);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade69 = parkingSpaceProxy64.getFacade();
        user58.assignProxy(parkingSpaceProxy64);
        java.lang.String str73 = parkingSpaceProxy64.scanSpace("disabled", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        parkingSpaceProxy64.toggleLot("empty", true);
        boolean boolean78 = parkingSpaceProxy64.checkIn("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean81 = parkingSpaceProxy64.extendBooking("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", (int) (byte) 0);
        user0.parkingProxy = parkingSpaceProxy64;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "40) test1252(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str6, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(client60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str61, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "disabled" + "'", str73, "disabled");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.User user9 = new ParkingSystem.User();
        java.lang.Object obj10 = user9.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = user9.parkingProxy;
        ParkingSystem.User user12 = new ParkingSystem.User();
        java.lang.Object obj13 = user12.user;
        ParkingSystem.Client client14 = ParkingSystem.Client.getInstance();
        java.lang.String str15 = client14.getName();
        client14.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean21 = parkingSpaceProxy18.checkIn("");
        client14.assignProxy(parkingSpaceProxy18);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade23 = parkingSpaceProxy18.getFacade();
        user12.assignProxy(parkingSpaceProxy18);
        user9.parkingProxy = parkingSpaceProxy18;
        ParkingSystem.AccountRegistry accountRegistry29 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager30 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry29);
        boolean boolean32 = accountRegistry29.requiresValidation("disabled");
        int int33 = accountRegistry29.getManagersSize();
        boolean boolean39 = accountRegistry29.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy41 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj44 = parkingSpaceProxy41.login("empty", "Jane");
        parkingSpaceProxy41.validateClient("Jane");
        parkingSpaceProxy41.toggleSpace("", "staff", false);
        boolean boolean52 = parkingSpaceProxy41.cancelBooking("Jane");
        accountRegistry29.assignProxyToClient("pass", parkingSpaceProxy41);
        parkingSpaceProxy41.autoGenerateManager();
        parkingSpaceProxy41.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user9.assignProxy(parkingSpaceProxy41);
        ParkingSystem.AccountRegistry accountRegistry60 = parkingSpaceProxy41.getRegistry();
        manager8.assignProxy(parkingSpaceProxy41);
        boolean boolean64 = parkingSpaceProxy41.extendBooking("86z9Z9e0MN", 100);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(parkingSpaceProxy11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(client14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str15, "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade23);
        org.junit.Assert.assertNotNull(superManager30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(accountRegistry60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        java.lang.String str6 = superManager4.getPassword();
        ParkingSystem.AccountRegistry accountRegistry7 = superManager4.registry;
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        superManager4.displayPendingValidations();
        ParkingSystem.BookingManager bookingManager10 = new ParkingSystem.BookingManager();
        double double13 = bookingManager10.calculateCost("", 0);
        double double15 = bookingManager10.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager16 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager17 = new ParkingSystem.CheckInManager(bookingManager16);
        ParkingSystem.SpaceManager spaceManager18 = bookingManager16.getSpaceManager();
        double double21 = bookingManager16.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit22 = new ParkingSystem.DebitOrCredit();
        bookingManager16.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit22);
        boolean boolean28 = debitOrCredit22.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager10.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit22);
        double double31 = bookingManager10.getDeposit("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        ParkingSystem.AccountRegistry accountRegistry32 = bookingManager10.getAccountRegistry();
        superManager4.registry = accountRegistry32;
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded total cost of $1.0" + "'", str6, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 15.0d + "'", double13 == 15.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 165.0d + "'", double21 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 15.0d + "'", double31 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry32);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("pass");
        ParkingSystem.SpaceManager spaceManager3 = new ParkingSystem.SpaceManager();
        spaceManager3.toggleLot("Jane", false);
        spaceManager3.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        boolean boolean15 = spaceManager12.isSpaceAvailable("hi!", (int) '#');
        spaceManager12.toggleLot("disabled", false);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean29 = spaceManager12.assignBooking("empty", (int) (short) 0, booking28);
        boolean boolean30 = spaceManager3.assignBooking("hi!", 0, booking28);
        double double31 = booking28.getTotalCost();
        booking28.setDuration((-1));
        java.lang.String str34 = booking28.getLotId();
        boolean boolean35 = parkingLot1.assignBooking(1, booking28);
        ParkingSystem.ParkingLotIterator parkingLotIterator36 = parkingLot1.getIterator();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator36.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "jane" + "'", str34, "jane");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator36);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        boolean boolean24 = bookingManager0.confirmBooking("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "Paid $ 1470.0 with Mobile Pay", "", "disabled", 100, "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", (int) (byte) 10, "", "CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap1 = null;
        cSVManager0.loadParkingLots(strMap1);
        java.lang.String[] strArray3 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client4 = ParkingSystem.Client.getInstance();
        java.lang.String str5 = client4.getClientType();
        java.lang.String str6 = client4.getUsername();
        cSVManager0.saveClient(client4);
        boolean boolean10 = client4.editBooking("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", 100);
        org.junit.Assert.assertNotNull(strArray3);
// flaky "41) test1257(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray3, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str5, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        boolean boolean7 = paymentManager0.refundDeposit((double) ' ');
        java.lang.String str8 = paymentManager0.paymentMessage;
        paymentManager0.refundMessage = "Refunded total cost of $-1.0";
        paymentManager0.paymentMessage = "Refunded total cost of $10.0";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap28 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        boolean boolean41 = parkingSpaceProxy30.cancelBooking("Jane");
        boolean boolean43 = parkingSpaceProxy30.checkOut("empty");
        boolean boolean53 = parkingSpaceProxy30.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry3.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy30);
        boolean boolean60 = parkingSpaceProxy30.register("", "3b453211-7dd1-4452-8741-a206711c1217", "83a51dc6-0c8f-4f21-ae40-68699828f95d", "9fJ5pCUl", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap5 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        java.lang.String str11 = parkingSpaceProxy7.scanSpace("empty", "hi!");
        boolean boolean21 = parkingSpaceProxy7.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy7.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean31 = parkingSpaceProxy7.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry3.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy7);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap33 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking37 = parkingSpaceProxy35.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry38 = parkingSpaceProxy35.getRegistry();
        java.lang.String str41 = parkingSpaceProxy35.scanSpace("staff", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        ParkingSystem.Booking booking43 = parkingSpaceProxy35.getBookingDetails("ST001");
        accountRegistry3.assignProxyToClient("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", parkingSpaceProxy35);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade45 = parkingSpaceProxy35.getFacade();
        java.lang.String str48 = parkingSpaceFacade45.scanSpace("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "83a51dc6-0c8f-4f21-ae40-68699828f95d");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(booking37);
        org.junit.Assert.assertNotNull(accountRegistry38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "disabled" + "'", str41, "disabled");
        org.junit.Assert.assertNull(booking43);
        org.junit.Assert.assertNotNull(parkingSpaceFacade45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disabled" + "'", str48, "disabled");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        parkingLot1.setEnabled(false);
        parkingLot1.setEnabled(false);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        boolean boolean9 = accountRegistry3.requiresValidation("disabled");
        int int10 = accountRegistry3.getManagersSize();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadManagersFromCSV();
// flaky "42) test1262(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        ParkingSystem.AccountRegistry accountRegistry21 = bookingManager19.getAccountRegistry();
        boolean boolean27 = accountRegistry21.registerClient("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ 0.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "ST001");
        accountRegistry21.validateClient("");
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap30 = accountRegistry21.getManagers();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "43) test1263(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean18 = paymentManager0.refundWithoutDeposit((double) 0.0f, (double) (-1));
        ParkingSystem.BookingManager bookingManager19 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager19);
        ParkingSystem.SpaceManager spaceManager21 = bookingManager19.getSpaceManager();
        double double24 = bookingManager19.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit25 = new ParkingSystem.DebitOrCredit();
        bookingManager19.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit25);
        boolean boolean31 = debitOrCredit25.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        java.lang.String str32 = debitOrCredit25.getPaymentMessage();
        java.lang.String str33 = debitOrCredit25.getPaymentMessage();
        boolean boolean38 = debitOrCredit25.processPayment("7aecb00c-028c-4dcf-96cc-14d25bd709ab", (double) 100L, "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "0b35479f-5869-423e-9abc-e4ab9cef903d");
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit25);
        ParkingSystem.PaymentManager paymentManager40 = new ParkingSystem.PaymentManager();
        java.lang.String str41 = paymentManager40.refundMessage;
        boolean boolean44 = paymentManager40.refundWithoutDeposit((double) (short) 10, (double) '4');
        ParkingSystem.BookingManager bookingManager45 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager46 = new ParkingSystem.CheckInManager(bookingManager45);
        ParkingSystem.SpaceManager spaceManager47 = bookingManager45.getSpaceManager();
        double double50 = bookingManager45.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit51 = new ParkingSystem.DebitOrCredit();
        bookingManager45.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit51);
        boolean boolean57 = debitOrCredit51.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        paymentManager40.setStrategy((ParkingSystem.Strategy) debitOrCredit51);
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit51);
        java.lang.String str60 = debitOrCredit51.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(spaceManager21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 165.0d + "'", double24 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Card number should be 16 digits" + "'", str32, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Card number should be 16 digits" + "'", str33, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(spaceManager47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 165.0d + "'", double50 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Card number should be 16 digits" + "'", str60, "Card number should be 16 digits");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        ParkingSystem.Manager manager0 = ParkingSystem.Manager.getInstance();
        manager0.setManagerInfo("hi!", "disabled", "hi!");
        java.lang.String str5 = manager0.getManagerId();
        ParkingSystem.User user6 = new ParkingSystem.User();
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        boolean boolean13 = accountRegistry10.requiresValidation("disabled");
        int int14 = accountRegistry10.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj19 = parkingSpaceProxy16.login("empty", "Jane");
        parkingSpaceProxy16.validateClient("Jane");
        parkingSpaceProxy16.toggleSpace("", "staff", false);
        boolean boolean27 = parkingSpaceProxy16.cancelBooking("Jane");
        accountRegistry10.assignProxyToClient("pass", parkingSpaceProxy16);
        boolean boolean34 = parkingSpaceProxy16.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean40 = parkingSpaceProxy16.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        user6.parkingProxy = parkingSpaceProxy16;
        boolean boolean43 = parkingSpaceProxy16.cancelBooking("13b04414-31a5-407f-8ea3-fba4613c73d1");
        java.lang.Object obj46 = parkingSpaceProxy16.login("qPYDfDnbtD", "Refunded total cost of $-1.0");
        manager0.assignProxy(parkingSpaceProxy16);
        org.junit.Assert.assertNotNull(manager0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        java.lang.String str8 = superManager4.getPassword();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Refunded total cost of $1.0" + "'", str8, "Refunded total cost of $1.0");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.AccountRegistry accountRegistry13 = bookingManager12.getAccountRegistry();
        ParkingSystem.SpaceManager spaceManager14 = bookingManager12.getSpaceManager();
        double double16 = bookingManager12.getDeposit("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(spaceManager14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = parkingSpaceFacade0.scanSpace("jane", "Refunded without deposit ($0.0)");
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay");
        parkingSpaceFacade0.toggleSpace("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "", false);
        boolean boolean24 = parkingSpaceFacade0.confirmBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "disabled", "", "Refunded total cost of $-1.0", (int) (byte) 10, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) ' ', "4a1f2343-8b2e-4dea-ba69-efd105414390", "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean8 = parkingLot1.isEnabled();
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) ' ');
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("");
        ParkingSystem.Booking booking22 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int23 = booking22.getDuration();
        java.lang.String str24 = booking22.getClientId();
        booking22.setCheckedIn(true);
        boolean boolean27 = parkingLot13.assignBooking((int) (short) 100, booking22);
        ParkingSystem.ParkingLot parkingLot30 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking32 = null;
        boolean boolean33 = parkingLot30.assignBooking(0, booking32);
        boolean boolean35 = parkingLot30.isSpaceAvailable((int) '#');
        boolean boolean36 = parkingLot30.isEnabled();
        ParkingSystem.ParkingLot parkingLot39 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking41 = null;
        boolean boolean42 = parkingLot39.assignBooking(0, booking41);
        boolean boolean44 = parkingLot39.isSpaceAvailable((int) '#');
        boolean boolean46 = parkingLot39.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace48 = parkingLot39.getParkingSpace((int) (byte) 10);
        int int49 = parkingSpace48.getSpaceId();
        ParkingSystem.Booking booking50 = parkingSpace48.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager51 = new ParkingSystem.SpaceManager();
        boolean boolean54 = spaceManager51.isSpaceAvailable("hi!", (int) '#');
        spaceManager51.toggleLot("disabled", false);
        ParkingSystem.Booking booking67 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean68 = spaceManager51.assignBooking("empty", (int) (short) 0, booking67);
        boolean boolean69 = parkingSpace48.assignBooking(booking67);
        ParkingSystem.SpaceManager spaceManager70 = new ParkingSystem.SpaceManager();
        boolean boolean73 = spaceManager70.isSpaceAvailable("hi!", (int) '#');
        spaceManager70.toggleLot("disabled", false);
        ParkingSystem.Booking booking86 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean87 = spaceManager70.assignBooking("empty", (int) (short) 0, booking86);
        boolean boolean88 = booking86.isCheckedIn();
        java.lang.String str89 = booking86.getClientId();
        boolean boolean90 = parkingSpace48.assignBooking(booking86);
        boolean boolean91 = parkingLot30.assignBooking(1, booking86);
        int int92 = booking86.getSpaceId();
        boolean boolean93 = parkingLot13.assignBooking((-1), booking86);
        boolean boolean94 = parkingLot1.assignBooking((int) (short) 1, booking86);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "staff" + "'", str24, "staff");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingSpace48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNull(booking50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "staff" + "'", str89, "staff");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean6 = bookingManager0.extendBooking("jane", (int) (byte) 100, "hi!", "jane");
        ParkingSystem.SpaceManager spaceManager7 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap8 = bookingManager0.getActiveBookings();
        ParkingSystem.CheckInManager checkInManager9 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking11 = bookingManager0.getBooking("09622cbf-e665-45db-b1ad-365065947a20");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(spaceManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry7 = superManager4.registry;
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry7.loadManagersFromCSV();
// flaky "44) test1271(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNotNull(accountRegistry7);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        double double22 = bookingManager0.calculateCost("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 30.0d + "'", double22 == 30.0d);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("empty");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        java.lang.String str13 = client0.getName();
        boolean boolean15 = client0.extendBooking((int) (short) 0);
        boolean boolean16 = client0.cancelBooking();
        java.lang.String str17 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean18 = paymentManager0.refundWithoutDeposit((double) 0.0f, (double) (-1));
        paymentManager0.refundMessage = "Paid $ 1.0 with Mobile Pay";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        boolean boolean6 = parkingSpaceProxy0.extendBooking("", 100);
        boolean boolean10 = parkingSpaceProxy0.editBooking("Card number should be 16 digits", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", (-1));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        // The following exception was thrown during execution in test generation
        try {
            ParkingSystem.Booking booking15 = client0.getBookingDetails();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.ParkingSpaceProxy.getBookingDetails(String)\" because \"this.parkingProxy\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        java.lang.Object obj51 = user0.user;
        user0.register("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded without deposit ($-42.0)", "Paid $ -1.0 with Mobile Pay", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", "");
        java.lang.Object obj58 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy59 = user0.parkingProxy;
        user0.register("CLT-b6a8264c-f386-4429-b59c-b7f465002e13", "e578d6f7-8a26-46f0-8e2f-f3b1be5242ca", "83a51dc6-0c8f-4f21-ae40-68699828f95d", "tbHxuilT", "Refunded total cost of $10.0");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(parkingSpaceProxy59);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        ParkingSystem.BookingManager bookingManager8 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager9 = new ParkingSystem.CheckInManager(bookingManager8);
        boolean boolean14 = bookingManager8.extendBooking("jane", (int) (byte) 100, "hi!", "jane");
        ParkingSystem.SpaceManager spaceManager15 = bookingManager8.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap16 = bookingManager8.getActiveBookings();
        ParkingSystem.MobilePay mobilePay17 = new ParkingSystem.MobilePay();
        boolean boolean22 = mobilePay17.processPayment("hi!", (-1.0d), "", "");
        boolean boolean27 = mobilePay17.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean32 = mobilePay17.processPayment("pass", (double) (short) -1, "Paid $ 100.0 with Mobile Pay", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        bookingManager8.setPaymentStrategy((ParkingSystem.Strategy) mobilePay17);
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay17);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(spaceManager15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj12 = parkingSpaceProxy9.login("empty", "Jane");
        parkingSpaceProxy9.validateClient("Jane");
        parkingSpaceProxy9.toggleSpace("", "staff", false);
        boolean boolean20 = parkingSpaceProxy9.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy9);
        boolean boolean27 = parkingSpaceProxy9.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean33 = parkingSpaceProxy9.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        java.lang.String str36 = parkingSpaceProxy9.scanSpace("13b04414-31a5-407f-8ea3-fba4613c73d1", "Jane");
        boolean boolean39 = parkingSpaceProxy9.extendBooking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", 0);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "disabled" + "'", str36, "disabled");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot1.assignBooking((int) (short) 1, booking4);
        ParkingSystem.ParkingSpace parkingSpace7 = parkingLot1.getParkingSpace((int) ' ');
        boolean boolean8 = parkingLot1.isEnabled();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(parkingSpace7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("hi!", "hi!", "empty", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        java.lang.String str10 = superManager9.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = null;
        accountRegistry14.assignProxyToManager("disabled", parkingSpaceProxy17);
        superManager9.registry = accountRegistry14;
        ParkingSystem.AccountRegistry accountRegistry23 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager24 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry23);
        java.lang.String str25 = superManager24.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry29 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager30 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry29);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = null;
        accountRegistry29.assignProxyToManager("disabled", parkingSpaceProxy32);
        superManager24.registry = accountRegistry29;
        superManager9.registry = accountRegistry29;
        java.util.List<ParkingSystem.Client> clientList36 = accountRegistry29.displayPendingValidations();
        superManager4.registry = accountRegistry29;
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str10, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertNotNull(superManager24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str25, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager30);
        org.junit.Assert.assertNotNull(clientList36);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        parkingLot1.removeBooking(32);
        boolean boolean5 = parkingLot1.isSpaceAvailable((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj12 = parkingSpaceProxy9.login("empty", "Jane");
        parkingSpaceProxy9.validateClient("Jane");
        parkingSpaceProxy9.toggleSpace("", "staff", false);
        boolean boolean20 = parkingSpaceProxy9.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy9);
        boolean boolean27 = parkingSpaceProxy9.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean33 = parkingSpaceProxy9.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        parkingSpaceProxy9.toggleSpace("02659ad3-0b5c-4c48-a915-a466f2b50775", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", false);
        ParkingSystem.AccountRegistry accountRegistry38 = parkingSpaceProxy9.getRegistry();
        parkingSpaceProxy9.toggleSpace("CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc", "h40rNQ7kR1", true);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(accountRegistry38);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        ParkingSystem.Booking booking10 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNull(booking10);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        boolean boolean5 = checkInManager1.checkIn("jane");
        java.lang.String str6 = checkInManager1.refundMessage;
        boolean boolean8 = checkInManager1.checkOut("Refunded total cost of $1.0");
        boolean boolean10 = checkInManager1.checkIn("Refunded total cost of $100.0");
        boolean boolean12 = checkInManager1.checkOut("3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean14 = checkInManager1.checkIn("Paid $ 1.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        spaceManager4.addParkingLot("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        spaceManager4.removeBooking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", (int) (byte) 0);
        spaceManager4.loadParkingLots();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        double double5 = bookingManager3.getHourlyRate("jane");
        double double7 = bookingManager3.getHourlyRate("ST001");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 15.0d + "'", double7 == 15.0d);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        boolean boolean5 = checkInManager1.checkOut("CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04");
        java.lang.String str6 = checkInManager1.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        parkingSpaceProxy2.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry17 = parkingSpaceProxy2.getRegistry();
        accountRegistry17.validateClient("disabled");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(accountRegistry17);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        spaceManager4.addParkingLot("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        spaceManager4.removeBooking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", (int) (byte) 0);
        spaceManager4.addParkingLot("e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        checkInManager1.refundMessage = "13b04414-31a5-407f-8ea3-fba4613c73d1";
        boolean boolean5 = checkInManager1.checkOut("e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        boolean boolean7 = checkInManager1.checkOut("3b453211-7dd1-4452-8741-a206711c1217");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("Paid $ 100.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (-1), "Paid $ 10.0 with Mobile Pay", (int) '#', "hi!", 0.0d);
        boolean boolean8 = booking7.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        ParkingSystem.User user2 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        boolean boolean14 = parkingSpaceProxy3.cancelBooking("");
        user2.assignProxy(parkingSpaceProxy3);
        client0.assignProxy(parkingSpaceProxy3);
        boolean boolean24 = client0.confirmBooking("Refunded without deposit ($0.0)", "Paid $ 10.0 with Mobile Pay", 1, "9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) '4', "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean25 = client0.checkOut();
        java.lang.String str26 = client0.getUsername();
        ParkingSystem.Booking booking27 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "45) test1294(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky "19) test1294(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertNull(booking27);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap3 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        double double6 = bookingManager0.getDeposit("Paid $ 0.0 with Mobile Pay");
        double double8 = bookingManager0.getHourlyRate("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 15.0d + "'", double8 == 15.0d);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator3 = parkingLot1.getIterator();
        boolean boolean4 = parkingLotIterator3.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingLotIterator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        boolean boolean13 = client0.checkIn();
        client0.setClientInfo("staff", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", true);
        boolean boolean22 = client0.checkOut();
        org.junit.Assert.assertNotNull(client0);
// flaky "46) test1297(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $1.0" + "'", str1, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        parkingLot1.setEnabled(true);
        ParkingSystem.Booking booking12 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double13 = booking12.getTotalCost();
        java.lang.String str14 = booking12.getLotId();
        int int15 = booking12.getDuration();
        java.lang.String str16 = booking12.getLotId();
        boolean boolean17 = parkingLot1.assignBooking((int) (byte) 10, booking12);
        int int18 = booking12.getDuration();
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "jane" + "'", str16, "jane");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        boolean boolean51 = parkingSpaceFacade33.confirmBooking("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) '#', "Paid $ -1.0 with Mobile Pay", (int) (short) -1, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        parkingSpaceFacade33.addParkingLot("SRiN5ev00N");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.Client client9 = ParkingSystem.Client.getInstance();
        java.lang.String str10 = client9.getName();
        client9.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str19 = client9.getUsername();
        java.lang.String str20 = client9.getPassword();
        java.lang.String str21 = client9.getUsername();
        cSVManager0.saveClient(client9);
        boolean boolean24 = client9.extendBooking((int) (byte) 0);
        boolean boolean26 = client9.extendBooking((int) '#');
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(client9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceFacade0.toggleSpace("Paid $ 0.0 with Mobile Pay", "hi!", false);
        ParkingSystem.Booking booking9 = parkingSpaceFacade0.getBookingDetails("CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNull(booking9);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.BookingManager bookingManager1 = parkingSpaceFacade0.getBookingManager();
        double double3 = bookingManager1.getHourlyRate("pass");
        ParkingSystem.AccountRegistry accountRegistry4 = bookingManager1.getAccountRegistry();
        double double6 = bookingManager1.getHourlyRate("83a51dc6-0c8f-4f21-ae40-68699828f95d");
        org.junit.Assert.assertNotNull(bookingManager1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        java.lang.String str4 = paymentManager0.paymentMessage;
        boolean boolean6 = paymentManager0.refundTotalCost((double) (-1));
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) (byte) 1, 10.0d);
        paymentManager0.refundMessage = "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04";
        java.lang.String str12 = paymentManager0.paymentMessage;
        paymentManager0.paymentMessage = "";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        boolean boolean13 = client0.extendBooking((int) ' ');
        ParkingSystem.AccountRegistry accountRegistry17 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry17);
        boolean boolean20 = accountRegistry17.requiresValidation("disabled");
        int int21 = accountRegistry17.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj26 = parkingSpaceProxy23.login("empty", "Jane");
        parkingSpaceProxy23.validateClient("Jane");
        parkingSpaceProxy23.toggleSpace("", "staff", false);
        boolean boolean34 = parkingSpaceProxy23.cancelBooking("Jane");
        accountRegistry17.assignProxyToClient("pass", parkingSpaceProxy23);
        boolean boolean41 = parkingSpaceProxy23.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean47 = parkingSpaceProxy23.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        java.lang.String str50 = parkingSpaceProxy23.scanSpace("13b04414-31a5-407f-8ea3-fba4613c73d1", "Jane");
        client0.assignProxy(parkingSpaceProxy23);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        java.util.List<ParkingSystem.Client> clientList7 = accountRegistry3.displayPendingValidations();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadManagersFromCSV();
// flaky "47) test1305(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(clientList7);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        boolean boolean4 = client0.checkIn();
        boolean boolean6 = client0.extendBooking(32);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        accountRegistry20.assignProxyToManager("jane", parkingSpaceProxy22);
        accountRegistry20.validateClient("86z9Z9e0MN");
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean12 = client0.editBooking("e8686ac8-1df7-4a9b-b299-8fbcdd585528", 0);
        org.junit.Assert.assertNotNull(client0);
// flaky "48) test1308(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean10 = client0.checkIn();
        ParkingSystem.Booking booking11 = client0.getBookingDetails();
        boolean boolean12 = client0.checkOut();
        ParkingSystem.AccountRegistry accountRegistry16 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry16);
        boolean boolean19 = accountRegistry16.requiresValidation("disabled");
        int int20 = accountRegistry16.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("Jane");
        accountRegistry16.assignProxyToClient("pass", parkingSpaceProxy22);
        boolean boolean40 = parkingSpaceProxy22.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean46 = parkingSpaceProxy22.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean52 = parkingSpaceProxy22.register("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "staff", "Refunded total cost of $1.0", "Paid $ 10.0 with Mobile Pay", "jane");
        boolean boolean54 = parkingSpaceProxy22.cancelBooking("ST001");
        client0.assignProxy(parkingSpaceProxy22);
        boolean boolean58 = client0.editBooking("Jane", (int) (byte) 10);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        parkingSpaceProxy1.displayPendingValidations();
        parkingSpaceProxy1.addParkingLot("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy1.getFacade();
        boolean boolean21 = parkingSpaceFacade17.editBooking("CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", 100);
        ParkingSystem.CheckInManager checkInManager22 = parkingSpaceFacade17.getCheckInManager();
        boolean boolean26 = parkingSpaceFacade17.editBooking("CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", "Paid $ 100.0 with Mobile Pay", (int) ' ');
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(checkInManager22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        boolean boolean6 = parkingSpaceProxy3.checkIn("");
        parkingSpaceProxy3.validateClient("");
        user0.assignProxy(parkingSpaceProxy3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = user0.parkingProxy;
        ParkingSystem.Client client11 = ParkingSystem.Client.getInstance();
        java.lang.String str12 = client11.getName();
        client11.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry16 = parkingSpaceProxy15.getRegistry();
        boolean boolean18 = parkingSpaceProxy15.checkIn("");
        client11.assignProxy(parkingSpaceProxy15);
        boolean boolean20 = client11.cancelBooking();
        java.lang.String str21 = client11.getExtraId();
        java.lang.String str22 = client11.getName();
        java.lang.String str23 = client11.getName();
        boolean boolean24 = client11.checkIn();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean27 = parkingSpaceProxy25.cancelBooking("pass");
        parkingSpaceProxy25.toggleSpace("jane", "Paid $ -1.0 with Mobile Pay", false);
        boolean boolean33 = parkingSpaceProxy25.checkOut("Paid $ 0.0 with Mobile Pay");
        boolean boolean37 = parkingSpaceProxy25.editBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0);
        client11.assignProxy(parkingSpaceProxy25);
        boolean boolean46 = client11.confirmBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "Refunded total cost of $100.0", (int) (byte) 100, "Paid $ 10.0 with Mobile Pay", (-1), "disabled", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        user0.user = "Refunded total cost of $100.0";
        user0.register("", "qPYDfDnbtD", "CLT-849ed8c4-58ed-4643-99dc-d9a0cdbc1188", "", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy10);
        org.junit.Assert.assertNotNull(client11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7" + "'", str12, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNotNull(accountRegistry16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jane" + "'", str21, "jane");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7" + "'", str22, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7" + "'", str23, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        ParkingSystem.MobilePay mobilePay20 = new ParkingSystem.MobilePay();
        boolean boolean25 = mobilePay20.processPayment("hi!", (-1.0d), "", "");
        boolean boolean30 = mobilePay20.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean35 = mobilePay20.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) 10.0f, "staff", "empty");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay20);
        ParkingSystem.Booking booking38 = bookingManager0.getBooking("qPYDfDnbtD");
        boolean boolean40 = bookingManager0.cancelBooking("2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(booking38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry15 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry15);
        boolean boolean18 = accountRegistry15.requiresValidation("disabled");
        int int19 = accountRegistry15.getManagersSize();
        boolean boolean25 = accountRegistry15.registerClient("Paid $ 10.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        accountRegistry15.validateClient("staff");
        boolean boolean33 = accountRegistry15.registerClient("Refunded without deposit ($-96.0)", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("qPYDfDnbtD", "hi!", "", accountRegistry15);
        superManager4.registry = accountRegistry15;
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNotNull(superManager16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(superManager34);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        java.lang.String str15 = client0.getClientType();
        java.lang.String str16 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str1, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean3 = parkingSpaceProxy0.checkIn("");
        parkingSpaceProxy0.validateClient("");
        java.lang.String str8 = parkingSpaceProxy0.scanSpace("", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(false);
        client0.setClientInfo("staff", "Refunded total cost of $1.0", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Jane", "Paid $ 10.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", true);
        boolean boolean13 = client0.checkIn();
        java.lang.String str14 = client0.getPassword();
        client0.setClientInfo("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "TXCrKOGD", "disabled", "Paid $ 1470.0 with Mobile Pay", "", "Paid $ 100.0 with Mobile Pay", false);
        java.lang.String str23 = client0.getClientId();
        java.lang.String str24 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jane" + "'", str14, "Jane");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5" + "'", str23, "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disabled" + "'", str24, "disabled");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry7 = superManager4.getRegistry();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNotNull(accountRegistry7);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        boolean boolean14 = paymentManager0.processPayment("9701df9a-2178-4ad5-8076-46ff5f05b3e8", (double) 10.0f, "", "Card number should be 16 digits");
        paymentManager0.paymentMessage = "Card number should be 16 digits";
        boolean boolean18 = paymentManager0.refundDeposit((double) 10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        boolean boolean20 = client0.checkOut();
        client0.setValidated(true);
        boolean boolean30 = client0.confirmBooking("CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", 0, "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", 0, "", "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client0);
// flaky "49) test1319(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "20) test1319(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
// flaky "9) test1319(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        booking15.setStartTime("CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.Booking booking13 = parkingSpaceFacade9.getBookingDetails("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        boolean boolean16 = parkingSpaceFacade9.extendBooking("ST001", 2);
        ParkingSystem.CheckInManager checkInManager17 = parkingSpaceFacade9.getCheckInManager();
        boolean boolean19 = checkInManager17.checkIn("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(checkInManager17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        superManager18.assignProxy(parkingSpaceProxy19);
        ParkingSystem.Manager manager21 = superManager18.autoGenerateManager();
        java.lang.String str22 = superManager18.getPassword();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager18.getRegistry();
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(manager21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Refunded total cost of $1.0" + "'", str22, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry23);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap16 = accountRegistry14.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        java.lang.String str22 = parkingSpaceProxy18.scanSpace("empty", "hi!");
        boolean boolean32 = parkingSpaceProxy18.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy18.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean42 = parkingSpaceProxy18.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry14.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy18);
        accountRegistry6.assignProxyToManager("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        ParkingSystem.SuperManager superManager45 = ParkingSystem.SuperManager.createFromCSV("hi!", "hi!", "pass", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap46 = accountRegistry6.getManagers();
        java.util.List<ParkingSystem.Client> clientList47 = accountRegistry6.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disabled" + "'", str22, "disabled");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(superManager45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(clientList47);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager3 = parkingSpaceFacade1.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap4 = spaceManager3.getParkingLots();
        cSVManager0.loadParkingLots(strMap4);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.SpaceManager spaceManager7 = new ParkingSystem.SpaceManager();
        boolean boolean10 = spaceManager7.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str13 = spaceManager7.scanSpace("disabled", "");
        spaceManager7.toggleSpace("Refunded without deposit ($0.0)", "disabled", false);
        spaceManager7.removeBooking("qPYDfDnbtD", (int) (byte) 1);
        spaceManager7.removeBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) (byte) 100);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap24 = spaceManager7.getParkingLots();
        cSVManager0.saveParkingLots(strMap24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList26 = cSVManager0.loadManagers();
// flaky "50) test1324(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertNotNull(spaceManager3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "21) test1324(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disabled" + "'", str13, "disabled");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager1 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str4 = spaceManager1.scanSpace("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        org.junit.Assert.assertNotNull(spaceManager1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        double double5 = bookingManager0.getHourlyRate("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        boolean boolean11 = mobilePay6.processPayment("hi!", (-1.0d), "", "");
        boolean boolean16 = mobilePay6.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean21 = mobilePay6.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) 10.0f, "staff", "empty");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay6);
        ParkingSystem.Booking booking24 = bookingManager0.getBooking("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.MobilePay mobilePay25 = new ParkingSystem.MobilePay();
        boolean boolean30 = mobilePay25.processPayment("hi!", (-1.0d), "", "");
        java.lang.String str31 = mobilePay25.getPaymentMessage();
        boolean boolean36 = mobilePay25.processPayment("Refunded without deposit ($0.0)", (double) (short) -1, "pass", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str37 = mobilePay25.getPaymentMessage();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay25);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(booking24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str31, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str37, "Paid $ -1.0 with Mobile Pay");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        ParkingSystem.Client client31 = accountRegistry15.getClient("empty");
        ParkingSystem.AccountRegistry accountRegistry36 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry36);
        java.lang.String str38 = superManager37.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry42 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager43 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry42);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = null;
        accountRegistry42.assignProxyToManager("disabled", parkingSpaceProxy45);
        superManager37.registry = accountRegistry42;
        ParkingSystem.AccountRegistry accountRegistry48 = superManager37.getRegistry();
        ParkingSystem.Manager manager49 = accountRegistry48.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry52 = parkingSpaceProxy51.getRegistry();
        boolean boolean58 = parkingSpaceProxy51.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy51.toggleLot("hi!", false);
        accountRegistry48.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy51);
        boolean boolean68 = parkingSpaceProxy51.register("disabled", "pass", "Card number should be 16 digits", "Paid $ 0.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        accountRegistry15.assignProxyToClient("staff", parkingSpaceProxy51);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(client31);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str38, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager43);
        org.junit.Assert.assertNotNull(accountRegistry48);
        org.junit.Assert.assertNotNull(manager49);
        org.junit.Assert.assertNotNull(accountRegistry52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.Client client24 = ParkingSystem.Client.getInstance();
        java.lang.String str25 = client24.getName();
        client24.setValidated(true);
        ParkingSystem.Booking booking28 = client24.getBookingDetails();
        java.lang.String str29 = client24.getUsername();
        java.lang.String str30 = client24.getUsername();
        ParkingSystem.Booking booking31 = client24.getBookingDetails();
        cSVManager0.saveClient(client24);
        boolean boolean35 = client24.editBooking("13b04414-31a5-407f-8ea3-fba4613c73d1", (int) (byte) 10);
        boolean boolean36 = client24.cancelBooking();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "51) test1328(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "22) test1328(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str13, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertNotNull(client24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "empty" + "'", str25, "empty");
        org.junit.Assert.assertNull(booking28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jane" + "'", str29, "Jane");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Jane" + "'", str30, "Jane");
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean19 = client0.editBooking("", 1);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Refunded total cost of $1.0" + "'", str10, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str13, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        boolean boolean9 = bookingManager0.editBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "", (int) (short) 100);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str13 = client3.getUsername();
        java.lang.String str14 = client3.getPassword();
        java.lang.String str15 = client3.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = null;
        client3.assignProxy(parkingSpaceProxy16);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        client3.assignProxy(parkingSpaceProxy18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj26 = parkingSpaceProxy23.login("empty", "Jane");
        parkingSpaceProxy23.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy23.displayPendingValidations();
        client3.assignProxy(parkingSpaceProxy23);
        client0.assignProxy(parkingSpaceProxy23);
        boolean boolean35 = parkingSpaceProxy23.checkIn("");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str1, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "pass" + "'", str2, "pass");
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "empty" + "'", str4, "empty");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        java.lang.Object obj13 = accountRegistry6.login("empty", "Refunded total cost of $1.0");
        boolean boolean15 = accountRegistry6.requiresValidation("Refunded total cost of $1.0");
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("Paid $ 0.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ 15.0 with Mobile Pay", accountRegistry6);
        java.lang.Object obj19 = accountRegistry6.login("Paid $ -1.0 with Mobile Pay", "Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(superManager16);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean9 = parkingLot1.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator10 = parkingLot1.getIterator();
        boolean boolean11 = parkingLotIterator10.hasNext();
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLotIterator10.next();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        double double23 = bookingManager19.calculateCost("83a51dc6-0c8f-4f21-ae40-68699828f95d", 0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "52) test1334(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str6, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 15.0d + "'", double23 == 15.0d);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        parkingSpaceProxy1.addParkingLot("staff");
        boolean boolean17 = parkingSpaceProxy1.cancelBooking("ST001");
        boolean boolean20 = parkingSpaceProxy1.extendBooking("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", 100);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("Jane", "staff", (int) (short) 100);
        ParkingSystem.Booking booking8 = parkingSpaceFacade0.getBookingDetails("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        parkingSpaceFacade0.toggleSpace("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "FNuxCiXmkP", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(booking8);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        superManager18.assignProxy(parkingSpaceProxy19);
        ParkingSystem.AccountRegistry accountRegistry21 = superManager18.getRegistry();
        int int22 = accountRegistry21.getManagersSize();
        ParkingSystem.Client client24 = accountRegistry21.getClient("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj29 = parkingSpaceProxy26.login("empty", "Jane");
        parkingSpaceProxy26.validateClient("Jane");
        parkingSpaceProxy26.toggleSpace("", "staff", false);
        boolean boolean37 = parkingSpaceProxy26.cancelBooking("");
        parkingSpaceProxy26.toggleLot("Paid $ 10.0 with Mobile Pay", true);
        boolean boolean43 = parkingSpaceProxy26.extendBooking("Paid $ 100.0 with Mobile Pay", 1);
        accountRegistry21.assignProxyToManager("FNuxCiXmkP", parkingSpaceProxy26);
        parkingSpaceProxy26.validateClient("3b453211-7dd1-4452-8741-a206711c1217");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry21);
// flaky "53) test1337(RegressionTest2)":         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNull(client24);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        java.lang.Object obj32 = accountRegistry15.login("jane", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot1.assignBooking((int) (short) 1, booking4);
        ParkingSystem.ParkingSpace parkingSpace7 = parkingLot1.getParkingSpace((int) ' ');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", (int) ' ', "Refunded total cost of $-1.0", (int) 'a', "staff", (double) (byte) 10);
        java.lang.String str16 = booking15.getLotId();
        boolean boolean17 = parkingSpace7.assignBooking(booking15);
        boolean boolean18 = booking15.isCheckedIn();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime19 = booking15.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Refunded total cost of $-1.0' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(parkingSpace7);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c" + "'", str16, "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking9 = parkingSpaceProxy7.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy7.getRegistry();
        ParkingSystem.Manager manager11 = accountRegistry10.autoGenerateManager();
        java.lang.String str12 = manager11.getName();
        cSVManager0.saveManager(manager11);
        cSVManager0.updateClientValidation("CLT-92729d37-9255-42b4-9361-c1978aadacb0", false);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNull(booking9);
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertNotNull(manager11);
// flaky "54) test1340(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "qMzKSKOI" + "'", str12, "qMzKSKOI");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean22 = checkInManager20.checkIn("Refunded total cost of $-1.0");
        boolean boolean24 = checkInManager20.checkOut("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        checkInManager20.refundMessage = "";
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean6 = parkingSpaceFacade0.extendBooking("disabled", 0);
        parkingSpaceFacade0.toggleSpace("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "", false);
        ParkingSystem.CheckInManager checkInManager11 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.toggleSpace("Refunded without deposit ($0.0)", "", true);
        boolean boolean19 = parkingSpaceFacade0.editBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "Refunded without deposit ($-96.0)", (int) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(checkInManager11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        java.lang.String str3 = client0.getClientId();
        ParkingSystem.Booking booking4 = client0.getBookingDetails();
        boolean boolean12 = client0.confirmBooking("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", "jane", 0, "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", (int) (byte) 10, "qPYDfDnbtD", "Paid $ 1470.0 with Mobile Pay");
        boolean boolean13 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str2, "Paid $ 10.0 with Mobile Pay");
// flaky "55) test1343(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CLT-c3ce9a25-7555-430c-9330-9203c36530f8" + "'", str3, "CLT-c3ce9a25-7555-430c-9330-9203c36530f8");
        org.junit.Assert.assertNull(booking4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = null;
        accountRegistry3.assignProxyToClient("", parkingSpaceProxy8);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry3.displayPendingValidations();
        java.util.List<ParkingSystem.Client> clientList11 = accountRegistry3.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(clientList11);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        java.lang.String str9 = booking7.getClientId();
        booking7.setStartTime("hi!");
        java.lang.String str12 = booking7.getStartTime();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "staff" + "'", str9, "staff");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getExtraId();
        boolean boolean3 = client0.checkOut();
        java.lang.String str4 = client0.getExtraId();
        java.lang.String str5 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jane" + "'", str2, "jane");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        java.lang.String str9 = booking7.getClientId();
        booking7.setStartTime("hi!");
        boolean boolean12 = booking7.isCheckedIn();
        java.lang.String str13 = booking7.getLotId();
        int int14 = booking7.getDuration();
        int int15 = booking7.getDuration();
        booking7.setStartTime("");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "staff" + "'", str9, "staff");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "jane" + "'", str13, "jane");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean26 = bookingManager0.confirmBooking("empty", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "Refunded total cost of $1.0", (int) (byte) 1, "Card number should be 16 digits", 32, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled");
        ParkingSystem.BookingManager bookingManager27 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager28 = new ParkingSystem.CheckInManager(bookingManager27);
        ParkingSystem.SpaceManager spaceManager29 = bookingManager27.getSpaceManager();
        double double32 = bookingManager27.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit33 = new ParkingSystem.DebitOrCredit();
        bookingManager27.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit33);
        boolean boolean39 = debitOrCredit33.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str40 = debitOrCredit33.getPaymentMessage();
        boolean boolean43 = debitOrCredit33.validateCard("pass", (double) 100.0f);
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit33);
        java.lang.String str45 = debitOrCredit33.getPaymentMessage();
        java.lang.String str46 = debitOrCredit33.getPaymentMessage();
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(spaceManager29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 165.0d + "'", double32 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Card number should be 16 digits" + "'", str40, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Card number should be 16 digits" + "'", str45, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Card number should be 16 digits" + "'", str46, "Card number should be 16 digits");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean18 = client0.extendBooking((int) '#');
        boolean boolean26 = client0.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", (int) 'a', "hi!", 100, "13b04414-31a5-407f-8ea3-fba4613c73d1", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean27 = client0.getIsValidated();
        org.junit.Assert.assertNotNull(client0);
// flaky "56) test1349(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "23) test1349(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
// flaky "10) test1349(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
// flaky "4) test1349(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "jane" + "'", str12, "jane");
// flaky "3) test1349(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setClientInfo("Jane", "", "pass", "pass", "pass", "hi!", true);
        boolean boolean10 = client0.getIsValidated();
        boolean boolean11 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
// flaky "57) test1350(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) ' ');
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(0);
        ParkingSystem.SpaceState spaceState12 = parkingSpace11.getState();
        ParkingSystem.Enabled enabled13 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot15 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking17 = null;
        boolean boolean18 = parkingLot15.assignBooking(0, booking17);
        boolean boolean20 = parkingLot15.isSpaceAvailable((int) '#');
        boolean boolean22 = parkingLot15.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace24 = parkingLot15.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking25 = parkingSpace24.getCurrentBooking();
        parkingSpace24.removeBooking();
        java.lang.String str27 = enabled13.scanSpace(parkingSpace24);
        ParkingSystem.ParkingLot parkingLot29 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking31 = null;
        boolean boolean32 = parkingLot29.assignBooking(0, booking31);
        boolean boolean34 = parkingLot29.isSpaceAvailable((int) '#');
        boolean boolean36 = parkingLot29.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace38 = parkingLot29.getParkingSpace((int) (byte) 10);
        int int39 = parkingSpace38.getSpaceId();
        ParkingSystem.Booking booking40 = parkingSpace38.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager41 = new ParkingSystem.SpaceManager();
        boolean boolean44 = spaceManager41.isSpaceAvailable("hi!", (int) '#');
        spaceManager41.toggleLot("disabled", false);
        ParkingSystem.Booking booking57 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean58 = spaceManager41.assignBooking("empty", (int) (short) 0, booking57);
        boolean boolean59 = parkingSpace38.assignBooking(booking57);
        java.lang.String str60 = enabled13.scanSpace(parkingSpace38);
        boolean boolean61 = parkingSpace38.isAvailable();
        java.lang.String str62 = spaceState12.scanSpace(parkingSpace38);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNotNull(spaceState12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(parkingSpace24);
        org.junit.Assert.assertNull(booking25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "empty" + "'", str27, "empty");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parkingSpace38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNull(booking40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "disabled" + "'", str62, "disabled");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean23 = bookingManager18.extendBooking("Paid $ 0.0 with Mobile Pay", (int) 'a', "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        double double25 = bookingManager18.getHourlyRate("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        boolean boolean30 = bookingManager18.extendBooking("ST001", (int) (byte) 1, "86z9Z9e0MN", "disabled");
        double double33 = bookingManager18.calculateCost("Card number should be 16 digits", (int) '#');
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "58) test1352(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jane" + "'", str6, "jane");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 15.0d + "'", double25 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 540.0d + "'", double33 == 540.0d);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled14);
        ParkingSystem.Enabled enabled16 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled16);
        boolean boolean18 = parkingSpace10.isAvailable();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap3 = bookingManager0.getActiveBookings();
        double double6 = bookingManager0.calculateCost("CLT-035180a0-4707-410d-a011-2a4f0f46838b", (int) (short) 0);
        boolean boolean8 = bookingManager0.cancelBooking("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean12 = bookingManager0.editBooking("Paid $ 1.0 with Mobile Pay", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 52);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.Booking booking4 = client0.getBookingDetails();
        java.lang.String str5 = client0.getUsername();
        java.lang.String str6 = client0.getUsername();
        ParkingSystem.Booking booking7 = client0.getBookingDetails();
        java.lang.String str8 = client0.getExtraId();
        client0.setClientInfo("CLT-390234b0-d56e-4275-bd7b-122280609c69", "Refunded deposit of $0.0", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "hi!", "SRiN5ev00N", "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc", false);
        org.junit.Assert.assertNotNull(client0);
// flaky "59) test1355(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNull(booking4);
// flaky "24) test1355(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str5, "Paid $ -1.0 with Mobile Pay");
// flaky "11) test1355(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str6, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNull(booking7);
// flaky "5) test1355(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Refunded total cost of $1.0" + "'", str8, "Refunded total cost of $1.0");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user0.assignProxy(parkingSpaceProxy30);
        boolean boolean37 = parkingSpaceProxy30.cancelBooking("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff");
        parkingSpaceProxy30.toggleSpace("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "02659ad3-0b5c-4c48-a915-a466f2b50775", false);
        boolean boolean43 = parkingSpaceProxy30.checkIn("4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNotNull(client20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Refunded deposit of $0.0" + "'", str21, "Refunded deposit of $0.0");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "disabled";
        boolean boolean10 = paymentManager0.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        ParkingSystem.MobilePay mobilePay11 = new ParkingSystem.MobilePay();
        boolean boolean16 = mobilePay11.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str17 = mobilePay11.getPaymentMessage();
        java.lang.String str18 = mobilePay11.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay11);
        boolean boolean21 = paymentManager0.refundTotalCost((double) (byte) 10);
        ParkingSystem.MobilePay mobilePay22 = new ParkingSystem.MobilePay();
        boolean boolean27 = mobilePay22.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str28 = mobilePay22.getPaymentMessage();
        boolean boolean33 = mobilePay22.processPayment("Jane", (double) 10L, "jane", "Paid $ 10.0 with Mobile Pay");
        boolean boolean38 = mobilePay22.processPayment("Jane", (double) (byte) 0, "hi!", "Jane");
        java.lang.String str39 = mobilePay22.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay22);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str17, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str18, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str28, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str39, "Paid $ 0.0 with Mobile Pay");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap7 = accountRegistry3.getManagers();
        ParkingSystem.Manager manager8 = accountRegistry3.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj13 = parkingSpaceProxy10.login("empty", "Jane");
        parkingSpaceProxy10.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy10.displayPendingValidations();
        accountRegistry3.assignProxyToClient("Paid $ 15.0 with Mobile Pay", parkingSpaceProxy10);
        ParkingSystem.AccountRegistry accountRegistry20 = parkingSpaceProxy10.getRegistry();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(accountRegistry20);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap31 = accountRegistry24.getManagers();
        java.lang.Class<?> wildcardClass32 = accountRegistry24.getClass();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str20, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("hi!", "", "Refunded total cost of $100.0", "Paid $ 1470.0 with Mobile Pay", "h40rNQ7kR1", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", true);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded deposit of $0.0" + "'", str1, "Refunded deposit of $0.0");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc" + "'", str10, "CLT-ee40679d-6eaa-440b-8126-6ccceac50ddc");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Refunded deposit of $0.0" + "'", str11, "Refunded deposit of $0.0");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        boolean boolean5 = checkInManager1.checkIn("jane");
        java.lang.String str6 = checkInManager1.refundMessage;
        boolean boolean8 = checkInManager1.checkOut("Refunded total cost of $1.0");
        boolean boolean10 = checkInManager1.checkIn("Refunded total cost of $100.0");
        boolean boolean12 = checkInManager1.checkIn("CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753");
        boolean boolean14 = checkInManager1.checkIn("Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.paymentMessage = "staff";
        paymentManager0.refundMessage = "CLT-035180a0-4707-410d-a011-2a4f0f46838b";
        java.lang.String str5 = paymentManager0.paymentMessage;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "staff" + "'", str5, "staff");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str11 = parkingSpaceFacade0.scanSpace("3b453211-7dd1-4452-8741-a206711c1217", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        boolean boolean15 = parkingSpaceFacade0.editBooking("9fJ5pCUl", "Refunded without deposit ($-42.0)", 2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        boolean boolean36 = accountRegistry24.registerClient("staff", "staff", "pass", "disabled", "disabled");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry24.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str20, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        boolean boolean4 = client0.editBooking("jane", (int) (short) 0);
        java.lang.String str5 = client0.getExtraId();
        client0.setClientInfo("4c45f11e-b09a-4d81-adf1-86cfd519dc3c", "Refunded total cost of $1.0", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "Refunded total cost of $10.0", "e8686ac8-1df7-4a9b-b299-8fbcdd585528", "Refunded without deposit ($-42.0)", false);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "staff" + "'", str1, "staff");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        boolean boolean13 = client0.extendBooking((int) ' ');
        client0.setValidated(false);
        boolean boolean18 = client0.editBooking("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", 0);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $1.0" + "'", str1, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str10, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "disabled";
        boolean boolean10 = paymentManager0.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean13 = paymentManager0.refundWithoutDeposit((double) '4', 165.0d);
        boolean boolean15 = paymentManager0.refundDeposit((double) 'a');
        boolean boolean17 = paymentManager0.refundDeposit((double) 1L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        parkingSpaceProxy4.addParkingLot("Jane");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade12 = parkingSpaceProxy4.getFacade();
        boolean boolean16 = parkingSpaceProxy4.editBooking("CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", (int) (short) -1);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $1.0" + "'", str1, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertNotNull(parkingSpaceFacade12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str17 = client7.getUsername();
        java.lang.String str18 = client7.getPassword();
        java.lang.String str19 = client7.getClientType();
        boolean boolean20 = client7.getIsValidated();
        boolean boolean28 = client7.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        java.lang.String str29 = client7.getName();
        boolean boolean30 = client7.getIsValidated();
        cSVManager0.saveClient(client7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList32 = cSVManager0.loadManagers();
// flaky "60) test1369(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "25) test1369(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Refunded total cost of $1.0" + "'", str8, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.Booking booking3 = parkingSpaceFacade0.getBookingDetails("Paid $ 100.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager4 = parkingSpaceFacade0.getBookingManager();
        double double6 = bookingManager4.getDeposit("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        double double8 = bookingManager4.getHourlyRate("h40rNQ7kR1");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(bookingManager4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 15.0d + "'", double8 == 15.0d);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        ParkingSystem.ParkingLot parkingLot7 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot7.assignBooking(0, booking9);
        boolean boolean12 = parkingLot7.isSpaceAvailable((int) '#');
        boolean boolean14 = parkingLot7.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace16 = parkingLot7.getParkingSpace((int) (byte) 10);
        int int17 = parkingSpace16.getSpaceId();
        ParkingSystem.Booking booking18 = parkingSpace16.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager19 = new ParkingSystem.SpaceManager();
        boolean boolean22 = spaceManager19.isSpaceAvailable("hi!", (int) '#');
        spaceManager19.toggleLot("disabled", false);
        ParkingSystem.Booking booking35 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean36 = spaceManager19.assignBooking("empty", (int) (short) 0, booking35);
        boolean boolean37 = parkingSpace16.assignBooking(booking35);
        ParkingSystem.SpaceManager spaceManager38 = new ParkingSystem.SpaceManager();
        boolean boolean41 = spaceManager38.isSpaceAvailable("hi!", (int) '#');
        spaceManager38.toggleLot("disabled", false);
        ParkingSystem.Booking booking54 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean55 = spaceManager38.assignBooking("empty", (int) (short) 0, booking54);
        ParkingSystem.SpaceManager spaceManager58 = new ParkingSystem.SpaceManager();
        boolean boolean61 = spaceManager58.isSpaceAvailable("hi!", (int) '#');
        spaceManager58.toggleLot("disabled", false);
        ParkingSystem.Booking booking74 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean75 = spaceManager58.assignBooking("empty", (int) (short) 0, booking74);
        boolean boolean76 = spaceManager38.assignBooking("disabled", (int) (byte) 0, booking74);
        boolean boolean77 = parkingSpace16.assignBooking(booking74);
        boolean boolean78 = spaceManager0.assignBooking("", (int) (short) 1, booking74);
        java.lang.String str79 = booking74.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(parkingSpace16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(booking18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "disabled" + "'", str79, "disabled");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean18 = bookingManager0.cancelBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        ParkingSystem.AccountRegistry accountRegistry19 = bookingManager0.getAccountRegistry();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap20 = bookingManager0.getActiveBookings();
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean25 = bookingManager0.editBooking("86z9Z9e0MN", "", 3);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        spaceManager8.loadParkingLots();
        ParkingSystem.Booking booking19 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int20 = booking19.getDuration();
        java.lang.String str21 = booking19.getClientId();
        booking19.setStartTime("hi!");
        boolean boolean24 = booking19.isCheckedIn();
        java.lang.String str25 = booking19.getLotId();
        java.lang.String str26 = booking19.getLicensePlate();
        boolean boolean27 = spaceManager8.assignBooking("Refunded without deposit ($0.0)", (int) (short) 0, booking19);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "staff" + "'", str21, "staff");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jane" + "'", str25, "jane");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("pass");
        ParkingSystem.SpaceManager spaceManager3 = new ParkingSystem.SpaceManager();
        spaceManager3.toggleLot("Jane", false);
        spaceManager3.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        boolean boolean15 = spaceManager12.isSpaceAvailable("hi!", (int) '#');
        spaceManager12.toggleLot("disabled", false);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean29 = spaceManager12.assignBooking("empty", (int) (short) 0, booking28);
        boolean boolean30 = spaceManager3.assignBooking("hi!", 0, booking28);
        double double31 = booking28.getTotalCost();
        booking28.setDuration((-1));
        java.lang.String str34 = booking28.getLotId();
        boolean boolean35 = parkingLot1.assignBooking(1, booking28);
        java.lang.String str36 = booking28.getClientId();
        booking28.setStartTime("86z9Z9e0MN");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "jane" + "'", str34, "jane");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "staff" + "'", str36, "staff");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry5 = superManager4.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap14 = accountRegistry12.getManagers();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry12);
        int int16 = accountRegistry12.getManagersSize();
        ParkingSystem.AccountRegistry accountRegistry21 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry21);
        java.lang.String str23 = superManager22.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        accountRegistry27.assignProxyToManager("disabled", parkingSpaceProxy30);
        superManager22.registry = accountRegistry27;
        ParkingSystem.AccountRegistry accountRegistry33 = superManager22.getRegistry();
        ParkingSystem.Manager manager34 = accountRegistry33.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry37 = parkingSpaceProxy36.getRegistry();
        boolean boolean43 = parkingSpaceProxy36.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy36.toggleLot("hi!", false);
        accountRegistry33.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy36);
        ParkingSystem.User user49 = new ParkingSystem.User();
        java.lang.Object obj50 = user49.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj54 = parkingSpaceProxy51.login("empty", "Jane");
        parkingSpaceProxy51.validateClient("Jane");
        java.lang.String str59 = parkingSpaceProxy51.scanSpace("", "");
        parkingSpaceProxy51.toggleSpace("", "disabled", true);
        user49.parkingProxy = parkingSpaceProxy51;
        ParkingSystem.ParkingLot parkingLot66 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator67 = parkingLot66.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator68 = parkingLot66.getIterator();
        user49.user = parkingLot66;
        ParkingSystem.User user70 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy71 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj74 = parkingSpaceProxy71.login("empty", "Jane");
        parkingSpaceProxy71.validateClient("Jane");
        parkingSpaceProxy71.toggleSpace("", "staff", false);
        boolean boolean82 = parkingSpaceProxy71.cancelBooking("");
        user70.assignProxy(parkingSpaceProxy71);
        user49.user = parkingSpaceProxy71;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy85 = user49.parkingProxy;
        parkingSpaceProxy85.addParkingLot("pass");
        accountRegistry33.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy85);
        accountRegistry12.assignProxyToClient("13b04414-31a5-407f-8ea3-fba4613c73d1", parkingSpaceProxy85);
        superManager4.assignProxy(parkingSpaceProxy85);
        ParkingSystem.AccountRegistry accountRegistry91 = superManager4.getRegistry();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str23, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertNotNull(accountRegistry33);
        org.junit.Assert.assertNotNull(manager34);
        org.junit.Assert.assertNotNull(accountRegistry37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "disabled" + "'", str59, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator67);
        org.junit.Assert.assertNotNull(parkingLotIterator68);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy85);
        org.junit.Assert.assertNotNull(accountRegistry91);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap1 = null;
        cSVManager0.loadParkingLots(strMap1);
        java.lang.String[] strArray3 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client4 = ParkingSystem.Client.getInstance();
        java.lang.String str5 = client4.getClientType();
        java.lang.String str6 = client4.getUsername();
        cSVManager0.saveClient(client4);
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        boolean boolean17 = accountRegistry14.requiresValidation("disabled");
        int int18 = accountRegistry14.getManagersSize();
        java.lang.Object obj21 = accountRegistry14.login("empty", "Refunded total cost of $1.0");
        boolean boolean23 = accountRegistry14.requiresValidation("Refunded total cost of $1.0");
        ParkingSystem.SuperManager superManager24 = ParkingSystem.SuperManager.createFromCSV("Paid $ 0.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ 15.0 with Mobile Pay", accountRegistry14);
        java.lang.String str25 = superManager24.getName();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager24);
        org.junit.Assert.assertNotNull(strArray3);
// flaky "61) test1376(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray3, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client4);
// flaky "26) test1376(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CLT-b6a8264c-f386-4429-b59c-b7f465002e13" + "'", str5, "CLT-b6a8264c-f386-4429-b59c-b7f465002e13");
// flaky "12) test1376(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(superManager24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str25, "Paid $ 0.0 with Mobile Pay");
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("Jane", "staff", (int) (short) 100);
        boolean boolean8 = parkingSpaceFacade0.cancelBooking("jane");
        ParkingSystem.Booking booking10 = parkingSpaceFacade0.getBookingDetails("83a51dc6-0c8f-4f21-ae40-68699828f95d");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(booking10);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        java.lang.String str5 = spaceManager2.scanSpace("09622cbf-e665-45db-b1ad-365065947a20", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        spaceManager2.toggleSpace("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "FNuxCiXmkP", false);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        boolean boolean6 = parkingSpaceProxy0.extendBooking("pass", 0);
        parkingSpaceProxy0.displayPendingValidations();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy0.getRegistry();
        boolean boolean10 = parkingSpaceProxy0.checkOut("lL3e2yIMXI");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.MobilePay mobilePay16 = new ParkingSystem.MobilePay();
        boolean boolean21 = mobilePay16.processPayment("disabled", 10.0d, "disabled", "disabled");
        boolean boolean26 = mobilePay16.processPayment("jane", 15.0d, "jane", "");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay16);
        boolean boolean29 = paymentManager0.refundTotalCost((double) 0L);
        paymentManager0.refundMessage = "empty";
        ParkingSystem.DebitOrCredit debitOrCredit32 = new ParkingSystem.DebitOrCredit();
        java.lang.String str33 = debitOrCredit32.getPaymentMessage();
        boolean boolean36 = debitOrCredit32.validateCard("25527a32-01ef-45ba-816a-1d0a2fc2a52d", 1470.0d);
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit32);
        java.lang.String str38 = debitOrCredit32.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Card number should be 16 digits" + "'", str38, "Card number should be 16 digits");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        parkingSpaceFacade17.addParkingLot("9fJ5pCUl");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "62) test1381(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-631eb509-a6c4-407c-b16d-582a6faabddb" + "'", str6, "CLT-631eb509-a6c4-407c-b16d-582a6faabddb");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        java.lang.String str7 = parkingSpaceProxy3.scanSpace("empty", "hi!");
        boolean boolean17 = parkingSpaceProxy3.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy3.autoGenerateManager();
        user0.user = parkingSpaceProxy3;
        boolean boolean21 = parkingSpaceProxy3.cancelBooking("Refunded deposit of $0.0");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.paymentMessage = "staff";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (short) 0);
        boolean boolean7 = paymentManager0.refundWithoutDeposit(0.0d, 15.0d);
        boolean boolean12 = paymentManager0.processPayment("CLT-55105d92-54d6-44d2-965a-736022b7f7cd", (double) 10L, "qPYDfDnbtD", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean16 = debitOrCredit6.validateCard("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) (short) 1);
        java.lang.String str17 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Card number should be 16 digits" + "'", str17, "Card number should be 16 digits");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry11 = parkingSpaceProxy10.getRegistry();
        boolean boolean13 = parkingSpaceProxy10.checkIn("");
        client0.assignProxy(parkingSpaceProxy10);
        java.lang.String str15 = client0.getClientId();
        java.lang.String str16 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        boolean boolean10 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLotIterator7.next();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean23 = bookingManager0.editBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "K6PkM9rcCx", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.ParkingLot parkingLot4 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator5 = parkingLot4.getIterator();
        ParkingSystem.ParkingSpace parkingSpace7 = parkingLot4.getParkingSpace((int) (byte) -1);
        ParkingSystem.Booking booking8 = parkingSpace7.getCurrentBooking();
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        boolean boolean17 = parkingLot10.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace19 = parkingLot10.getParkingSpace((int) (byte) 10);
        int int20 = parkingSpace19.getSpaceId();
        ParkingSystem.Booking booking21 = parkingSpace19.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager22 = new ParkingSystem.SpaceManager();
        boolean boolean25 = spaceManager22.isSpaceAvailable("hi!", (int) '#');
        spaceManager22.toggleLot("disabled", false);
        ParkingSystem.Booking booking38 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean39 = spaceManager22.assignBooking("empty", (int) (short) 0, booking38);
        boolean boolean40 = parkingSpace19.assignBooking(booking38);
        ParkingSystem.SpaceManager spaceManager41 = new ParkingSystem.SpaceManager();
        boolean boolean44 = spaceManager41.isSpaceAvailable("hi!", (int) '#');
        spaceManager41.toggleLot("disabled", false);
        ParkingSystem.Booking booking57 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean58 = spaceManager41.assignBooking("empty", (int) (short) 0, booking57);
        boolean boolean59 = booking57.isCheckedIn();
        java.lang.String str60 = booking57.getClientId();
        boolean boolean61 = parkingSpace19.assignBooking(booking57);
        boolean boolean62 = parkingSpace7.assignBooking(booking57);
        parkingSpace7.removeBooking();
        java.lang.String str64 = disabled0.scanSpace(parkingSpace7);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator5);
        org.junit.Assert.assertNotNull(parkingSpace7);
        org.junit.Assert.assertNull(booking8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(parkingSpace19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(booking21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "staff" + "'", str60, "staff");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "disabled" + "'", str64, "disabled");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry6.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry6);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager9 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry10 = superManager4.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry11 = superManager4.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj16 = parkingSpaceProxy13.login("empty", "Jane");
        parkingSpaceProxy13.validateClient("Jane");
        parkingSpaceProxy13.toggleSpace("", "staff", false);
        boolean boolean24 = parkingSpaceProxy13.cancelBooking("");
        java.lang.String str27 = parkingSpaceProxy13.scanSpace("staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean30 = parkingSpaceProxy13.extendBooking("jane", (int) ' ');
        boolean boolean32 = parkingSpaceProxy13.checkIn("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean34 = parkingSpaceProxy13.checkOut("Refunded without deposit ($-42.0)");
        accountRegistry11.assignProxyToClient("CLT-c3ce9a25-7555-430c-9330-9203c36530f8", parkingSpaceProxy13);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNotNull(manager9);
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertNotNull(accountRegistry11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "disabled" + "'", str27, "disabled");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean8 = paymentManager0.refundTotalCost((double) (short) 100);
        boolean boolean13 = paymentManager0.processPayment("8ca2ec61-774c-409d-89d5-5b9171b40497", (double) 'a', "jane", "Refunded total cost of $100.0");
        boolean boolean16 = paymentManager0.refundWithoutDeposit((double) 1, 1515.0d);
        paymentManager0.paymentMessage = "";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap16 = accountRegistry14.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        java.lang.String str22 = parkingSpaceProxy18.scanSpace("empty", "hi!");
        boolean boolean32 = parkingSpaceProxy18.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy18.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean42 = parkingSpaceProxy18.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry14.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy18);
        accountRegistry6.assignProxyToManager("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        ParkingSystem.SuperManager superManager45 = ParkingSystem.SuperManager.createFromCSV("hi!", "hi!", "pass", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList46 = accountRegistry6.displayPendingValidations();
        boolean boolean52 = accountRegistry6.registerClient("4a1f2343-8b2e-4dea-ba69-efd105414390", "Paid $ 100.0 with Mobile Pay", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "Paid $ 15.0 with Mobile Pay", "Refunded total cost of $100.0");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disabled" + "'", str22, "disabled");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(superManager45);
        org.junit.Assert.assertNotNull(clientList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = null;
        accountRegistry3.assignProxyToClient("", parkingSpaceProxy8);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry3.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy12.getRegistry();
        java.lang.String str16 = parkingSpaceProxy12.scanSpace("empty", "hi!");
        boolean boolean26 = parkingSpaceProxy12.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean30 = parkingSpaceProxy12.editBooking("pass", "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 100);
        accountRegistry3.assignProxyToManager("", parkingSpaceProxy12);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Manager manager11 = superManager4.autoGenerateManager();
        java.lang.String str12 = manager11.getManagerId();
        ParkingSystem.User user13 = new ParkingSystem.User();
        java.lang.Object obj14 = user13.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = user13.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry17 = parkingSpaceProxy16.getRegistry();
        boolean boolean19 = parkingSpaceProxy16.checkIn("");
        parkingSpaceProxy16.validateClient("");
        user13.assignProxy(parkingSpaceProxy16);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = user13.parkingProxy;
        java.lang.Object obj26 = user13.login("empty", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking29 = parkingSpaceProxy27.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade30 = parkingSpaceProxy27.getFacade();
        boolean boolean32 = parkingSpaceProxy27.checkOut("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user13.parkingProxy = parkingSpaceProxy27;
        manager11.assignProxy(parkingSpaceProxy27);
        ParkingSystem.Client client35 = ParkingSystem.Client.getInstance();
        java.lang.String str36 = client35.getClientType();
        java.lang.String str37 = client35.getPassword();
        ParkingSystem.Client client38 = ParkingSystem.Client.getInstance();
        java.lang.String str39 = client38.getName();
        client38.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str48 = client38.getUsername();
        java.lang.String str49 = client38.getPassword();
        java.lang.String str50 = client38.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = null;
        client38.assignProxy(parkingSpaceProxy51);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy53 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj56 = parkingSpaceProxy53.login("empty", "Jane");
        client38.assignProxy(parkingSpaceProxy53);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy58 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj61 = parkingSpaceProxy58.login("empty", "Jane");
        parkingSpaceProxy58.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy58.displayPendingValidations();
        client38.assignProxy(parkingSpaceProxy58);
        client35.assignProxy(parkingSpaceProxy58);
        manager11.assignProxy(parkingSpaceProxy58);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(manager11);
// flaky "63) test1394(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8812812f-8c58-440e-9188-ca0b1f996ced" + "'", str12, "8812812f-8c58-440e-9188-ca0b1f996ced");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(parkingSpaceProxy15);
        org.junit.Assert.assertNotNull(accountRegistry17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(booking29);
        org.junit.Assert.assertNotNull(parkingSpaceFacade30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(client35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Paid $ 15.0 with Mobile Pay" + "'", str36, "Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "06b0adae-5a80-41cd-b7f6-6da51afdd4f5" + "'", str37, "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        org.junit.Assert.assertNotNull(client38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "4a1f2343-8b2e-4dea-ba69-efd105414390" + "'", str39, "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "disabled" + "'", str49, "disabled");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        client0.assignProxy(parkingSpaceProxy15);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade20 = parkingSpaceProxy15.getFacade();
        boolean boolean23 = parkingSpaceFacade20.extendBooking("empty", (-1));
        ParkingSystem.BookingManager bookingManager24 = parkingSpaceFacade20.getBookingManager();
        boolean boolean29 = bookingManager24.extendBooking("Refunded total cost of $0.0", (int) (byte) -1, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(parkingSpaceFacade20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(bookingManager24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean16 = debitOrCredit6.validateCard("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) (short) 1);
        boolean boolean21 = debitOrCredit6.processPayment("4c45f11e-b09a-4d81-adf1-86cfd519dc3c", (double) 100, "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "Refunded deposit of $0.0");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap12 = spaceManager0.getParkingLots();
        boolean boolean15 = spaceManager0.isSpaceAvailable("staff", (int) '4');
        spaceManager0.removeBooking("Paid $ 100.0 with Mobile Pay", (int) (byte) 0);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int29 = booking28.getDuration();
        java.lang.String str30 = booking28.getClientId();
        booking28.setCheckedIn(true);
        booking28.setStartTime("Paid $ -1.0 with Mobile Pay");
        boolean boolean35 = spaceManager0.assignBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", (int) (byte) 1, booking28);
        spaceManager0.addParkingLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "staff" + "'", str30, "staff");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.AccountRegistry accountRegistry13 = bookingManager12.getAccountRegistry();
        ParkingSystem.SpaceManager spaceManager14 = bookingManager12.getSpaceManager();
        ParkingSystem.Booking booking16 = bookingManager12.getBooking("disabled");
        double double18 = bookingManager12.getHourlyRate("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertNotNull(client0);
// flaky "64) test1398(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff" + "'", str1, "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(spaceManager14);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 15.0d + "'", double18 == 15.0d);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        java.lang.Object obj12 = parkingSpaceProxy0.login("Refunded without deposit ($0.0)", "e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        accountRegistry28.assignProxyToManager("pass", parkingSpaceProxy30);
        boolean boolean46 = parkingSpaceProxy30.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled", "Refunded total cost of $1.0", "", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy30;
        ParkingSystem.Booking booking49 = parkingSpaceProxy30.getBookingDetails("Refunded total cost of $1.0");
        boolean boolean51 = parkingSpaceProxy30.cancelBooking("tbHxuilT");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(booking49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.SpaceManager spaceManager6 = bookingManager0.getSpaceManager();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager6);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean7 = parkingSpaceFacade0.editBooking("Card number should be 16 digits", "", (int) (short) 0);
        boolean boolean17 = parkingSpaceFacade0.confirmBooking("Refunded total cost of $1.0", "Refunded without deposit ($0.0)", "jane", "Paid $ -1.0 with Mobile Pay", 1, "staff", 10, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean21 = parkingSpaceFacade0.editBooking("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786", "Paid $ 15.0 with Mobile Pay", (int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        java.lang.Object obj19 = user0.login("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "staff");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade20 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str23 = parkingSpaceFacade20.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager24 = parkingSpaceFacade20.getSpaceManager();
        spaceManager24.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap27 = spaceManager24.getParkingLots();
        user0.user = spaceManager24;
        java.lang.Object obj29 = null;
        user0.user = obj29;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy34 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry35 = parkingSpaceProxy34.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj40 = parkingSpaceProxy37.login("empty", "Jane");
        parkingSpaceProxy37.validateClient("Jane");
        parkingSpaceProxy37.toggleSpace("", "staff", false);
        accountRegistry35.assignProxyToManager("pass", parkingSpaceProxy37);
        ParkingSystem.Client client49 = accountRegistry35.getClient("");
        ParkingSystem.SuperManager superManager50 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry35);
        boolean boolean56 = accountRegistry35.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy58 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry59 = parkingSpaceProxy58.getRegistry();
        boolean boolean61 = parkingSpaceProxy58.checkIn("");
        parkingSpaceProxy58.toggleLot("", true);
        accountRegistry35.assignProxyToManager("", parkingSpaceProxy58);
        user0.parkingProxy = parkingSpaceProxy58;
        parkingSpaceProxy58.validateClient("Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str6, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertNotNull(spaceManager24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(accountRegistry35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(client49);
        org.junit.Assert.assertNotNull(superManager50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(accountRegistry59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setValidated(false);
        ParkingSystem.AccountRegistry accountRegistry7 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager8 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry7);
        java.lang.String str9 = superManager8.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = null;
        accountRegistry13.assignProxyToManager("disabled", parkingSpaceProxy16);
        superManager8.registry = accountRegistry13;
        ParkingSystem.AccountRegistry accountRegistry19 = superManager8.getRegistry();
        ParkingSystem.Manager manager20 = accountRegistry19.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy22.getRegistry();
        boolean boolean29 = parkingSpaceProxy22.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy22.toggleLot("hi!", false);
        accountRegistry19.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy22);
        parkingSpaceProxy22.toggleLot("disabled", false);
        client0.assignProxy(parkingSpaceProxy22);
        boolean boolean38 = client0.cancelBooking();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $1.0" + "'", str1, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(superManager8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(manager20);
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        ParkingSystem.CheckInManager checkInManager4 = new ParkingSystem.CheckInManager(bookingManager3);
        boolean boolean6 = checkInManager4.checkIn("hi!");
        checkInManager4.refundMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean10 = checkInManager4.checkOut("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        ParkingSystem.MobilePay mobilePay4 = new ParkingSystem.MobilePay();
        boolean boolean9 = mobilePay4.processPayment("hi!", (-1.0d), "", "");
        boolean boolean14 = mobilePay4.processPayment("staff", (double) (-1L), "disabled", "pass");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay4);
        boolean boolean20 = mobilePay4.processPayment("Paid $ 0.0 with Mobile Pay", (double) (byte) 0, "Paid $ 10.0 with Mobile Pay", "");
        boolean boolean25 = mobilePay4.processPayment("K6PkM9rcCx", (double) 100.0f, "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "09622cbf-e665-45db-b1ad-365065947a20");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        java.lang.String str9 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry10 = superManager4.registry;
        java.lang.String str11 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry12 = superManager4.getRegistry();
        java.lang.Object obj15 = accountRegistry12.login("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str11, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap19 = bookingManager18.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager18.getSpaceManager();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(spaceManager20);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        parkingLot1.setEnabled(true);
        boolean boolean9 = parkingLot1.isEnabled();
        ParkingSystem.Booking booking18 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str19 = booking18.getLotId();
        int int20 = booking18.getSpaceId();
        boolean boolean21 = parkingLot1.assignBooking((int) '4', booking18);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "jane" + "'", str19, "jane");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("CLT-c3ce9a25-7555-430c-9330-9203c36530f8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        spaceManager19.addParkingLot("Jane");
        spaceManager19.toggleSpace("ST001", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        boolean boolean36 = accountRegistry24.registerClient("staff", "staff", "pass", "disabled", "disabled");
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap37 = accountRegistry24.getManagers();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str20, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        boolean boolean10 = client0.cancelBooking();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "staff" + "'", str1, "staff");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean10 = parkingSpaceFacade0.confirmBooking("staff", "", "disabled", "hi!", (int) 'a', "jane", (int) 'a', "hi!", "");
        parkingSpaceFacade0.toggleLot("Paid $ 10.0 with Mobile Pay", true);
        java.lang.String str16 = parkingSpaceFacade0.scanSpace("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "empty");
        boolean boolean19 = parkingSpaceFacade0.extendBooking("Refunded total cost of $100.0", (int) (byte) -1);
        boolean boolean21 = parkingSpaceFacade0.checkOut("Refunded total cost of $0.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager1 = parkingSpaceFacade0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap2 = spaceManager1.getParkingLots();
        boolean boolean5 = spaceManager1.isSpaceAvailable("Refunded without deposit ($-42.0)", (int) '4');
        java.lang.String str8 = spaceManager1.scanSpace("", "433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        boolean boolean11 = spaceManager1.isSpaceAvailable("13b04414-31a5-407f-8ea3-fba4613c73d1", 3);
        org.junit.Assert.assertNotNull(spaceManager1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean11 = bookingManager0.confirmBooking("Refunded total cost of $0.0", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "tbHxuilT", "Jane", 52, "Paid $ 100.0 with Mobile Pay", 2, "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "pass");
        boolean boolean13 = bookingManager0.cancelBooking("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        superManager18.assignProxy(parkingSpaceProxy19);
        ParkingSystem.AccountRegistry accountRegistry21 = superManager18.getRegistry();
        int int22 = accountRegistry21.getManagersSize();
        ParkingSystem.Client client24 = accountRegistry21.getClient("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj29 = parkingSpaceProxy26.login("empty", "Jane");
        parkingSpaceProxy26.validateClient("Jane");
        parkingSpaceProxy26.toggleSpace("", "staff", false);
        boolean boolean37 = parkingSpaceProxy26.cancelBooking("");
        parkingSpaceProxy26.toggleLot("Paid $ 10.0 with Mobile Pay", true);
        boolean boolean43 = parkingSpaceProxy26.extendBooking("Paid $ 100.0 with Mobile Pay", 1);
        accountRegistry21.assignProxyToManager("FNuxCiXmkP", parkingSpaceProxy26);
        boolean boolean46 = parkingSpaceProxy26.cancelBooking("Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(client24);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.util.List<java.lang.String[]> strArrayList7 = cSVManager0.readCSV("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff");
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        ParkingSystem.SpaceManager spaceManager47 = new ParkingSystem.SpaceManager();
        boolean boolean50 = spaceManager47.isSpaceAvailable("hi!", (int) '#');
        spaceManager47.toggleLot("disabled", false);
        ParkingSystem.Booking booking63 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean64 = spaceManager47.assignBooking("empty", (int) (short) 0, booking63);
        ParkingSystem.SpaceManager spaceManager67 = new ParkingSystem.SpaceManager();
        boolean boolean70 = spaceManager67.isSpaceAvailable("hi!", (int) '#');
        spaceManager67.toggleLot("disabled", false);
        ParkingSystem.Booking booking83 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean84 = spaceManager67.assignBooking("empty", (int) (short) 0, booking83);
        boolean boolean85 = spaceManager47.assignBooking("disabled", (int) (byte) 0, booking83);
        boolean boolean86 = parkingSpace25.assignBooking(booking83);
        java.lang.String str87 = booking83.getLotId();
        boolean boolean88 = parkingSpace11.assignBooking(booking83);
        java.lang.String str89 = booking83.getLotId();
        booking83.setStartTime("02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "jane" + "'", str87, "jane");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "jane" + "'", str89, "jane");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj12 = parkingSpaceProxy9.login("empty", "Jane");
        parkingSpaceProxy9.validateClient("Jane");
        parkingSpaceProxy9.toggleSpace("", "staff", false);
        boolean boolean20 = parkingSpaceProxy9.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy9);
        int int22 = accountRegistry3.getManagersSize();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap23 = accountRegistry3.getManagers();
        ParkingSystem.Client client25 = accountRegistry3.getClient("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(client25);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        boolean boolean5 = checkInManager1.checkIn("jane");
        boolean boolean7 = checkInManager1.checkOut("Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        superManager18.assignProxy(parkingSpaceProxy19);
        ParkingSystem.AccountRegistry accountRegistry21 = superManager18.getRegistry();
        ParkingSystem.AccountRegistry accountRegistry22 = superManager18.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean25 = parkingSpaceProxy23.cancelBooking("pass");
        parkingSpaceProxy23.addParkingLot("pass");
        boolean boolean29 = parkingSpaceProxy23.checkIn("Paid $ 100.0 with Mobile Pay");
        boolean boolean35 = parkingSpaceProxy23.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Refunded without deposit ($-42.0)", "Paid $ 0.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled");
        superManager18.assignProxy(parkingSpaceProxy23);
        superManager18.validateClient("tbHxuilT");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertNotNull(accountRegistry22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("hi!", "disabled");
        spaceManager0.toggleSpace("Paid $ 10.0 with Mobile Pay", "hi!", true);
        java.lang.String str13 = spaceManager0.scanSpace("CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753", "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disabled" + "'", str13, "disabled");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        parkingSpace11.removeBooking();
        ParkingSystem.Booking booking16 = parkingSpace11.getCurrentBooking();
        int int17 = parkingSpace11.getSpaceId();
        boolean boolean18 = parkingSpace11.isAvailable();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        parkingSpaceProxy2.autoGenerateManager();
        boolean boolean26 = parkingSpaceProxy2.confirmBooking("Refunded without deposit ($-42.0)", "disabled", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) (short) 1, "empty", (int) (short) 1, "Card number should be 16 digits", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        parkingSpaceProxy2.toggleLot("Refunded total cost of $100.0", true);
        parkingSpaceProxy2.toggleSpace("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "9fJ5pCUl", false);
        boolean boolean43 = parkingSpaceProxy2.confirmBooking("CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753", "CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "Jane", "", (int) (short) 1, "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", 32, "Refunded total cost of $100.0", "Jane");
        boolean boolean45 = parkingSpaceProxy2.cancelBooking("02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        java.lang.Object obj17 = accountRegistry8.login("ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        int int18 = accountRegistry8.getManagersSize();
        ParkingSystem.Manager manager19 = accountRegistry8.autoGenerateManager();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(manager19);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
// flaky "65) test1427(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        ParkingSystem.MobilePay mobilePay1 = new ParkingSystem.MobilePay();
        boolean boolean6 = mobilePay1.processPayment("hi!", (-1.0d), "", "");
        boolean boolean11 = mobilePay1.processPayment("hi!", (double) 100, "jane", "disabled");
        java.lang.String str12 = mobilePay1.getPaymentMessage();
        boolean boolean17 = mobilePay1.processPayment("Refunded without deposit ($0.0)", (double) (-1L), "Refunded total cost of $1.0", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean22 = mobilePay1.processPayment("Paid $ 100.0 with Mobile Pay", 165.0d, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay1);
        paymentManager0.refundMessage = "pass";
        java.lang.String str26 = paymentManager0.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str12, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "pass" + "'", str26, "pass");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        boolean boolean4 = client0.extendBooking(100);
        java.lang.String str5 = client0.getName();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry5 = superManager4.getRegistry();
        java.util.List<ParkingSystem.Client> clientList6 = accountRegistry5.displayPendingValidations();
        java.util.List<ParkingSystem.Client> clientList7 = accountRegistry5.displayPendingValidations();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry5.loadManagersFromCSV();
// flaky "66) test1430(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertNotNull(clientList6);
        org.junit.Assert.assertNotNull(clientList7);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean13 = bookingManager0.confirmBooking("empty", "Jane", "disabled", "pass", (int) (byte) 0, "hi!", (int) 'a', "hi!", "");
        double double15 = bookingManager0.getHourlyRate("Jane");
        boolean boolean20 = bookingManager0.extendBooking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", (int) (byte) 10, "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        ParkingSystem.Booking booking22 = bookingManager0.getBooking("hi!");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(booking22);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        boolean boolean11 = client0.cancelBooking();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry3);
        java.lang.String str5 = superManager4.getName();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        ParkingSystem.AccountRegistry accountRegistry11 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry11);
        java.lang.String str13 = superManager12.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry14 = superManager12.registry;
        java.lang.String str15 = superManager12.getManagerId();
        ParkingSystem.Client client16 = ParkingSystem.Client.getInstance();
        java.lang.String str17 = client16.getName();
        client16.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry21 = parkingSpaceProxy20.getRegistry();
        boolean boolean23 = parkingSpaceProxy20.checkIn("");
        client16.assignProxy(parkingSpaceProxy20);
        boolean boolean25 = client16.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        client16.assignProxy(parkingSpaceProxy26);
        superManager12.assignProxy(parkingSpaceProxy26);
        boolean boolean38 = parkingSpaceProxy26.confirmBooking("Paid $ 100.0 with Mobile Pay", "", "Paid $ -1.0 with Mobile Pay", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 0, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 32, "ST001", "Refunded total cost of $1.0");
        accountRegistry6.assignProxyToClient("Refunded without deposit ($-96.0)", parkingSpaceProxy26);
        ParkingSystem.Client client41 = accountRegistry6.getClient("e8686ac8-1df7-4a9b-b299-8fbcdd585528");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str13, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str15, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client16);
// flaky "67) test1433(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(client41);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        boolean boolean12 = client0.checkOut();
        org.junit.Assert.assertNotNull(client0);
// flaky "68) test1434(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "27) test1434(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Refunded total cost of $1.0" + "'", str10, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        boolean boolean6 = parkingSpaceProxy3.checkIn("");
        parkingSpaceProxy3.validateClient("");
        user0.assignProxy(parkingSpaceProxy3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = user0.parkingProxy;
        ParkingSystem.Client client11 = ParkingSystem.Client.getInstance();
        java.lang.String str12 = client11.getName();
        client11.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry16 = parkingSpaceProxy15.getRegistry();
        boolean boolean18 = parkingSpaceProxy15.checkIn("");
        client11.assignProxy(parkingSpaceProxy15);
        boolean boolean20 = client11.cancelBooking();
        java.lang.String str21 = client11.getExtraId();
        java.lang.String str22 = client11.getName();
        java.lang.String str23 = client11.getName();
        boolean boolean24 = client11.checkIn();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean27 = parkingSpaceProxy25.cancelBooking("pass");
        parkingSpaceProxy25.toggleSpace("jane", "Paid $ -1.0 with Mobile Pay", false);
        boolean boolean33 = parkingSpaceProxy25.checkOut("Paid $ 0.0 with Mobile Pay");
        boolean boolean37 = parkingSpaceProxy25.editBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0);
        client11.assignProxy(parkingSpaceProxy25);
        boolean boolean46 = client11.confirmBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "Refunded total cost of $100.0", (int) (byte) 100, "Paid $ 10.0 with Mobile Pay", (-1), "disabled", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        user0.user = "Refunded total cost of $100.0";
        user0.register("Refunded without deposit ($-15.0)", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy10);
        org.junit.Assert.assertNotNull(client11);
// flaky "69) test1435(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertNotNull(accountRegistry16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky "28) test1435(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Refunded total cost of $1.0" + "'", str21, "Refunded total cost of $1.0");
// flaky "13) test1435(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "empty" + "'", str22, "empty");
// flaky "6) test1435(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "empty" + "'", str23, "empty");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace(1);
        parkingSpace1.removeBooking();
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace((int) ' ');
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Card number should be 16 digits");
        java.lang.String[] strArray5 = cSVManager0.loadSuperManager();
        ParkingSystem.SpaceManager spaceManager6 = new ParkingSystem.SpaceManager();
        spaceManager6.removeBooking("hi!", (int) (byte) 0);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap10 = spaceManager6.getParkingLots();
        cSVManager0.saveParkingLots(strMap10);
        java.lang.String[] strArray12 = cSVManager0.loadSuperManager();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList13 = cSVManager0.loadManagers();
// flaky "70) test1438(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArray5);
// flaky "29) test1438(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray5, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strArray12);
// flaky "14) test1438(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray12, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Paid $ 100.0 with Mobile Pay", false);
        boolean boolean21 = parkingSpaceFacade0.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "4a1f2343-8b2e-4dea-ba69-efd105414390", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "", (int) (byte) 1, "pass", (int) (byte) 10, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "Paid $ 100.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager22 = parkingSpaceFacade0.getBookingManager();
        ParkingSystem.Booking booking24 = bookingManager22.getBooking("FNuxCiXmkP");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bookingManager22);
        org.junit.Assert.assertNull(booking24);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.lang.String str8 = superManager7.getManagerId();
        java.lang.String str9 = superManager7.getManagerId();
        ParkingSystem.Manager manager10 = superManager7.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry11 = superManager7.registry;
        java.lang.String str12 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager7.registry;
        java.lang.String str14 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry15 = superManager7.getRegistry();
        accountRegistry15.validateClient("CLT-92729d37-9255-42b4-9361-c1978aadacb0");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", accountRegistry15);
        ParkingSystem.AccountRegistry accountRegistry19 = superManager18.getRegistry();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str8, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager10);
        org.junit.Assert.assertNotNull(accountRegistry11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str12, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str14, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry19);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        parkingLot1.setEnabled(true);
        parkingLot1.removeBooking((int) (short) 10);
        ParkingSystem.ParkingLotIterator parkingLotIterator11 = parkingLot1.getIterator();
        boolean boolean12 = parkingLotIterator11.hasNext();
        ParkingSystem.ParkingSpace parkingSpace13 = parkingLotIterator11.next();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpace13);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        boolean boolean21 = parkingSpaceProxy9.editBooking("empty", "Refunded without deposit ($0.0)", 100);
        parkingSpaceProxy9.autoGenerateManager();
        boolean boolean24 = parkingSpaceProxy9.checkOut("4a1f2343-8b2e-4dea-ba69-efd105414390");
        java.lang.String str27 = parkingSpaceProxy9.scanSpace("Paid $ 0.0 with Mobile Pay", "pass");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade28 = parkingSpaceProxy9.getFacade();
        java.lang.Object obj31 = parkingSpaceProxy9.login("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "83a51dc6-0c8f-4f21-ae40-68699828f95d");
        parkingSpaceProxy9.autoGenerateManager();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded without deposit ($-15.0)" + "'", str6, "Refunded without deposit ($-15.0)");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "disabled" + "'", str27, "disabled");
        org.junit.Assert.assertNotNull(parkingSpaceFacade28);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user0.assignProxy(parkingSpaceProxy30);
        parkingSpaceProxy30.addParkingLot("4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNotNull(client20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Refunded without deposit ($-15.0)" + "'", str21, "Refunded without deposit ($-15.0)");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.AccountRegistry accountRegistry25 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager26 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry25);
        boolean boolean28 = accountRegistry25.requiresValidation("disabled");
        int int29 = accountRegistry25.getManagersSize();
        ParkingSystem.SuperManager superManager30 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry25);
        ParkingSystem.AccountRegistry accountRegistry31 = superManager30.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry34 = parkingSpaceProxy33.getRegistry();
        boolean boolean40 = parkingSpaceProxy33.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean44 = parkingSpaceProxy33.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean54 = parkingSpaceProxy33.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry31.assignProxyToManager("empty", parkingSpaceProxy33);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy57 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade58 = parkingSpaceProxy57.getFacade();
        accountRegistry31.assignProxyToManager("", parkingSpaceProxy57);
        parkingSpaceProxy57.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean63 = parkingSpaceProxy57.cancelBooking("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry64 = parkingSpaceProxy57.getRegistry();
        accountRegistry64.validateClient("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        superManager18.registry = accountRegistry64;
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(superManager26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(superManager30);
        org.junit.Assert.assertNotNull(accountRegistry31);
        org.junit.Assert.assertNotNull(accountRegistry34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(accountRegistry64);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        java.lang.String str2 = client0.getClientId();
        java.lang.String str3 = client0.getClientType();
        ParkingSystem.AccountRegistry accountRegistry7 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager8 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry7);
        java.lang.String str9 = superManager8.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = null;
        accountRegistry13.assignProxyToManager("disabled", parkingSpaceProxy16);
        superManager8.registry = accountRegistry13;
        ParkingSystem.AccountRegistry accountRegistry19 = superManager8.getRegistry();
        ParkingSystem.Manager manager20 = accountRegistry19.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy22.getRegistry();
        boolean boolean29 = parkingSpaceProxy22.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy22.toggleLot("hi!", false);
        accountRegistry19.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy22);
        parkingSpaceProxy22.toggleLot("disabled", false);
        client0.assignProxy(parkingSpaceProxy22);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
// flaky "71) test1445(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CLT-2d7011d7-cb71-4953-84cc-0d7adf2da0d4" + "'", str2, "CLT-2d7011d7-cb71-4953-84cc-0d7adf2da0d4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "empty" + "'", str3, "empty");
        org.junit.Assert.assertNotNull(superManager8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str9, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(manager20);
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Card number should be 16 digits");
        java.lang.String[] strArray5 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray7 = cSVManager0.loadSuperManager();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArray5);
// flaky "72) test1446(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray5, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray6);
// flaky "30) test1446(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray7);
// flaky "15) test1446(RegressionTest2)":         org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("disabled", "staff", "staff", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry9 = parkingSpaceProxy8.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj14 = parkingSpaceProxy11.login("empty", "Jane");
        parkingSpaceProxy11.validateClient("Jane");
        parkingSpaceProxy11.toggleSpace("", "staff", false);
        accountRegistry9.assignProxyToManager("pass", parkingSpaceProxy11);
        ParkingSystem.Client client23 = accountRegistry9.getClient("");
        ParkingSystem.SuperManager superManager24 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry9);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry26 = superManager4.getRegistry();
        ParkingSystem.Manager manager27 = accountRegistry26.autoGenerateManager();
        java.lang.String str28 = manager27.getManagerId();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(accountRegistry9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(client23);
        org.junit.Assert.assertNotNull(superManager24);
        org.junit.Assert.assertNotNull(accountRegistry26);
        org.junit.Assert.assertNotNull(manager27);
// flaky "73) test1447(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "aa9c00f6-ec11-46c5-a72b-a7f620703e51" + "'", str28, "aa9c00f6-ec11-46c5-a72b-a7f620703e51");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        java.lang.String str7 = paymentManager0.refundMessage;
        boolean boolean9 = paymentManager0.refundTotalCost((double) 2);
        boolean boolean11 = paymentManager0.refundTotalCost((double) '#');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Refunded total cost of $1.0" + "'", str7, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        boolean boolean9 = accountRegistry3.requiresValidation("disabled");
        java.lang.Object obj12 = accountRegistry3.login("jane", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.CheckInManager checkInManager4 = parkingSpaceFacade0.getCheckInManager();
        java.lang.String str5 = checkInManager4.refundMessage;
        boolean boolean7 = checkInManager4.checkOut("CLT-55105d92-54d6-44d2-965a-736022b7f7cd");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(checkInManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap4 = bookingManager0.getActiveBookings();
        boolean boolean9 = bookingManager0.extendBooking("", (int) ' ', "", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        ParkingSystem.CheckInManager checkInManager10 = new ParkingSystem.CheckInManager(bookingManager0);
        java.lang.String str11 = checkInManager10.refundMessage;
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.MobilePay mobilePay16 = new ParkingSystem.MobilePay();
        boolean boolean21 = mobilePay16.processPayment("disabled", 10.0d, "disabled", "disabled");
        boolean boolean26 = mobilePay16.processPayment("jane", 15.0d, "jane", "");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay16);
        ParkingSystem.BookingManager bookingManager28 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager29 = new ParkingSystem.CheckInManager(bookingManager28);
        ParkingSystem.Booking booking31 = bookingManager28.getBooking("");
        ParkingSystem.SpaceManager spaceManager32 = bookingManager28.getSpaceManager();
        boolean boolean42 = bookingManager28.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double44 = bookingManager28.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit45 = new ParkingSystem.DebitOrCredit();
        bookingManager28.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit45);
        java.lang.String str47 = debitOrCredit45.getPaymentMessage();
        java.lang.String str48 = debitOrCredit45.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit45);
        boolean boolean54 = debitOrCredit45.processPayment("CLT-631eb509-a6c4-407c-b16d-582a6faabddb", (double) (short) 1, "83a51dc6-0c8f-4f21-ae40-68699828f95d", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertNotNull(spaceManager32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 15.0d + "'", double44 == 15.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        java.lang.String str7 = mobilePay0.getPaymentMessage();
        java.lang.String str8 = mobilePay0.getPaymentMessage();
        java.lang.String str9 = mobilePay0.getPaymentMessage();
        boolean boolean14 = mobilePay0.processPayment("3b453211-7dd1-4452-8741-a206711c1217", 30.0d, "9fJ5pCUl", "CLT-55105d92-54d6-44d2-965a-736022b7f7cd");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str7, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str8, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str9, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.loadParkingLots();
        spaceManager0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        spaceManager0.toggleSpace("", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", false);
        spaceManager0.removeBooking("02659ad3-0b5c-4c48-a915-a466f2b50775", 2);
        boolean boolean17 = spaceManager0.isSpaceAvailable("h40rNQ7kR1", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        java.lang.String str2 = client0.getClientId();
        boolean boolean3 = client0.checkOut();
        client0.setValidated(true);
        ParkingSystem.Booking booking6 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
// flaky "74) test1455(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CLT-df8d594d-9b12-496d-b1b5-eec06c37337a" + "'", str2, "CLT-df8d594d-9b12-496d-b1b5-eec06c37337a");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(booking6);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        java.lang.Object obj18 = user0.user;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jane" + "'", str3, "jane");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        java.lang.String str6 = superManager4.getPassword();
        superManager4.setManagerInfo("Paid $ -1.0 with Mobile Pay", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Card number should be 16 digits");
        java.lang.String str11 = superManager4.getName();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded total cost of $1.0" + "'", str6, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9701df9a-2178-4ad5-8076-46ff5f05b3e8" + "'", str11, "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(true);
        boolean boolean5 = client0.cancelBooking();
        boolean boolean6 = client0.checkIn();
        java.lang.String str7 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str1, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getUsername();
        java.lang.String str15 = client0.getPassword();
        java.lang.String str16 = client0.getUsername();
        boolean boolean24 = client0.confirmBooking("", "Refunded total cost of $0.0", 3, "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", 100, "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", "Refunded deposit of $0.0");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking11 = parkingSpace10.getCurrentBooking();
        parkingSpace10.removeBooking();
        ParkingSystem.Booking booking13 = parkingSpace10.getCurrentBooking();
        int int14 = parkingSpace10.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        java.lang.Object obj19 = user0.login("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "staff");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade20 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str23 = parkingSpaceFacade20.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager24 = parkingSpaceFacade20.getSpaceManager();
        spaceManager24.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap27 = spaceManager24.getParkingLots();
        user0.user = spaceManager24;
        java.lang.Object obj29 = null;
        user0.user = obj29;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy34 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry35 = parkingSpaceProxy34.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj40 = parkingSpaceProxy37.login("empty", "Jane");
        parkingSpaceProxy37.validateClient("Jane");
        parkingSpaceProxy37.toggleSpace("", "staff", false);
        accountRegistry35.assignProxyToManager("pass", parkingSpaceProxy37);
        ParkingSystem.Client client49 = accountRegistry35.getClient("");
        ParkingSystem.SuperManager superManager50 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry35);
        boolean boolean56 = accountRegistry35.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy58 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry59 = parkingSpaceProxy58.getRegistry();
        boolean boolean61 = parkingSpaceProxy58.checkIn("");
        parkingSpaceProxy58.toggleLot("", true);
        accountRegistry35.assignProxyToManager("", parkingSpaceProxy58);
        user0.parkingProxy = parkingSpaceProxy58;
        java.lang.Object obj69 = user0.login("CLT-035180a0-4707-410d-a011-2a4f0f46838b", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertNotNull(spaceManager24);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(accountRegistry35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(client49);
        org.junit.Assert.assertNotNull(superManager50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(accountRegistry59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.Enabled enabled3 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot5 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking7 = null;
        boolean boolean8 = parkingLot5.assignBooking(0, booking7);
        boolean boolean10 = parkingLot5.isSpaceAvailable((int) '#');
        boolean boolean12 = parkingLot5.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace14 = parkingLot5.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking15 = parkingSpace14.getCurrentBooking();
        parkingSpace14.removeBooking();
        java.lang.String str17 = enabled3.scanSpace(parkingSpace14);
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean26 = parkingLot19.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace28 = parkingLot19.getParkingSpace((int) (byte) 10);
        int int29 = parkingSpace28.getSpaceId();
        ParkingSystem.Booking booking30 = parkingSpace28.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager31 = new ParkingSystem.SpaceManager();
        boolean boolean34 = spaceManager31.isSpaceAvailable("hi!", (int) '#');
        spaceManager31.toggleLot("disabled", false);
        ParkingSystem.Booking booking47 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean48 = spaceManager31.assignBooking("empty", (int) (short) 0, booking47);
        boolean boolean49 = parkingSpace28.assignBooking(booking47);
        java.lang.String str50 = enabled3.scanSpace(parkingSpace28);
        java.lang.String str51 = disabled0.scanSpace(parkingSpace28);
        ParkingSystem.Booking booking52 = parkingSpace28.getCurrentBooking();
        int int53 = parkingSpace28.getSpaceId();
        boolean boolean54 = parkingSpace28.isAvailable();
        ParkingSystem.Booking booking55 = parkingSpace28.getCurrentBooking();
        boolean boolean56 = booking55.isCheckedIn();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime57 = booking55.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(parkingSpace14);
        org.junit.Assert.assertNull(booking15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disabled" + "'", str51, "disabled");
        org.junit.Assert.assertNotNull(booking52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booking55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.SpaceManager spaceManager18 = parkingSpaceFacade17.getSpaceManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        boolean boolean22 = parkingSpaceFacade17.extendBooking("Paid $ 100.0 with Mobile Pay", 3);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(spaceManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(true);
        boolean boolean5 = client0.cancelBooking();
        java.lang.String str6 = client0.getClientId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str1, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Refunded total cost of $1.0" + "'", str2, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky "75) test1464(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-08489cd1-5899-4594-ad65-2f6dcf0a9e5d" + "'", str6, "CLT-08489cd1-5899-4594-ad65-2f6dcf0a9e5d");
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.SpaceManager spaceManager15 = new ParkingSystem.SpaceManager();
        boolean boolean18 = spaceManager15.isSpaceAvailable("hi!", (int) '#');
        spaceManager15.toggleLot("disabled", false);
        ParkingSystem.Booking booking31 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean32 = spaceManager15.assignBooking("empty", (int) (short) 0, booking31);
        java.lang.String str33 = booking31.getClientId();
        boolean boolean34 = parkingSpace10.assignBooking(booking31);
        parkingSpace10.removeBooking();
        ParkingSystem.SpaceState spaceState36 = parkingSpace10.getState();
        ParkingSystem.Booking booking37 = parkingSpace10.getCurrentBooking();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "staff" + "'", str33, "staff");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(spaceState36);
        org.junit.Assert.assertNull(booking37);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        boolean boolean25 = accountRegistry4.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean30 = parkingSpaceProxy27.checkIn("");
        parkingSpaceProxy27.toggleLot("", true);
        accountRegistry4.assignProxyToManager("", parkingSpaceProxy27);
        accountRegistry4.validateClient("Paid $ 0.0 with Mobile Pay");
        java.lang.Object obj39 = accountRegistry4.login("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        accountRegistry4.validateClient("fhd49ADb");
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        boolean boolean10 = mobilePay0.processPayment("disabled", (double) (-1), "hi!", "hi!");
        boolean boolean15 = mobilePay0.processPayment("4c45f11e-b09a-4d81-adf1-86cfd519dc3c", (double) (short) 10, "3b453211-7dd1-4452-8741-a206711c1217", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        boolean boolean5 = bookingManager0.extendBooking("jane", (int) (short) -1, "", "Paid $ 10.0 with Mobile Pay");
        double double7 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.CheckInManager checkInManager8 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean18 = bookingManager0.confirmBooking("3b453211-7dd1-4452-8741-a206711c1217", "TXCrKOGD", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", 52, "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 1, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "86z9Z9e0MN");
        ParkingSystem.Client client19 = ParkingSystem.Client.getInstance();
        java.lang.String str20 = client19.getName();
        client19.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry24 = parkingSpaceProxy23.getRegistry();
        boolean boolean26 = parkingSpaceProxy23.checkIn("");
        client19.assignProxy(parkingSpaceProxy23);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade28 = parkingSpaceProxy23.getFacade();
        boolean boolean30 = parkingSpaceFacade28.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager31 = parkingSpaceFacade28.getBookingManager();
        ParkingSystem.PaymentManager paymentManager32 = new ParkingSystem.PaymentManager();
        paymentManager32.paymentMessage = "staff";
        boolean boolean36 = paymentManager32.refundTotalCost((double) (short) 0);
        boolean boolean38 = paymentManager32.refundTotalCost((double) (byte) 100);
        paymentManager32.paymentMessage = "";
        ParkingSystem.BookingManager bookingManager41 = new ParkingSystem.BookingManager();
        double double44 = bookingManager41.calculateCost("", 0);
        double double46 = bookingManager41.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager47 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager48 = new ParkingSystem.CheckInManager(bookingManager47);
        ParkingSystem.SpaceManager spaceManager49 = bookingManager47.getSpaceManager();
        double double52 = bookingManager47.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit53 = new ParkingSystem.DebitOrCredit();
        bookingManager47.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit53);
        boolean boolean59 = debitOrCredit53.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager41.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit53);
        boolean boolean65 = debitOrCredit53.processPayment("Paid $ 0.0 with Mobile Pay", 15.0d, "", "Paid $ 0.0 with Mobile Pay");
        paymentManager32.setStrategy((ParkingSystem.Strategy) debitOrCredit53);
        bookingManager31.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit53);
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 15.0d + "'", double7 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(client19);
// flaky "76) test1468(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "empty" + "'", str20, "empty");
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bookingManager31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 15.0d + "'", double44 == 15.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 15.0d + "'", double46 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 165.0d + "'", double52 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.loadParkingLots();
        spaceManager0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        spaceManager0.toggleSpace("", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", false);
        java.lang.String str14 = spaceManager0.scanSpace("8812812f-8c58-440e-9188-ca0b1f996ced", "e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        boolean boolean3 = parkingLotIterator2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            ParkingSystem.ParkingSpace parkingSpace4 = parkingLotIterator2.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.User user21 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("");
        user21.assignProxy(parkingSpaceProxy22);
        user0.user = parkingSpaceProxy22;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = user0.parkingProxy;
        java.lang.Object obj37 = user0.user;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy36);
        org.junit.Assert.assertNotNull(obj37);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        ParkingSystem.AccountRegistry accountRegistry21 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry21);
        java.lang.String str23 = superManager22.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        accountRegistry27.assignProxyToManager("disabled", parkingSpaceProxy30);
        superManager22.registry = accountRegistry27;
        ParkingSystem.AccountRegistry accountRegistry36 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry36);
        java.lang.String str38 = superManager37.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry42 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager43 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry42);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = null;
        accountRegistry42.assignProxyToManager("disabled", parkingSpaceProxy45);
        superManager37.registry = accountRegistry42;
        superManager22.registry = accountRegistry42;
        java.util.List<ParkingSystem.Client> clientList49 = accountRegistry42.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry52 = parkingSpaceProxy51.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy54 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj57 = parkingSpaceProxy54.login("empty", "Jane");
        parkingSpaceProxy54.validateClient("Jane");
        parkingSpaceProxy54.toggleSpace("", "staff", false);
        accountRegistry52.assignProxyToManager("pass", parkingSpaceProxy54);
        accountRegistry42.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy54);
        user0.assignProxy(parkingSpaceProxy54);
        user0.register("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d", "Refunded without deposit ($-42.0)", "e578d6f7-8a26-46f0-8e2f-f3b1be5242ca");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
// flaky "77) test1472(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "empty" + "'", str3, "empty");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str23, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str38, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager43);
        org.junit.Assert.assertNotNull(clientList49);
        org.junit.Assert.assertNotNull(accountRegistry52);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        boolean boolean7 = paymentManager0.refundDeposit((double) ' ');
        boolean boolean10 = paymentManager0.refundWithoutDeposit((double) (byte) -1, (double) (byte) 100);
        boolean boolean12 = paymentManager0.refundDeposit((double) 0L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        boolean boolean5 = parkingSpaceFacade0.checkOut("disabled");
        ParkingSystem.SpaceManager spaceManager6 = parkingSpaceFacade0.getSpaceManager();
        spaceManager6.loadParkingLots();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(spaceManager6);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceFacade0.addParkingLot("hi!");
        ParkingSystem.CheckInManager checkInManager6 = parkingSpaceFacade0.getCheckInManager();
        java.lang.String str7 = checkInManager6.refundMessage;
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(checkInManager6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.refundMessage = "disabled";
        boolean boolean10 = paymentManager0.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        paymentManager0.paymentMessage = "";
        paymentManager0.refundMessage = "06b0adae-5a80-41cd-b7f6-6da51afdd4f5";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        java.lang.String str7 = paymentManager0.refundMessage;
        boolean boolean9 = paymentManager0.refundTotalCost((double) (short) 100);
        boolean boolean11 = paymentManager0.refundTotalCost(0.0d);
        paymentManager0.refundMessage = "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Refunded total cost of $1.0" + "'", str7, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.AccountRegistry accountRegistry15 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry15);
        java.lang.String str17 = superManager16.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry21 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry21);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = null;
        accountRegistry21.assignProxyToManager("disabled", parkingSpaceProxy24);
        superManager16.registry = accountRegistry21;
        ParkingSystem.AccountRegistry accountRegistry27 = superManager16.getRegistry();
        ParkingSystem.Manager manager28 = accountRegistry27.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry31 = parkingSpaceProxy30.getRegistry();
        boolean boolean37 = parkingSpaceProxy30.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy30.toggleLot("hi!", false);
        accountRegistry27.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy30);
        ParkingSystem.User user43 = new ParkingSystem.User();
        java.lang.Object obj44 = user43.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj48 = parkingSpaceProxy45.login("empty", "Jane");
        parkingSpaceProxy45.validateClient("Jane");
        java.lang.String str53 = parkingSpaceProxy45.scanSpace("", "");
        parkingSpaceProxy45.toggleSpace("", "disabled", true);
        user43.parkingProxy = parkingSpaceProxy45;
        ParkingSystem.ParkingLot parkingLot60 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator61 = parkingLot60.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator62 = parkingLot60.getIterator();
        user43.user = parkingLot60;
        ParkingSystem.User user64 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy65 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj68 = parkingSpaceProxy65.login("empty", "Jane");
        parkingSpaceProxy65.validateClient("Jane");
        parkingSpaceProxy65.toggleSpace("", "staff", false);
        boolean boolean76 = parkingSpaceProxy65.cancelBooking("");
        user64.assignProxy(parkingSpaceProxy65);
        user43.user = parkingSpaceProxy65;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy79 = user43.parkingProxy;
        parkingSpaceProxy79.addParkingLot("pass");
        accountRegistry27.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy79);
        accountRegistry6.assignProxyToClient("13b04414-31a5-407f-8ea3-fba4613c73d1", parkingSpaceProxy79);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry6.loadManagersFromCSV();
// flaky "78) test1478(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str17, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager22);
        org.junit.Assert.assertNotNull(accountRegistry27);
        org.junit.Assert.assertNotNull(manager28);
        org.junit.Assert.assertNotNull(accountRegistry31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "disabled" + "'", str53, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator61);
        org.junit.Assert.assertNotNull(parkingLotIterator62);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy79);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap1 = bookingManager0.getActiveBookings();
        boolean boolean3 = bookingManager0.cancelBooking("CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        java.lang.String str48 = parkingSpace25.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disabled" + "'", str48, "disabled");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean8 = booking7.isCheckedIn();
        booking7.setStartTime("ST001");
        booking7.setCheckedIn(false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("disabled", "staff", "staff", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        java.lang.String str10 = parkingSpaceProxy6.scanSpace("empty", "hi!");
        parkingSpaceProxy6.addParkingLot("empty");
        parkingSpaceProxy6.addParkingLot("");
        superManager4.assignProxy(parkingSpaceProxy6);
        ParkingSystem.Manager manager16 = superManager4.autoGenerateManager();
        java.lang.String str17 = manager16.getPassword();
// flaky "79) test1482(RegressionTest2)":         manager16.displayPendingValidations();
        manager16.setManagerInfo("CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c", "I673kmcH", "staff");
// flaky "31) test1482(RegressionTest2)":         manager16.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(manager16);
// flaky "16) test1482(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ua4ppOLtSl" + "'", str17, "ua4ppOLtSl");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager18);
        ParkingSystem.SpaceManager spaceManager22 = bookingManager18.getSpaceManager();
        boolean boolean27 = bookingManager18.extendBooking("Jane", (-1), "83a51dc6-0c8f-4f21-ae40-68699828f95d", "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(spaceManager22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = null;
        accountRegistry3.assignProxyToClient("", parkingSpaceProxy8);
        java.lang.Class<?> wildcardClass10 = accountRegistry3.getClass();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean9 = parkingLot1.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator10 = parkingLot1.getIterator();
        ParkingSystem.Booking booking19 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int20 = booking19.getDuration();
        java.lang.String str21 = booking19.getClientId();
        booking19.setStartTime("hi!");
        boolean boolean24 = booking19.isCheckedIn();
        java.lang.String str25 = booking19.getLotId();
        boolean boolean26 = parkingLot1.assignBooking((int) '#', booking19);
        boolean boolean28 = parkingLot1.isSpaceAvailable(0);
        ParkingSystem.SpaceManager spaceManager30 = new ParkingSystem.SpaceManager();
        boolean boolean33 = spaceManager30.isSpaceAvailable("hi!", (int) '#');
        spaceManager30.toggleLot("disabled", false);
        java.lang.String str39 = spaceManager30.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str42 = spaceManager30.scanSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Card number should be 16 digits");
        ParkingSystem.Booking booking52 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double53 = booking52.getTotalCost();
        boolean boolean54 = spaceManager30.assignBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0, booking52);
        boolean boolean55 = parkingLot1.assignBooking((int) (short) 0, booking52);
        java.lang.String str56 = booking52.getStartTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "staff" + "'", str21, "staff");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jane" + "'", str25, "jane");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "disabled" + "'", str39, "disabled");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "disabled" + "'", str42, "disabled");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Jane" + "'", str56, "Jane");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        java.lang.Object obj15 = accountRegistry12.login("disabled", "pass");
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.toggleSpace("empty", "Paid $ 10.0 with Mobile Pay", false);
        accountRegistry12.assignProxyToClient("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", parkingSpaceProxy32);
        accountRegistry12.validateClient("Refunded total cost of $100.0");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.Client client9 = ParkingSystem.Client.getInstance();
        java.lang.String str10 = client9.getName();
        client9.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str19 = client9.getUsername();
        java.lang.String str20 = client9.getPassword();
        java.lang.String str21 = client9.getUsername();
        cSVManager0.saveClient(client9);
        ParkingSystem.Client client23 = ParkingSystem.Client.getInstance();
        java.lang.String str24 = client23.getName();
        client23.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str33 = client23.getUsername();
        cSVManager0.saveClient(client23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList35 = cSVManager0.loadManagers();
// flaky "80) test1487(RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(client9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(client23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        boolean boolean6 = paymentManager0.refundDeposit((double) (short) 0);
        ParkingSystem.MobilePay mobilePay7 = new ParkingSystem.MobilePay();
        boolean boolean12 = mobilePay7.processPayment("hi!", (-1.0d), "", "");
        boolean boolean17 = mobilePay7.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean22 = mobilePay7.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) 10.0f, "staff", "empty");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay7);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.lang.String str7 = superManager4.getManagerId();
        java.lang.String str8 = superManager4.getManagerId();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str5, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str7, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str8, "Paid $ -1.0 with Mobile Pay");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        cSVManager0.updateClientValidation("empty", false);
        ParkingSystem.Client client4 = ParkingSystem.Client.getInstance();
        java.lang.String str5 = client4.getName();
        client4.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean17 = parkingSpaceProxy14.checkIn("");
        client4.assignProxy(parkingSpaceProxy14);
        cSVManager0.saveClient(client4);
        java.lang.String str20 = client4.getUsername();
        org.junit.Assert.assertNotNull(client4);
// flaky "81) test1490(RegressionTest2)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jane" + "'", str5, "jane");
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.paymentMessage = "pass";
        paymentManager0.paymentMessage = "empty";
        ParkingSystem.PaymentManager paymentManager8 = new ParkingSystem.PaymentManager();
        java.lang.String str9 = paymentManager8.refundMessage;
        boolean boolean11 = paymentManager8.refundTotalCost((-1.0d));
        java.lang.String str12 = paymentManager8.paymentMessage;
        ParkingSystem.BookingManager bookingManager13 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager14 = new ParkingSystem.CheckInManager(bookingManager13);
        ParkingSystem.Booking booking16 = bookingManager13.getBooking("");
        ParkingSystem.SpaceManager spaceManager17 = bookingManager13.getSpaceManager();
        boolean boolean27 = bookingManager13.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double29 = bookingManager13.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit30 = new ParkingSystem.DebitOrCredit();
        bookingManager13.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit30);
        paymentManager8.setStrategy((ParkingSystem.Strategy) debitOrCredit30);
        java.lang.String str33 = debitOrCredit30.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit30);
        boolean boolean39 = paymentManager0.processPayment("Refunded without deposit ($-96.0)", (double) (byte) 1, "Paid $ 1.0 with Mobile Pay", "13b04414-31a5-407f-8ea3-fba4613c73d1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertNotNull(spaceManager17);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 15.0d + "'", double29 == 15.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "staff", (int) (byte) 0, "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", (int) (short) 0, "Card number should be 16 digits", (double) (-1L));
        java.lang.String str8 = booking7.getLotId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "staff" + "'", str8, "staff");
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime8 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Paid $ 10.0 with Mobile Pay' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking(0);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(0);
        ParkingSystem.ParkingSpace parkingSpace13 = parkingLot1.getParkingSpace((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNotNull(parkingSpace13);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("Jane");
        boolean boolean13 = parkingSpaceProxy0.checkOut("empty");
        boolean boolean23 = parkingSpaceProxy0.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        parkingSpaceProxy0.addParkingLot("Paid $ -1.0 with Mobile Pay");
        boolean boolean35 = parkingSpaceProxy0.confirmBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "hi!", "CLT-b6a8264c-f386-4429-b59c-b7f465002e13", 52, "CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", 0, "89de8237-29df-4908-9de4-6dc1ce90de94", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.addParkingLot("");
        ParkingSystem.ParkingLot parkingLot9 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking11 = null;
        boolean boolean12 = parkingLot9.assignBooking(0, booking11);
        boolean boolean14 = parkingLot9.isSpaceAvailable((int) '#');
        boolean boolean16 = parkingLot9.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace18 = parkingLot9.getParkingSpace((int) (byte) 10);
        int int19 = parkingSpace18.getSpaceId();
        ParkingSystem.Booking booking20 = parkingSpace18.getCurrentBooking();
        java.lang.String str21 = parkingSpace18.scanSpace();
        int int22 = parkingSpace18.getSpaceId();
        ParkingSystem.SpaceManager spaceManager23 = new ParkingSystem.SpaceManager();
        boolean boolean26 = spaceManager23.isSpaceAvailable("hi!", (int) '#');
        spaceManager23.toggleLot("disabled", false);
        ParkingSystem.Booking booking39 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean40 = spaceManager23.assignBooking("empty", (int) (short) 0, booking39);
        java.lang.String str41 = booking39.getClientId();
        boolean boolean42 = parkingSpace18.assignBooking(booking39);
        int int43 = booking39.getDuration();
        double double44 = booking39.getTotalCost();
        boolean boolean45 = spaceManager0.assignBooking("0b35479f-5869-423e-9abc-e4ab9cef903d", 3, booking39);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(parkingSpace18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNull(booking20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "empty" + "'", str21, "empty");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "staff" + "'", str41, "staff");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap12 = spaceManager0.getParkingLots();
        boolean boolean15 = spaceManager0.isSpaceAvailable("staff", (int) '4');
        spaceManager0.removeBooking("Paid $ 100.0 with Mobile Pay", (int) (byte) 0);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int29 = booking28.getDuration();
        java.lang.String str30 = booking28.getClientId();
        booking28.setCheckedIn(true);
        booking28.setStartTime("Paid $ -1.0 with Mobile Pay");
        boolean boolean35 = spaceManager0.assignBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", (int) (byte) 1, booking28);
        java.lang.String str36 = booking28.getStartTime();
        java.lang.String str37 = booking28.getClientId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "staff" + "'", str30, "staff");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str36, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "staff" + "'", str37, "staff");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        ParkingSystem.SpaceManager spaceManager32 = new ParkingSystem.SpaceManager();
        boolean boolean35 = spaceManager32.isSpaceAvailable("hi!", (int) '#');
        spaceManager32.toggleLot("disabled", false);
        ParkingSystem.Booking booking48 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean49 = spaceManager32.assignBooking("empty", (int) (short) 0, booking48);
        boolean boolean50 = booking48.isCheckedIn();
        java.lang.String str51 = booking48.getClientId();
        boolean boolean52 = parkingSpace10.assignBooking(booking48);
        ParkingSystem.SpaceState spaceState53 = parkingSpace10.getState();
        ParkingSystem.SpaceState spaceState54 = parkingSpace10.getState();
        java.lang.String str55 = parkingSpace10.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "staff" + "'", str51, "staff");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(spaceState53);
        org.junit.Assert.assertNotNull(spaceState54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry18 = parkingSpaceProxy17.getRegistry();
        boolean boolean24 = parkingSpaceProxy17.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean28 = parkingSpaceProxy17.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean38 = parkingSpaceProxy17.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry15.assignProxyToManager("empty", parkingSpaceProxy17);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy41 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade42 = parkingSpaceProxy41.getFacade();
        accountRegistry15.assignProxyToManager("", parkingSpaceProxy41);
        ParkingSystem.SuperManager superManager44 = ParkingSystem.SuperManager.createFromCSV("2afd610d-a8cb-413a-bbee-7927f86b526c", "empty", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", accountRegistry15);
        java.lang.String str45 = superManager44.getName();
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade42);
        org.junit.Assert.assertNotNull(superManager44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9701df9a-2178-4ad5-8076-46ff5f05b3e8" + "'", str45, "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        java.lang.String str9 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry13);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap15 = accountRegistry13.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry18 = parkingSpaceProxy17.getRegistry();
        java.lang.String str21 = parkingSpaceProxy17.scanSpace("empty", "hi!");
        boolean boolean31 = parkingSpaceProxy17.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy17.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean41 = parkingSpaceProxy17.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry13.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy17);
        superManager4.registry = accountRegistry13;
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str5, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str6, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str9, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "disabled" + "'", str21, "disabled");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }
}
