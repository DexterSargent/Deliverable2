package randoop;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(false);
        client0.setClientInfo("staff", "Refunded total cost of $1.0", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Jane", "Paid $ 10.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", true);
        boolean boolean13 = false; // flaky "1) test0501(RegressionTest1)": client0.checkIn();
        ParkingSystem.Booking booking14 = null; // flaky "1) test0501(RegressionTest1)": client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
// flaky "1) test0501(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(booking14);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        java.lang.Object obj53 = user0.login("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "qPYDfDnbtD");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "2) test0502(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        java.lang.String str22 = superManager21.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager21.registry;
        java.lang.String str24 = superManager21.getManagerId();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getName();
        client25.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry30 = parkingSpaceProxy29.getRegistry();
        boolean boolean32 = parkingSpaceProxy29.checkIn("");
        client25.assignProxy(parkingSpaceProxy29);
        boolean boolean34 = client25.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        client25.assignProxy(parkingSpaceProxy35);
        superManager21.assignProxy(parkingSpaceProxy35);
        user0.assignProxy(parkingSpaceProxy35);
        ParkingSystem.AccountRegistry accountRegistry39 = parkingSpaceProxy35.getRegistry();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry39.loadManagersFromCSV();
// flaky "3) test0503(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jane" + "'", str6, "jane");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
// flaky "2) test0503(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str22, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry23);
// flaky "2) test0503(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str24, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(accountRegistry39);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        parkingLot1.removeBooking((int) 'a');
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager3 = parkingSpaceFacade1.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap4 = spaceManager3.getParkingLots();
        cSVManager0.loadParkingLots(strMap4);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.CSVManager cSVManager7 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray8 = cSVManager7.loadSuperManager();
        java.lang.String[] strArray9 = cSVManager7.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade10 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager11 = parkingSpaceFacade10.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap12 = spaceManager11.getParkingLots();
        cSVManager7.saveParkingLots(strMap12);
        cSVManager0.saveParkingLots(strMap12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList15 = cSVManager0.loadManagers();
// flaky "4) test0505(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertNotNull(spaceManager3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "3) test0505(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray8);
// flaky "3) test0505(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray8, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray9);
// flaky "2) test0505(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.CSVManager cSVManager14 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList16 = cSVManager14.readCSV("");
        java.util.List<java.lang.String[]> strArrayList18 = cSVManager14.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap19 = null;
        cSVManager14.loadParkingLots(strMap19);
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        cSVManager14.saveManager((ParkingSystem.Manager) superManager25);
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        spaceManager28.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = spaceManager28.getParkingLots();
        cSVManager14.loadParkingLots(strMap47);
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str55 = spaceManager49.scanSpace("disabled", "");
        spaceManager49.addParkingLot("hi!");
        java.lang.String str60 = spaceManager49.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap61 = spaceManager49.getParkingLots();
        cSVManager14.saveParkingLots(strMap61);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade63 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str66 = parkingSpaceFacade63.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager67 = parkingSpaceFacade63.getSpaceManager();
        spaceManager67.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap70 = spaceManager67.getParkingLots();
        cSVManager14.saveParkingLots(strMap70);
        cSVManager0.loadParkingLots(strMap70);
        java.lang.String[] strArray73 = cSVManager0.loadSuperManager();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList74 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertNotNull(spaceManager67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strArray73);
// flaky "5) test0506(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray73, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        boolean boolean3 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
// flaky "6) test0507(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "staff" + "'", str1, "staff");
// flaky "4) test0507(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jane" + "'", str2, "jane");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.String str3 = parkingSpaceProxy0.scanSpace("Paid $ 10.0 with Mobile Pay", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean7 = parkingSpaceProxy0.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean11 = parkingSpaceProxy0.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean21 = parkingSpaceProxy0.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        boolean boolean23 = parkingSpaceProxy0.checkOut("Card number should be 16 digits");
        parkingSpaceProxy0.autoGenerateManager();
        boolean boolean26 = parkingSpaceProxy0.checkIn("");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        java.lang.String str9 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking15 = null;
        boolean boolean16 = parkingLot13.assignBooking(0, booking15);
        boolean boolean18 = parkingLot13.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking27 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean28 = parkingLot13.assignBooking((int) (short) -1, booking27);
        java.lang.String str29 = booking27.getLotId();
        java.lang.String str30 = booking27.getLicensePlate();
        booking27.setStartTime("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        booking27.setDuration((int) (short) 10);
        boolean boolean35 = spaceManager0.assignBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", (-1), booking27);
        booking27.setStartTime("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        booking27.setCheckedIn(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disabled" + "'", str9, "disabled");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "jane" + "'", str29, "jane");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "disabled" + "'", str30, "disabled");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setClientInfo("Jane", "", "pass", "pass", "pass", "hi!", true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj13 = parkingSpaceProxy10.login("empty", "Jane");
        parkingSpaceProxy10.validateClient("Jane");
        parkingSpaceProxy10.toggleSpace("", "staff", false);
        boolean boolean21 = parkingSpaceProxy10.cancelBooking("");
        boolean boolean27 = parkingSpaceProxy10.register("jane", "jane", "Jane", "hi!", "disabled");
        client0.assignProxy(parkingSpaceProxy10);
        ParkingSystem.Booking booking30 = parkingSpaceProxy10.getBookingDetails("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(booking30);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        java.lang.String str28 = parkingSpace25.scanSpace();
        int int29 = parkingSpace25.getSpaceId();
        ParkingSystem.SpaceManager spaceManager30 = new ParkingSystem.SpaceManager();
        boolean boolean33 = spaceManager30.isSpaceAvailable("hi!", (int) '#');
        spaceManager30.toggleLot("disabled", false);
        ParkingSystem.Booking booking46 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean47 = spaceManager30.assignBooking("empty", (int) (short) 0, booking46);
        java.lang.String str48 = booking46.getClientId();
        boolean boolean49 = parkingSpace25.assignBooking(booking46);
        int int50 = booking46.getDuration();
        boolean boolean51 = parkingSpace10.assignBooking(booking46);
        ParkingSystem.SpaceState spaceState52 = parkingSpace10.getState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "empty" + "'", str28, "empty");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "staff" + "'", str48, "staff");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(spaceState52);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean13 = paymentManager0.refundWithoutDeposit(100.0d, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean6 = parkingSpaceFacade0.extendBooking("disabled", 0);
        parkingSpaceFacade0.toggleSpace("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "", false);
        boolean boolean20 = parkingSpaceFacade0.confirmBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "Refunded without deposit ($0.0)", (int) (byte) -1, "433f3d1f-f758-4ae3-972b-7fb179aedfd7", 0, "Paid $ -1.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean22 = parkingSpaceFacade0.checkIn("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.SpaceManager spaceManager15 = new ParkingSystem.SpaceManager();
        boolean boolean18 = spaceManager15.isSpaceAvailable("hi!", (int) '#');
        spaceManager15.toggleLot("disabled", false);
        ParkingSystem.Booking booking31 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean32 = spaceManager15.assignBooking("empty", (int) (short) 0, booking31);
        java.lang.String str33 = booking31.getClientId();
        boolean boolean34 = parkingSpace10.assignBooking(booking31);
        int int35 = booking31.getDuration();
        boolean boolean36 = booking31.isCheckedIn();
        int int37 = booking31.getDuration();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime38 = booking31.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "staff" + "'", str33, "staff");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) ' ');
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(0);
        java.lang.String str12 = parkingSpace11.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        accountRegistry28.assignProxyToManager("pass", parkingSpaceProxy30);
        boolean boolean46 = parkingSpaceProxy30.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled", "Refunded total cost of $1.0", "", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy30;
        java.lang.String str50 = parkingSpaceProxy30.scanSpace("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.CSVManager cSVManager14 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList16 = cSVManager14.readCSV("");
        java.util.List<java.lang.String[]> strArrayList18 = cSVManager14.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap19 = null;
        cSVManager14.loadParkingLots(strMap19);
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        cSVManager14.saveManager((ParkingSystem.Manager) superManager25);
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        spaceManager28.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = spaceManager28.getParkingLots();
        cSVManager14.loadParkingLots(strMap47);
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str55 = spaceManager49.scanSpace("disabled", "");
        spaceManager49.addParkingLot("hi!");
        java.lang.String str60 = spaceManager49.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap61 = spaceManager49.getParkingLots();
        cSVManager14.saveParkingLots(strMap61);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade63 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str66 = parkingSpaceFacade63.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager67 = parkingSpaceFacade63.getSpaceManager();
        spaceManager67.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap70 = spaceManager67.getParkingLots();
        cSVManager14.saveParkingLots(strMap70);
        cSVManager0.loadParkingLots(strMap70);
        ParkingSystem.Client client73 = ParkingSystem.Client.getInstance();
        java.lang.String str74 = client73.getClientType();
        java.lang.String str75 = client73.getName();
        cSVManager0.saveClient(client73);
        cSVManager0.updateClientValidation("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList80 = cSVManager0.loadManagers();
// flaky "7) test0518(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertNotNull(spaceManager67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(client73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str75, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean3 = parkingSpaceProxy0.checkIn("");
        boolean boolean5 = parkingSpaceProxy0.checkIn("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        double double6 = bookingManager0.getDeposit("Jane");
        ParkingSystem.AccountRegistry accountRegistry7 = bookingManager0.getAccountRegistry();
        java.lang.Object obj10 = accountRegistry7.login("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "Paid $ 0.0 with Mobile Pay");
        java.lang.Object obj13 = accountRegistry7.login("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "09622cbf-e665-45db-b1ad-365065947a20");
        boolean boolean15 = accountRegistry7.requiresValidation("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.SpaceManager spaceManager6 = bookingManager0.getSpaceManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean9 = bookingManager0.cancelBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertNotNull(spaceManager6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean21 = client0.confirmBooking("09622cbf-e665-45db-b1ad-365065947a20", "Refunded without deposit ($0.0)", (int) (short) -1, "Paid $ -1.0 with Mobile Pay", (int) (byte) 1, "empty", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        org.junit.Assert.assertNotNull(client0);
// flaky "8) test0522(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "5) test0522(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky "4) test0522(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky "3) test0522(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky "1) test0522(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disabled" + "'", str13, "disabled");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        double double9 = bookingManager0.getHourlyRate("25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 15.0d + "'", double9 == 15.0d);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("02659ad3-0b5c-4c48-a915-a466f2b50775", "Refunded without deposit ($-42.0)", (int) (short) 1, "13b04414-31a5-407f-8ea3-fba4613c73d1", (int) ' ', "Refunded total cost of $-1.0", (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime8 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '13b04414-31a5-407f-8ea3-fba4613c73d1' could not be parsed at index 2");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry21 = parkingSpaceProxy20.getRegistry();
        java.lang.String str24 = parkingSpaceProxy20.scanSpace("empty", "hi!");
        accountRegistry15.assignProxyToClient("", parkingSpaceProxy20);
        java.lang.Class<?> wildcardClass26 = parkingSpaceProxy20.getClass();
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(accountRegistry21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "disabled" + "'", str24, "disabled");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        parkingSpaceFacade0.addParkingLot("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Card number should be 16 digits", 100);
        ParkingSystem.Booking booking8 = parkingSpaceFacade0.getBookingDetails("");
        boolean boolean18 = parkingSpaceFacade0.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "staff", (-1), "Paid $ 0.0 with Mobile Pay", (int) '4', "CLT-f02c481e-1504-4abf-b598-76152da8586a", "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(booking8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.Booking booking10 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int11 = booking10.getDuration();
        java.lang.String str12 = booking10.getClientId();
        booking10.setCheckedIn(true);
        boolean boolean15 = parkingLot1.assignBooking((int) (short) 100, booking10);
        java.lang.Class<?> wildcardClass16 = booking10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "staff" + "'", str12, "staff");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap6 = null;
        cSVManager0.loadParkingLots(strMap6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList8 = cSVManager0.loadManagers();
// flaky "9) test0528(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        boolean boolean10 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLotIterator7.next();
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        spaceManager12.toggleLot("Jane", false);
        spaceManager12.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager21 = new ParkingSystem.SpaceManager();
        boolean boolean24 = spaceManager21.isSpaceAvailable("hi!", (int) '#');
        spaceManager21.toggleLot("disabled", false);
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean38 = spaceManager21.assignBooking("empty", (int) (short) 0, booking37);
        boolean boolean39 = spaceManager12.assignBooking("hi!", 0, booking37);
        double double40 = booking37.getTotalCost();
        booking37.setDuration((-1));
        java.lang.String str43 = booking37.getLotId();
        booking37.setStartTime("");
        int int46 = booking37.getDuration();
        boolean boolean47 = parkingSpace11.assignBooking(booking37);
        ParkingSystem.Booking booking48 = parkingSpace11.getCurrentBooking();
        java.lang.String str49 = booking48.getStartTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jane" + "'", str43, "jane");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booking48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        ParkingSystem.ParkingLot parkingLot11 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking13 = null;
        boolean boolean14 = parkingLot11.assignBooking(0, booking13);
        boolean boolean16 = parkingLot11.isSpaceAvailable((int) '#');
        boolean boolean18 = parkingLot11.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace20 = parkingLot11.getParkingSpace((int) (byte) 10);
        int int21 = parkingSpace20.getSpaceId();
        ParkingSystem.Booking booking22 = parkingSpace20.getCurrentBooking();
        java.lang.String str23 = parkingSpace20.scanSpace();
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        parkingSpace20.setState((ParkingSystem.SpaceState) enabled24);
        parkingSpace9.setState((ParkingSystem.SpaceState) enabled24);
        ParkingSystem.Enabled enabled27 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot29 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking31 = null;
        boolean boolean32 = parkingLot29.assignBooking(0, booking31);
        boolean boolean34 = parkingLot29.isSpaceAvailable((int) '#');
        boolean boolean36 = parkingLot29.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace38 = parkingLot29.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking39 = parkingSpace38.getCurrentBooking();
        parkingSpace38.removeBooking();
        java.lang.String str41 = enabled27.scanSpace(parkingSpace38);
        ParkingSystem.ParkingLot parkingLot43 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking45 = null;
        boolean boolean46 = parkingLot43.assignBooking(0, booking45);
        boolean boolean48 = parkingLot43.isSpaceAvailable((int) '#');
        boolean boolean50 = parkingLot43.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace52 = parkingLot43.getParkingSpace((int) (byte) 10);
        int int53 = parkingSpace52.getSpaceId();
        ParkingSystem.Booking booking54 = parkingSpace52.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager55 = new ParkingSystem.SpaceManager();
        boolean boolean58 = spaceManager55.isSpaceAvailable("hi!", (int) '#');
        spaceManager55.toggleLot("disabled", false);
        ParkingSystem.Booking booking71 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean72 = spaceManager55.assignBooking("empty", (int) (short) 0, booking71);
        boolean boolean73 = parkingSpace52.assignBooking(booking71);
        java.lang.String str74 = enabled27.scanSpace(parkingSpace52);
        java.lang.String str75 = enabled24.scanSpace(parkingSpace52);
        ParkingSystem.Booking booking83 = new ParkingSystem.Booking("Jane", "Refunded without deposit ($-42.0)", (int) (short) 0, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) (short) 10, "Paid $ -1.0 with Mobile Pay", (double) (short) 10);
        booking83.setCheckedIn(true);
        boolean boolean86 = parkingSpace52.assignBooking(booking83);
        java.lang.Class<?> wildcardClass87 = booking83.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(parkingSpace20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "empty" + "'", str23, "empty");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(parkingSpace38);
        org.junit.Assert.assertNull(booking39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "empty" + "'", str41, "empty");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(parkingSpace52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNull(booking54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "disabled" + "'", str74, "disabled");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "disabled" + "'", str75, "disabled");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.ParkingLot parkingLot4 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot4.assignBooking(0, booking6);
        boolean boolean9 = parkingLot4.isSpaceAvailable((int) '#');
        boolean boolean11 = parkingLot4.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace13 = parkingLot4.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking14 = parkingSpace13.getCurrentBooking();
        ParkingSystem.Disabled disabled15 = new ParkingSystem.Disabled();
        parkingSpace13.setState((ParkingSystem.SpaceState) disabled15);
        java.lang.String str17 = disabled0.scanSpace(parkingSpace13);
        ParkingSystem.ParkingSpace parkingSpace18 = null;
        java.lang.String str19 = disabled0.scanSpace(parkingSpace18);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(parkingSpace13);
        org.junit.Assert.assertNull(booking14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean25 = parkingLot10.assignBooking((int) (short) -1, booking24);
        java.lang.String str26 = booking24.getLotId();
        boolean boolean27 = parkingLot1.assignBooking(0, booking24);
        java.lang.String str28 = booking24.getStartTime();
        boolean boolean29 = booking24.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Jane" + "'", str28, "Jane");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        client0.setValidated(true);
        java.lang.String str14 = client0.getPassword();
        java.lang.String str15 = client0.getPassword();
        boolean boolean17 = client0.extendBooking((int) (short) 10);
        java.lang.String str18 = client0.getExtraId();
        client0.setClientInfo("02659ad3-0b5c-4c48-a915-a466f2b50775", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "Refunded without deposit ($0.0)", "433f3d1f-f758-4ae3-972b-7fb179aedfd7", "3b453211-7dd1-4452-8741-a206711c1217", "", false);
        org.junit.Assert.assertNotNull(client0);
// flaky "10) test0533(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        java.lang.String[] strArray9 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVManager0.saveClient(client10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.Client.getClientId()\" because \"client\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArray9);
// flaky "11) test0534(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        double double21 = bookingManager0.getDeposit("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        double double23 = bookingManager0.getDeposit("Jane");
        ParkingSystem.Booking booking25 = bookingManager0.getBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 15.0d + "'", double23 == 15.0d);
        org.junit.Assert.assertNull(booking25);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        java.lang.String str22 = superManager21.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry23 = superManager21.registry;
        java.lang.String str24 = superManager21.getManagerId();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getName();
        client25.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry30 = parkingSpaceProxy29.getRegistry();
        boolean boolean32 = parkingSpaceProxy29.checkIn("");
        client25.assignProxy(parkingSpaceProxy29);
        boolean boolean34 = client25.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        client25.assignProxy(parkingSpaceProxy35);
        superManager21.assignProxy(parkingSpaceProxy35);
        user0.assignProxy(parkingSpaceProxy35);
        ParkingSystem.AccountRegistry accountRegistry39 = parkingSpaceProxy35.getRegistry();
        ParkingSystem.Manager manager40 = accountRegistry39.autoGenerateManager();
        boolean boolean42 = accountRegistry39.requiresValidation("2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "12) test0536(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
// flaky "6) test0536(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str22, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry23);
// flaky "5) test0536(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str24, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client25);
// flaky "4) test0536(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "empty" + "'", str26, "empty");
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(accountRegistry39);
        org.junit.Assert.assertNotNull(manager40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean3 = parkingSpaceFacade0.checkIn("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("Jane", "staff", (int) (short) 100);
        boolean boolean9 = parkingSpaceFacade0.extendBooking("empty", 100);
        parkingSpaceFacade0.addParkingLot("Refunded total cost of $1.0");
        parkingSpaceFacade0.addParkingLot("Jane");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(true);
        client0.setValidated(false);
        boolean boolean14 = client0.confirmBooking("CLT-f02c481e-1504-4abf-b598-76152da8586a", "Card number should be 16 digits", (int) (byte) -1, "Paid $ 100.0 with Mobile Pay", (int) (short) 1, "Paid $ 1470.0 with Mobile Pay", "");
        org.junit.Assert.assertNotNull(client0);
// flaky "13) test0539(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!");
// flaky "7) test0539(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jane" + "'", str2, "jane");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean9 = parkingLot1.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator10 = parkingLot1.getIterator();
        ParkingSystem.Booking booking19 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int20 = booking19.getDuration();
        java.lang.String str21 = booking19.getClientId();
        booking19.setStartTime("hi!");
        boolean boolean24 = booking19.isCheckedIn();
        java.lang.String str25 = booking19.getLotId();
        boolean boolean26 = parkingLot1.assignBooking((int) '#', booking19);
        boolean boolean27 = booking19.isCheckedIn();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime28 = booking19.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'hi!' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "staff" + "'", str21, "staff");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jane" + "'", str25, "jane");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean21 = debitOrCredit6.validateCard("Jane", (double) '4');
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        boolean boolean27 = debitOrCredit6.processPayment("86z9Z9e0MN", (double) 0, "jane", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        boolean boolean32 = debitOrCredit6.processPayment("qPYDfDnbtD", (double) 10L, "CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", "");
        java.lang.String str33 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Card number should be 16 digits" + "'", str33, "Card number should be 16 digits");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        superManager11.validateClient("disabled");
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        java.lang.String str18 = booking15.getLicensePlate();
        int int19 = booking15.getDuration();
        int int20 = booking15.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking11 = parkingSpace10.getCurrentBooking();
        parkingSpace10.removeBooking();
        ParkingSystem.Booking booking13 = parkingSpace10.getCurrentBooking();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking26 = parkingSpace25.getCurrentBooking();
        parkingSpace25.removeBooking();
        java.lang.String str28 = enabled14.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot30 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking32 = null;
        boolean boolean33 = parkingLot30.assignBooking(0, booking32);
        boolean boolean35 = parkingLot30.isSpaceAvailable((int) '#');
        boolean boolean37 = parkingLot30.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace39 = parkingLot30.getParkingSpace((int) (byte) 10);
        int int40 = parkingSpace39.getSpaceId();
        ParkingSystem.Booking booking41 = parkingSpace39.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager42 = new ParkingSystem.SpaceManager();
        boolean boolean45 = spaceManager42.isSpaceAvailable("hi!", (int) '#');
        spaceManager42.toggleLot("disabled", false);
        ParkingSystem.Booking booking58 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean59 = spaceManager42.assignBooking("empty", (int) (short) 0, booking58);
        boolean boolean60 = parkingSpace39.assignBooking(booking58);
        java.lang.String str61 = enabled14.scanSpace(parkingSpace39);
        ParkingSystem.ParkingLot parkingLot63 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking65 = null;
        boolean boolean66 = parkingLot63.assignBooking(0, booking65);
        boolean boolean68 = parkingLot63.isSpaceAvailable((int) '#');
        boolean boolean70 = parkingLot63.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace72 = parkingLot63.getParkingSpace((int) (byte) 10);
        int int73 = parkingSpace72.getSpaceId();
        ParkingSystem.Booking booking74 = parkingSpace72.getCurrentBooking();
        java.lang.String str75 = parkingSpace72.scanSpace();
        int int76 = parkingSpace72.getSpaceId();
        ParkingSystem.Booking booking77 = parkingSpace72.getCurrentBooking();
        java.lang.String str78 = enabled14.scanSpace(parkingSpace72);
        ParkingSystem.SpaceState spaceState79 = parkingSpace72.getState();
        parkingSpace10.setState(spaceState79);
        parkingSpace10.removeBooking();
        ParkingSystem.Booking booking82 = parkingSpace10.getCurrentBooking();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertNull(booking26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "empty" + "'", str28, "empty");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parkingSpace39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNull(booking41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "disabled" + "'", str61, "disabled");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(parkingSpace72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNull(booking74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "empty" + "'", str75, "empty");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNull(booking77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "empty" + "'", str78, "empty");
        org.junit.Assert.assertNotNull(spaceState79);
        org.junit.Assert.assertNull(booking82);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        boolean boolean25 = accountRegistry4.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        java.util.List<ParkingSystem.Client> clientList26 = accountRegistry4.displayPendingValidations();
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(clientList26);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        ParkingSystem.AccountRegistry accountRegistry21 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager22 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry21);
        java.lang.String str23 = superManager22.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        accountRegistry27.assignProxyToManager("disabled", parkingSpaceProxy30);
        superManager22.registry = accountRegistry27;
        ParkingSystem.AccountRegistry accountRegistry36 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry36);
        java.lang.String str38 = superManager37.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry42 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager43 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry42);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy45 = null;
        accountRegistry42.assignProxyToManager("disabled", parkingSpaceProxy45);
        superManager37.registry = accountRegistry42;
        superManager22.registry = accountRegistry42;
        java.util.List<ParkingSystem.Client> clientList49 = accountRegistry42.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy51 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry52 = parkingSpaceProxy51.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy54 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj57 = parkingSpaceProxy54.login("empty", "Jane");
        parkingSpaceProxy54.validateClient("Jane");
        parkingSpaceProxy54.toggleSpace("", "staff", false);
        accountRegistry52.assignProxyToManager("pass", parkingSpaceProxy54);
        accountRegistry42.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy54);
        user0.assignProxy(parkingSpaceProxy54);
        java.lang.String str69 = parkingSpaceProxy54.scanSpace("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", "Refunded total cost of $1.0");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(superManager22);
// flaky "14) test0546(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str23, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertNotNull(superManager37);
// flaky "8) test0546(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str38, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager43);
        org.junit.Assert.assertNotNull(clientList49);
        org.junit.Assert.assertNotNull(accountRegistry52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "disabled" + "'", str69, "disabled");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        ParkingSystem.Client client6 = ParkingSystem.Client.getInstance();
        java.lang.String str7 = client6.getName();
        client6.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str16 = client6.getUsername();
        java.lang.String str17 = client6.getPassword();
        java.lang.String str18 = client6.getClientType();
        boolean boolean19 = client6.getIsValidated();
        boolean boolean27 = client6.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        java.lang.String str28 = client6.getName();
        cSVManager0.saveClient(client6);
        ParkingSystem.BookingManager bookingManager30 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager31 = new ParkingSystem.CheckInManager(bookingManager30);
        ParkingSystem.Booking booking33 = bookingManager30.getBooking("");
        ParkingSystem.SpaceManager spaceManager34 = bookingManager30.getSpaceManager();
        boolean boolean44 = bookingManager30.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double46 = bookingManager30.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit47 = new ParkingSystem.DebitOrCredit();
        bookingManager30.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit47);
        ParkingSystem.CheckInManager checkInManager49 = new ParkingSystem.CheckInManager(bookingManager30);
        ParkingSystem.CheckInManager checkInManager50 = new ParkingSystem.CheckInManager(bookingManager30);
        ParkingSystem.SpaceManager spaceManager51 = bookingManager30.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap52 = spaceManager51.getParkingLots();
        cSVManager0.loadParkingLots(strMap52);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade54 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str57 = parkingSpaceFacade54.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager58 = parkingSpaceFacade54.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap59 = spaceManager58.getParkingLots();
        cSVManager0.loadParkingLots(strMap59);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade61 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str64 = parkingSpaceFacade61.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager65 = parkingSpaceFacade61.getSpaceManager();
        spaceManager65.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap68 = spaceManager65.getParkingLots();
        cSVManager0.loadParkingLots(strMap68);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(client6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(booking33);
        org.junit.Assert.assertNotNull(spaceManager34);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 15.0d + "'", double46 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "disabled" + "'", str57, "disabled");
        org.junit.Assert.assertNotNull(spaceManager58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "disabled" + "'", str64, "disabled");
        org.junit.Assert.assertNotNull(spaceManager65);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        parkingSpaceFacade17.toggleSpace("pass", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", true);
        parkingSpaceFacade17.toggleLot("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", true);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("pass");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        boolean boolean3 = parkingLotIterator2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace((int) (short) -1);
        java.lang.String str2 = parkingSpace1.scanSpace();
        ParkingSystem.ParkingLot parkingLot4 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot4.assignBooking(0, booking6);
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot4.assignBooking(1, booking9);
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking15 = null;
        boolean boolean16 = parkingLot13.assignBooking(0, booking15);
        boolean boolean18 = parkingLot13.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking27 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean28 = parkingLot13.assignBooking((int) (short) -1, booking27);
        java.lang.String str29 = booking27.getLotId();
        boolean boolean30 = parkingLot4.assignBooking(0, booking27);
        boolean boolean31 = parkingSpace1.assignBooking(booking27);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "empty" + "'", str2, "empty");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "jane" + "'", str29, "jane");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        java.lang.String str2 = checkInManager1.refundMessage;
        boolean boolean4 = checkInManager1.checkOut("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        boolean boolean12 = accountRegistry9.requiresValidation("disabled");
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry15 = superManager14.getRegistry();
        accountRegistry15.validateClient("pass");
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry15);
        superManager18.validateClient("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        boolean boolean27 = accountRegistry24.requiresValidation("disabled");
        ParkingSystem.Manager manager28 = accountRegistry24.autoGenerateManager();
        java.util.List<ParkingSystem.Client> clientList29 = accountRegistry24.displayPendingValidations();
        accountRegistry24.validateClient("Jane");
        superManager18.registry = accountRegistry24;
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(manager28);
        org.junit.Assert.assertNotNull(clientList29);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        java.lang.Object obj17 = user0.user;
        ParkingSystem.User user18 = new ParkingSystem.User();
        java.lang.Object obj19 = user18.user;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user18.parkingProxy = parkingSpaceProxy30;
        user18.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy42 = user18.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy43 = new ParkingSystem.ParkingSpaceProxy();
        user18.assignProxy(parkingSpaceProxy43);
        user0.user = user18;
        java.lang.Object obj48 = user0.login("89de8237-29df-4908-9de4-6dc1ce90de94", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(client20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy42);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        boolean boolean24 = client3.checkOut();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "15) test0554(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "9) test0554(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Card number should be 16 digits" + "'", str4, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str13, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Card number should be 16 digits" + "'", str14, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        spaceManager0.addParkingLot("staff");
        spaceManager0.loadParkingLots();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj12 = parkingSpaceProxy9.login("empty", "Jane");
        parkingSpaceProxy9.validateClient("Jane");
        parkingSpaceProxy9.toggleSpace("", "staff", false);
        boolean boolean20 = parkingSpaceProxy9.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy9);
        parkingSpaceProxy9.toggleSpace("disabled", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", false);
        boolean boolean35 = parkingSpaceProxy9.confirmBooking("jane", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "qPYDfDnbtD", "Paid $ 10.0 with Mobile Pay", 2, "TXCrKOGD", (int) (byte) 10, "hi!", "Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        parkingLot1.setEnabled(true);
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.setEnabled(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        double double21 = bookingManager0.getHourlyRate("");
        ParkingSystem.CheckInManager checkInManager22 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean24 = checkInManager22.checkIn("13b04414-31a5-407f-8ea3-fba4613c73d1");
        checkInManager22.refundMessage = "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa";
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean25 = parkingLot10.assignBooking((int) (short) -1, booking24);
        java.lang.String str26 = booking24.getLotId();
        boolean boolean27 = parkingLot1.assignBooking(0, booking24);
        booking24.setCheckedIn(true);
        java.lang.String str30 = booking24.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "disabled" + "'", str30, "disabled");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean3 = parkingSpaceProxy0.checkIn("");
        parkingSpaceProxy0.toggleLot("", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade7 = parkingSpaceProxy0.getFacade();
        parkingSpaceProxy0.displayPendingValidations();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade7);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("jane", "");
        spaceManager0.toggleLot("Jane", true);
        spaceManager0.addParkingLot("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.ParkingLot parkingLot15 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking17 = null;
        boolean boolean18 = parkingLot15.assignBooking(0, booking17);
        boolean boolean20 = parkingLot15.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = parkingLot15.assignBooking((int) (short) -1, booking29);
        java.lang.String str31 = booking29.getLotId();
        java.lang.String str32 = booking29.getLicensePlate();
        booking29.setStartTime("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        booking29.setDuration((int) (short) 10);
        boolean boolean37 = spaceManager0.assignBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", 10, booking29);
        boolean boolean40 = spaceManager0.isSpaceAvailable("CLT-30fd593b-dedd-41b3-a919-c48700301f41", 52);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "disabled" + "'", str32, "disabled");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        booking25.setStartTime("");
        int int34 = booking25.getDuration();
        booking25.setCheckedIn(false);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime37 = booking25.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        client0.assignProxy(parkingSpaceProxy10);
        boolean boolean21 = parkingSpaceProxy10.confirmBooking("staff", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "", "Paid $ -1.0 with Mobile Pay", 10, "Refunded without deposit ($0.0)", (int) (short) 0, "Paid $ 0.0 with Mobile Pay", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        boolean boolean25 = parkingSpaceProxy10.editBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 0.0 with Mobile Pay", 0);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade26 = parkingSpaceProxy10.getFacade();
        java.lang.Object obj29 = parkingSpaceProxy10.login("Paid $ 10.0 with Mobile Pay", "ST001");
        org.junit.Assert.assertNotNull(client0);
// flaky "16) test0563(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841" + "'", str1, "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        parkingLot1.setEnabled(true);
        boolean boolean7 = parkingLot1.isEnabled();
        parkingLot1.removeBooking((int) (byte) 10);
        parkingLot1.removeBooking((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        boolean boolean10 = mobilePay0.processPayment("jane", 15.0d, "jane", "");
        java.lang.String str11 = mobilePay0.getPaymentMessage();
        boolean boolean16 = mobilePay0.processPayment("Refunded total cost of $100.0", (double) 100.0f, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Paid $ 15.0 with Mobile Pay" + "'", str11, "Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean4 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) 10);
        boolean boolean6 = parkingSpaceFacade0.cancelBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        ParkingSystem.AccountRegistry accountRegistry51 = parkingSpaceProxy32.getRegistry();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry51.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "17) test0567(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(accountRegistry51);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager18);
        checkInManager21.refundMessage = "Jane";
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "18) test0568(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "pass" + "'", str6, "pass");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap11 = accountRegistry9.getManagers();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry9);
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        ParkingSystem.AccountRegistry accountRegistry30 = superManager19.getRegistry();
        ParkingSystem.Manager manager31 = accountRegistry30.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry34 = parkingSpaceProxy33.getRegistry();
        boolean boolean40 = parkingSpaceProxy33.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy33.toggleLot("hi!", false);
        accountRegistry30.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy33);
        ParkingSystem.User user46 = new ParkingSystem.User();
        java.lang.Object obj47 = user46.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj51 = parkingSpaceProxy48.login("empty", "Jane");
        parkingSpaceProxy48.validateClient("Jane");
        java.lang.String str56 = parkingSpaceProxy48.scanSpace("", "");
        parkingSpaceProxy48.toggleSpace("", "disabled", true);
        user46.parkingProxy = parkingSpaceProxy48;
        ParkingSystem.ParkingLot parkingLot63 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator64 = parkingLot63.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator65 = parkingLot63.getIterator();
        user46.user = parkingLot63;
        ParkingSystem.User user67 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy68 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj71 = parkingSpaceProxy68.login("empty", "Jane");
        parkingSpaceProxy68.validateClient("Jane");
        parkingSpaceProxy68.toggleSpace("", "staff", false);
        boolean boolean79 = parkingSpaceProxy68.cancelBooking("");
        user67.assignProxy(parkingSpaceProxy68);
        user46.user = parkingSpaceProxy68;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy82 = user46.parkingProxy;
        parkingSpaceProxy82.addParkingLot("pass");
        accountRegistry30.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy82);
        accountRegistry9.assignProxyToClient("13b04414-31a5-407f-8ea3-fba4613c73d1", parkingSpaceProxy82);
        accountRegistry9.validateClient("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.SuperManager superManager89 = ParkingSystem.SuperManager.createFromCSV("", "09622cbf-e665-45db-b1ad-365065947a20", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", accountRegistry9);
        java.lang.Object obj92 = accountRegistry9.login("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager19);
// flaky "19) test0569(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str20, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertNotNull(manager31);
        org.junit.Assert.assertNotNull(accountRegistry34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "disabled" + "'", str56, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator64);
        org.junit.Assert.assertNotNull(parkingLotIterator65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy82);
        org.junit.Assert.assertNotNull(superManager89);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking(0);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(0);
        ParkingSystem.ParkingLotIterator parkingLotIterator12 = parkingLot1.getIterator();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNotNull(parkingLotIterator12);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        boolean boolean18 = booking16.isCheckedIn();
        java.lang.String str19 = booking16.getClientId();
        booking16.setCheckedIn(false);
        double double22 = booking16.getTotalCost();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "staff" + "'", str19, "staff");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean20 = bookingManager0.extendBooking("jane", 100, "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap21 = bookingManager0.getActiveBookings();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap6 = null;
        cSVManager0.loadParkingLots(strMap6);
        ParkingSystem.Client client8 = ParkingSystem.Client.getInstance();
        java.lang.String str9 = client8.getClientType();
        cSVManager0.saveClient(client8);
        java.lang.String[] strArray11 = cSVManager0.loadSuperManager();
        java.util.List<java.lang.String[]> strArrayList13 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList15 = cSVManager0.readCSV("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167");
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(client8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "empty" + "'", str9, "empty");
        org.junit.Assert.assertNotNull(strArray11);
// flaky "20) test0573(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList15);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        java.lang.Object obj19 = parkingSpaceProxy9.login("Jane", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade20 = parkingSpaceProxy9.getFacade();
        boolean boolean22 = parkingSpaceFacade20.cancelBooking("86z9Z9e0MN");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(parkingSpaceFacade20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap4 = bookingManager0.getActiveBookings();
        boolean boolean9 = bookingManager0.extendBooking("0b35479f-5869-423e-9abc-e4ab9cef903d", (int) '4', "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.addParkingLot("");
        spaceManager0.addParkingLot("disabled");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap8 = spaceManager0.getParkingLots();
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        double double21 = bookingManager0.getHourlyRate("");
        ParkingSystem.CheckInManager checkInManager22 = new ParkingSystem.CheckInManager(bookingManager0);
        double double24 = bookingManager0.getDeposit("Refunded total cost of $100.0");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap25 = bookingManager0.getActiveBookings();
        ParkingSystem.PaymentManager paymentManager26 = new ParkingSystem.PaymentManager();
        java.lang.String str27 = paymentManager26.refundMessage;
        boolean boolean29 = paymentManager26.refundTotalCost((-1.0d));
        java.lang.String str30 = paymentManager26.paymentMessage;
        ParkingSystem.BookingManager bookingManager31 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager32 = new ParkingSystem.CheckInManager(bookingManager31);
        ParkingSystem.Booking booking34 = bookingManager31.getBooking("");
        ParkingSystem.SpaceManager spaceManager35 = bookingManager31.getSpaceManager();
        boolean boolean45 = bookingManager31.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double47 = bookingManager31.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit48 = new ParkingSystem.DebitOrCredit();
        bookingManager31.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit48);
        paymentManager26.setStrategy((ParkingSystem.Strategy) debitOrCredit48);
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit48);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 15.0d + "'", double24 == 15.0d);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(booking34);
        org.junit.Assert.assertNotNull(spaceManager35);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 15.0d + "'", double47 == 15.0d);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = null;
        accountRegistry3.assignProxyToClient("", parkingSpaceProxy8);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry3.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy12.getRegistry();
        java.lang.String str16 = parkingSpaceProxy12.scanSpace("empty", "hi!");
        boolean boolean26 = parkingSpaceProxy12.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean30 = parkingSpaceProxy12.editBooking("pass", "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 100);
        accountRegistry3.assignProxyToManager("", parkingSpaceProxy12);
        boolean boolean33 = parkingSpaceProxy12.cancelBooking("Refunded without deposit ($-42.0)");
        boolean boolean36 = parkingSpaceProxy12.extendBooking("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", (int) (short) 0);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("hi!", (-1.0d), "", "");
        boolean boolean10 = mobilePay0.processPayment("hi!", (double) 100, "jane", "disabled");
        java.lang.String str11 = mobilePay0.getPaymentMessage();
        boolean boolean16 = mobilePay0.processPayment("Refunded without deposit ($0.0)", (double) (-1L), "Refunded total cost of $1.0", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        java.lang.String str17 = mobilePay0.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str11, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str17, "Paid $ -1.0 with Mobile Pay");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean8 = paymentManager0.refundTotalCost((double) (short) 100);
        boolean boolean13 = paymentManager0.processPayment("", (double) 0, "Paid $ 100.0 with Mobile Pay", "Refunded without deposit ($-42.0)");
        boolean boolean18 = paymentManager0.processPayment("Paid $ 0.0 with Mobile Pay", (double) (byte) 0, "", "empty");
        boolean boolean21 = paymentManager0.refundWithoutDeposit((double) 0L, (double) (byte) 1);
        boolean boolean23 = paymentManager0.refundTotalCost((double) (short) 10);
        boolean boolean28 = paymentManager0.processPayment("", (double) 'a', "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "0b35479f-5869-423e-9abc-e4ab9cef903d");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        parkingSpaceFacade0.toggleLot("Paid $ -1.0 with Mobile Pay", false);
        parkingSpaceFacade0.toggleLot("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", true);
        java.lang.String str12 = parkingSpaceFacade0.scanSpace("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.ParkingSpace parkingSpace6 = parkingLot1.getParkingSpace((int) (short) -1);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertNotNull(parkingSpace6);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        boolean boolean51 = parkingSpaceFacade33.confirmBooking("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) '#', "Paid $ -1.0 with Mobile Pay", (int) (short) -1, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean55 = parkingSpaceFacade33.editBooking("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        ParkingSystem.SpaceManager spaceManager20 = new ParkingSystem.SpaceManager();
        boolean boolean23 = spaceManager20.isSpaceAvailable("hi!", (int) '#');
        spaceManager20.toggleLot("disabled", false);
        ParkingSystem.Booking booking36 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean37 = spaceManager20.assignBooking("empty", (int) (short) 0, booking36);
        boolean boolean38 = spaceManager0.assignBooking("disabled", (int) (byte) 0, booking36);
        booking36.setStartTime("Jane");
        int int41 = booking36.getSpaceId();
        java.lang.String str42 = booking36.getLotId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "jane" + "'", str42, "jane");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        double double21 = bookingManager0.getHourlyRate("");
        double double23 = bookingManager0.getHourlyRate("staff");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        client20.assignProxy(parkingSpaceProxy30);
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy30.getRegistry();
        boolean boolean34 = parkingSpaceProxy30.checkIn("hi!");
        user0.assignProxy(parkingSpaceProxy30);
        parkingSpaceProxy30.addParkingLot("86z9Z9e0MN");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNotNull(client20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jane" + "'", str21, "jane");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.BookingManager bookingManager19 = parkingSpaceFacade17.getBookingManager();
        ParkingSystem.SpaceManager spaceManager20 = bookingManager19.getSpaceManager();
        ParkingSystem.SpaceManager spaceManager21 = bookingManager19.getSpaceManager();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "jane" + "'", str6, "jane");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(bookingManager19);
        org.junit.Assert.assertNotNull(spaceManager20);
        org.junit.Assert.assertNotNull(spaceManager21);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        java.lang.String str7 = mobilePay0.getPaymentMessage();
        java.lang.String str8 = mobilePay0.getPaymentMessage();
        java.lang.String str9 = mobilePay0.getPaymentMessage();
        boolean boolean14 = mobilePay0.processPayment("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", 165.0d, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str7, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str8, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str9, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(true);
        java.lang.String str5 = client0.getName();
        client0.setValidated(true);
        org.junit.Assert.assertNotNull(client0);
// flaky "21) test0589(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "disabled" + "'", str1, "disabled");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky "10) test0589(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj17 = parkingSpaceProxy14.login("empty", "Jane");
        parkingSpaceProxy14.validateClient("Jane");
        parkingSpaceProxy14.toggleSpace("", "staff", false);
        boolean boolean25 = parkingSpaceProxy14.cancelBooking("");
        boolean boolean31 = parkingSpaceProxy14.register("jane", "jane", "Jane", "hi!", "disabled");
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.AccountRegistry accountRegistry36 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry36);
        boolean boolean39 = accountRegistry36.requiresValidation("disabled");
        int int40 = accountRegistry36.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy42 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj45 = parkingSpaceProxy42.login("empty", "Jane");
        parkingSpaceProxy42.validateClient("Jane");
        parkingSpaceProxy42.toggleSpace("", "staff", false);
        boolean boolean53 = parkingSpaceProxy42.cancelBooking("Jane");
        accountRegistry36.assignProxyToClient("pass", parkingSpaceProxy42);
        boolean boolean60 = parkingSpaceProxy42.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean66 = parkingSpaceProxy42.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean72 = parkingSpaceProxy42.register("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "staff", "Refunded total cost of $1.0", "Paid $ 10.0 with Mobile Pay", "jane");
        parkingSpaceProxy42.autoGenerateManager();
        user0.parkingProxy = parkingSpaceProxy42;
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        spaceManager0.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        ParkingSystem.MobilePay mobilePay4 = new ParkingSystem.MobilePay();
        boolean boolean9 = mobilePay4.processPayment("hi!", (-1.0d), "", "");
        boolean boolean14 = mobilePay4.processPayment("staff", (double) (-1L), "disabled", "pass");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay4);
        paymentManager0.refundMessage = "Jane";
        boolean boolean19 = paymentManager0.refundTotalCost(1.0d);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        boolean boolean20 = spaceManager0.isSpaceAvailable("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        java.lang.String str9 = booking7.getClientId();
        java.lang.String str10 = booking7.getClientId();
        java.lang.String str11 = booking7.getStartTime();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "staff" + "'", str9, "staff");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "staff" + "'", str10, "staff");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jane" + "'", str11, "Jane");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        boolean boolean16 = accountRegistry6.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        parkingSpaceProxy18.validateClient("Jane");
        parkingSpaceProxy18.toggleSpace("", "staff", false);
        boolean boolean29 = parkingSpaceProxy18.cancelBooking("Jane");
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy18);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap31 = accountRegistry6.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj36 = parkingSpaceProxy33.login("empty", "Jane");
        parkingSpaceProxy33.validateClient("Jane");
        parkingSpaceProxy33.toggleSpace("", "staff", false);
        boolean boolean44 = parkingSpaceProxy33.cancelBooking("Jane");
        boolean boolean46 = parkingSpaceProxy33.checkOut("empty");
        boolean boolean56 = parkingSpaceProxy33.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry6.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy33);
        java.util.List<ParkingSystem.Client> clientList58 = accountRegistry6.displayPendingValidations();
        ParkingSystem.SuperManager superManager59 = ParkingSystem.SuperManager.createFromCSV("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 1470.0 with Mobile Pay", "Jane", accountRegistry6);
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(clientList58);
        org.junit.Assert.assertNotNull(superManager59);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap11 = accountRegistry9.getManagers();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry9);
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        ParkingSystem.AccountRegistry accountRegistry30 = superManager19.getRegistry();
        ParkingSystem.Manager manager31 = accountRegistry30.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry34 = parkingSpaceProxy33.getRegistry();
        boolean boolean40 = parkingSpaceProxy33.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy33.toggleLot("hi!", false);
        accountRegistry30.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy33);
        ParkingSystem.User user46 = new ParkingSystem.User();
        java.lang.Object obj47 = user46.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj51 = parkingSpaceProxy48.login("empty", "Jane");
        parkingSpaceProxy48.validateClient("Jane");
        java.lang.String str56 = parkingSpaceProxy48.scanSpace("", "");
        parkingSpaceProxy48.toggleSpace("", "disabled", true);
        user46.parkingProxy = parkingSpaceProxy48;
        ParkingSystem.ParkingLot parkingLot63 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator64 = parkingLot63.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator65 = parkingLot63.getIterator();
        user46.user = parkingLot63;
        ParkingSystem.User user67 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy68 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj71 = parkingSpaceProxy68.login("empty", "Jane");
        parkingSpaceProxy68.validateClient("Jane");
        parkingSpaceProxy68.toggleSpace("", "staff", false);
        boolean boolean79 = parkingSpaceProxy68.cancelBooking("");
        user67.assignProxy(parkingSpaceProxy68);
        user46.user = parkingSpaceProxy68;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy82 = user46.parkingProxy;
        parkingSpaceProxy82.addParkingLot("pass");
        accountRegistry30.assignProxyToManager("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", parkingSpaceProxy82);
        accountRegistry9.assignProxyToClient("13b04414-31a5-407f-8ea3-fba4613c73d1", parkingSpaceProxy82);
        accountRegistry9.validateClient("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.SuperManager superManager89 = ParkingSystem.SuperManager.createFromCSV("", "09622cbf-e665-45db-b1ad-365065947a20", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", accountRegistry9);
        superManager89.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager19);
// flaky "22) test0596(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str20, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertNotNull(manager31);
        org.junit.Assert.assertNotNull(accountRegistry34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "disabled" + "'", str56, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator64);
        org.junit.Assert.assertNotNull(parkingLotIterator65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy82);
        org.junit.Assert.assertNotNull(superManager89);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean18 = client0.extendBooking((int) '#');
        boolean boolean26 = client0.confirmBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (-1), "Card number should be 16 digits", (int) 'a', "staff", "Refunded without deposit ($-42.0)");
        java.lang.String str27 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "empty" + "'", str27, "empty");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap16 = accountRegistry14.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        java.lang.String str22 = parkingSpaceProxy18.scanSpace("empty", "hi!");
        boolean boolean32 = parkingSpaceProxy18.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy18.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean42 = parkingSpaceProxy18.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry14.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy18);
        accountRegistry6.assignProxyToManager("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        ParkingSystem.SuperManager superManager45 = ParkingSystem.SuperManager.createFromCSV("hi!", "hi!", "pass", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList46 = accountRegistry6.displayPendingValidations();
        boolean boolean52 = accountRegistry6.registerClient("ST001", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "jane", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "3b453211-7dd1-4452-8741-a206711c1217");
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap53 = accountRegistry6.getManagers();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disabled" + "'", str22, "disabled");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(superManager45);
        org.junit.Assert.assertNotNull(clientList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        booking25.setStartTime("");
        int int34 = booking25.getDuration();
        java.lang.String str35 = booking25.getStartTime();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        boolean boolean5 = bookingManager0.extendBooking("jane", (int) (short) -1, "", "Paid $ 10.0 with Mobile Pay");
        double double7 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.SpaceManager spaceManager8 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap9 = bookingManager0.getActiveBookings();
        double double11 = bookingManager0.getDeposit("staff");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 15.0d + "'", double7 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        checkInManager1.refundMessage = "staff";
        checkInManager1.refundMessage = "Refunded total cost of $1.0";
        java.lang.String str8 = checkInManager1.refundMessage;
        checkInManager1.refundMessage = "Paid $ 15.0 with Mobile Pay";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Refunded total cost of $1.0" + "'", str8, "Refunded total cost of $1.0");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
// flaky "23) test0602(RegressionTest1)":         manager8.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
// flaky "11) test0602(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
// flaky "6) test0602(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str6, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        boolean boolean6 = parkingSpaceProxy3.checkIn("");
        parkingSpaceProxy3.validateClient("");
        user0.assignProxy(parkingSpaceProxy3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = user0.parkingProxy;
        java.lang.Object obj13 = user0.login("empty", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking16 = parkingSpaceProxy14.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy14.getFacade();
        boolean boolean19 = parkingSpaceProxy14.checkOut("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj24 = parkingSpaceProxy21.login("empty", "Jane");
        parkingSpaceProxy21.validateClient("Jane");
        parkingSpaceProxy21.toggleSpace("", "staff", false);
        boolean boolean32 = parkingSpaceProxy21.cancelBooking("Jane");
        boolean boolean34 = parkingSpaceProxy21.checkOut("empty");
        boolean boolean44 = parkingSpaceProxy21.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        boolean boolean50 = parkingSpaceProxy21.register("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "02659ad3-0b5c-4c48-a915-a466f2b50775", "Paid $ 100.0 with Mobile Pay");
        user0.assignProxy(parkingSpaceProxy21);
        boolean boolean53 = parkingSpaceProxy21.checkOut("0b35479f-5869-423e-9abc-e4ab9cef903d");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking11 = parkingSpace10.getCurrentBooking();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.Disabled disabled13 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace14 = null;
        java.lang.String str15 = disabled13.scanSpace(parkingSpace14);
        ParkingSystem.ParkingSpace parkingSpace16 = null;
        java.lang.String str17 = disabled13.scanSpace(parkingSpace16);
        parkingSpace10.setState((ParkingSystem.SpaceState) disabled13);
        ParkingSystem.Enabled enabled19 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot21 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking23 = null;
        boolean boolean24 = parkingLot21.assignBooking(0, booking23);
        boolean boolean26 = parkingLot21.isSpaceAvailable((int) '#');
        boolean boolean28 = parkingLot21.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace30 = parkingLot21.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking31 = parkingSpace30.getCurrentBooking();
        parkingSpace30.removeBooking();
        java.lang.String str33 = enabled19.scanSpace(parkingSpace30);
        ParkingSystem.ParkingLot parkingLot35 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking37 = null;
        boolean boolean38 = parkingLot35.assignBooking(0, booking37);
        boolean boolean40 = parkingLot35.isSpaceAvailable((int) '#');
        boolean boolean42 = parkingLot35.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace44 = parkingLot35.getParkingSpace((int) (byte) 10);
        int int45 = parkingSpace44.getSpaceId();
        ParkingSystem.Booking booking46 = parkingSpace44.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager47 = new ParkingSystem.SpaceManager();
        boolean boolean50 = spaceManager47.isSpaceAvailable("hi!", (int) '#');
        spaceManager47.toggleLot("disabled", false);
        ParkingSystem.Booking booking63 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean64 = spaceManager47.assignBooking("empty", (int) (short) 0, booking63);
        boolean boolean65 = parkingSpace44.assignBooking(booking63);
        java.lang.String str66 = enabled19.scanSpace(parkingSpace44);
        ParkingSystem.ParkingLot parkingLot68 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking70 = null;
        boolean boolean71 = parkingLot68.assignBooking(0, booking70);
        boolean boolean73 = parkingLot68.isSpaceAvailable((int) '#');
        boolean boolean75 = parkingLot68.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace77 = parkingLot68.getParkingSpace((int) (byte) 10);
        int int78 = parkingSpace77.getSpaceId();
        ParkingSystem.Booking booking79 = parkingSpace77.getCurrentBooking();
        java.lang.String str80 = parkingSpace77.scanSpace();
        int int81 = parkingSpace77.getSpaceId();
        ParkingSystem.Booking booking82 = parkingSpace77.getCurrentBooking();
        java.lang.String str83 = enabled19.scanSpace(parkingSpace77);
        java.lang.String str84 = parkingSpace77.scanSpace();
        java.lang.String str85 = disabled13.scanSpace(parkingSpace77);
        int int86 = parkingSpace77.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNull(booking11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(parkingSpace30);
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "empty" + "'", str33, "empty");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpace44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNull(booking46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(parkingSpace77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNull(booking79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "empty" + "'", str80, "empty");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNull(booking82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "empty" + "'", str83, "empty");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "empty" + "'", str84, "empty");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "disabled" + "'", str85, "disabled");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        java.lang.String str6 = paymentManager0.paymentMessage;
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) (byte) 10, 100.0d);
        paymentManager0.refundMessage = "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3";
        paymentManager0.refundMessage = "";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkIn("Jane");
        boolean boolean5 = checkInManager1.checkOut("disabled");
        checkInManager1.refundMessage = "13b04414-31a5-407f-8ea3-fba4613c73d1";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.toggleSpace("Refunded without deposit ($0.0)", "disabled", false);
        spaceManager0.addParkingLot("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        spaceManager0.toggleSpace("4a1f2343-8b2e-4dea-ba69-efd105414390", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        double double22 = bookingManager0.getDeposit("3b453211-7dd1-4452-8741-a206711c1217");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 15.0d + "'", double22 == 15.0d);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean16 = debitOrCredit6.validateCard("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) (short) 1);
        boolean boolean19 = debitOrCredit6.validateCard("433f3d1f-f758-4ae3-972b-7fb179aedfd7", (double) (short) 1);
        boolean boolean24 = debitOrCredit6.processPayment("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 15.0d, "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5");
        java.lang.String str25 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Card number should be 16 digits" + "'", str25, "Card number should be 16 digits");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry11 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry11);
        superManager7.registry = accountRegistry11;
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("empty", "empty", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", accountRegistry11);
        boolean boolean20 = accountRegistry11.registerClient("staff", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "", "hi!", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        accountRegistry11.validateClient("86z9Z9e0MN");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        boolean boolean6 = parkingSpaceProxy0.extendBooking("", 100);
        boolean boolean10 = parkingSpaceProxy0.editBooking("Paid $ 10.0 with Mobile Pay", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (short) 10);
        boolean boolean13 = parkingSpaceProxy0.extendBooking("86z9Z9e0MN", 100);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        java.lang.String str4 = parkingSpaceProxy0.scanSpace("empty", "hi!");
        parkingSpaceProxy0.addParkingLot("empty");
        parkingSpaceProxy0.addParkingLot("");
        boolean boolean11 = parkingSpaceProxy0.extendBooking("disabled", (int) '#');
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        java.lang.String str9 = booking7.getClientId();
        int int10 = booking7.getSpaceId();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime11 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "staff" + "'", str9, "staff");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        boolean boolean12 = parkingLot1.isSpaceAvailable(10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Strategy strategy16 = null;
        paymentManager0.setStrategy(strategy16);
        java.lang.String str18 = paymentManager0.refundMessage;
        paymentManager0.refundMessage = "Paid $ 0.0 with Mobile Pay";
        boolean boolean22 = paymentManager0.refundDeposit(165.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str18, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        checkInManager1.refundMessage = "staff";
        checkInManager1.refundMessage = "Refunded total cost of $1.0";
        checkInManager1.refundMessage = "86z9Z9e0MN";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        boolean boolean15 = debitOrCredit6.validateCard("CLT-30fd593b-dedd-41b3-a919-c48700301f41", 165.0d);
        java.lang.String str16 = debitOrCredit6.getPaymentMessage();
        java.lang.String str17 = debitOrCredit6.getPaymentMessage();
        boolean boolean20 = debitOrCredit6.validateCard("", (double) (-1L));
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Card number should be 16 digits" + "'", str16, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Card number should be 16 digits" + "'", str17, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.Disabled disabled21 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace22 = null;
        java.lang.String str23 = disabled21.scanSpace(parkingSpace22);
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot26 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking28 = null;
        boolean boolean29 = parkingLot26.assignBooking(0, booking28);
        boolean boolean31 = parkingLot26.isSpaceAvailable((int) '#');
        boolean boolean33 = parkingLot26.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace35 = parkingLot26.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking36 = parkingSpace35.getCurrentBooking();
        parkingSpace35.removeBooking();
        java.lang.String str38 = enabled24.scanSpace(parkingSpace35);
        ParkingSystem.ParkingLot parkingLot40 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot40.assignBooking(0, booking42);
        boolean boolean45 = parkingLot40.isSpaceAvailable((int) '#');
        boolean boolean47 = parkingLot40.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace49 = parkingLot40.getParkingSpace((int) (byte) 10);
        int int50 = parkingSpace49.getSpaceId();
        ParkingSystem.Booking booking51 = parkingSpace49.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager52 = new ParkingSystem.SpaceManager();
        boolean boolean55 = spaceManager52.isSpaceAvailable("hi!", (int) '#');
        spaceManager52.toggleLot("disabled", false);
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean69 = spaceManager52.assignBooking("empty", (int) (short) 0, booking68);
        boolean boolean70 = parkingSpace49.assignBooking(booking68);
        java.lang.String str71 = enabled24.scanSpace(parkingSpace49);
        java.lang.String str72 = disabled21.scanSpace(parkingSpace49);
        user0.user = str72;
        user0.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "Jane", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Client client80 = ParkingSystem.Client.getInstance();
        java.lang.String str81 = client80.getName();
        java.lang.String str82 = client80.getClientId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy83 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj86 = parkingSpaceProxy83.login("empty", "Jane");
        parkingSpaceProxy83.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        client80.assignProxy(parkingSpaceProxy83);
        user0.user = parkingSpaceProxy83;
        java.lang.Object obj93 = user0.user;
        java.lang.Object obj94 = user0.user;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingSpace35);
        org.junit.Assert.assertNull(booking36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "empty" + "'", str38, "empty");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parkingSpace49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNull(booking51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "disabled" + "'", str71, "disabled");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "disabled" + "'", str72, "disabled");
        org.junit.Assert.assertNotNull(client80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str81, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
// flaky "24) test0618(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "CLT-55105d92-54d6-44d2-965a-736022b7f7cd" + "'", str82, "CLT-55105d92-54d6-44d2-965a-736022b7f7cd");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        int int12 = parkingSpace11.getSpaceId();
        ParkingSystem.Booking booking13 = parkingSpace11.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager14 = new ParkingSystem.SpaceManager();
        boolean boolean17 = spaceManager14.isSpaceAvailable("hi!", (int) '#');
        spaceManager14.toggleLot("disabled", false);
        ParkingSystem.Booking booking30 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean31 = spaceManager14.assignBooking("empty", (int) (short) 0, booking30);
        boolean boolean32 = parkingSpace11.assignBooking(booking30);
        java.lang.String str33 = disabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot35 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking37 = null;
        boolean boolean38 = parkingLot35.assignBooking(0, booking37);
        boolean boolean40 = parkingLot35.isSpaceAvailable((int) '#');
        boolean boolean42 = parkingLot35.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace44 = parkingLot35.getParkingSpace((int) (byte) 10);
        int int45 = parkingSpace44.getSpaceId();
        ParkingSystem.Booking booking46 = parkingSpace44.getCurrentBooking();
        java.lang.String str47 = parkingSpace44.scanSpace();
        int int48 = parkingSpace44.getSpaceId();
        ParkingSystem.Booking booking49 = parkingSpace44.getCurrentBooking();
        java.lang.String str50 = disabled0.scanSpace(parkingSpace44);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "disabled" + "'", str33, "disabled");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpace44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNull(booking46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "empty" + "'", str47, "empty");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNull(booking49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "disabled" + "'", str50, "disabled");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        boolean boolean34 = parkingSpaceProxy15.checkIn("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        java.lang.String str15 = client0.getClientType();
        boolean boolean16 = client0.checkOut();
        java.lang.String str17 = client0.getUsername();
        org.junit.Assert.assertNotNull(client0);
// flaky "25) test0621(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        java.lang.String str29 = booking25.getClientId();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "staff" + "'", str29, "staff");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade3.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = spaceManager4.getParkingLots();
        cSVManager0.saveParkingLots(strMap5);
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry12 = parkingSpaceProxy11.getRegistry();
        boolean boolean14 = parkingSpaceProxy11.checkIn("");
        client7.assignProxy(parkingSpaceProxy11);
        boolean boolean16 = client7.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        client7.assignProxy(parkingSpaceProxy17);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        client7.assignProxy(parkingSpaceProxy19);
        cSVManager0.saveClient(client7);
        ParkingSystem.CSVManager cSVManager22 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray23 = cSVManager22.loadSuperManager();
        java.lang.String[] strArray24 = cSVManager22.loadSuperManager();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getName();
        client25.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry30 = parkingSpaceProxy29.getRegistry();
        boolean boolean32 = parkingSpaceProxy29.checkIn("");
        client25.assignProxy(parkingSpaceProxy29);
        boolean boolean34 = client25.cancelBooking();
        java.lang.String str35 = client25.getExtraId();
        java.lang.String str36 = client25.getName();
        client25.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager22.saveClient(client25);
        ParkingSystem.AccountRegistry accountRegistry49 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager50 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry49);
        java.lang.String str51 = superManager50.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry55 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager56 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry55);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy58 = null;
        accountRegistry55.assignProxyToManager("disabled", parkingSpaceProxy58);
        superManager50.registry = accountRegistry55;
        cSVManager22.saveManager((ParkingSystem.Manager) superManager50);
        cSVManager0.saveManager((ParkingSystem.Manager) superManager50);
        java.util.List<java.lang.String[]> strArrayList64 = cSVManager0.readCSV("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertNotNull(strArray1);
// flaky "26) test0623(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "12) test0623(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(client7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
// flaky "7) test0623(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray23, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray24);
// flaky "5) test0623(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(superManager50);
// flaky "2) test0623(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str51, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager56);
        org.junit.Assert.assertNotNull(strArrayList64);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry12.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        client0.assignProxy(parkingSpaceProxy10);
        ParkingSystem.Booking booking12 = client0.getBookingDetails();
        java.lang.String str13 = client0.getClientId();
        boolean boolean14 = client0.getIsValidated();
        java.lang.String str15 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
// flaky "27) test0626(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jane" + "'", str1, "Jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(booking12);
// flaky "13) test0626(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841" + "'", str13, "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky "8) test0626(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "staff" + "'", str15, "staff");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        java.lang.String str9 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        boolean boolean12 = spaceManager0.isSpaceAvailable("Refunded without deposit ($0.0)", 10);
        spaceManager0.removeBooking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", (int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disabled" + "'", str9, "disabled");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry6.displayPendingValidations();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        boolean boolean21 = accountRegistry18.requiresValidation("disabled");
        int int22 = accountRegistry18.getManagersSize();
        ParkingSystem.SuperManager superManager23 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry18);
        ParkingSystem.AccountRegistry accountRegistry24 = superManager23.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry27 = parkingSpaceProxy26.getRegistry();
        boolean boolean33 = parkingSpaceProxy26.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean37 = parkingSpaceProxy26.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean47 = parkingSpaceProxy26.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        accountRegistry24.assignProxyToManager("empty", parkingSpaceProxy26);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy50 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade51 = parkingSpaceProxy50.getFacade();
        accountRegistry24.assignProxyToManager("", parkingSpaceProxy50);
        parkingSpaceProxy50.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean56 = parkingSpaceProxy50.cancelBooking("Paid $ -1.0 with Mobile Pay");
        accountRegistry6.assignProxyToManager("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", parkingSpaceProxy50);
        java.lang.Object obj60 = parkingSpaceProxy50.login("Refunded without deposit ($-42.0)", "jane");
        java.lang.Object obj63 = parkingSpaceProxy50.login("staff", "empty");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(superManager23);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(accountRegistry27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean25 = parkingLot10.assignBooking((int) (short) -1, booking24);
        java.lang.String str26 = booking24.getLotId();
        boolean boolean27 = parkingLot1.assignBooking(0, booking24);
        ParkingSystem.ParkingLotIterator parkingLotIterator28 = parkingLot1.getIterator();
        boolean boolean29 = parkingLot1.isEnabled();
        parkingLot1.removeBooking(10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.Client client24 = ParkingSystem.Client.getInstance();
        java.lang.String str25 = client24.getName();
        client24.setValidated(true);
        ParkingSystem.Booking booking28 = client24.getBookingDetails();
        java.lang.String str29 = client24.getUsername();
        java.lang.String str30 = client24.getUsername();
        ParkingSystem.Booking booking31 = client24.getBookingDetails();
        cSVManager0.saveClient(client24);
        java.lang.String[] strArray33 = cSVManager0.loadSuperManager();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "28) test0630(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "14) test0630(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "empty" + "'", str4, "empty");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "jane" + "'", str13, "jane");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertNotNull(client24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "empty" + "'", str25, "empty");
        org.junit.Assert.assertNull(booking28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jane" + "'", str29, "Jane");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Jane" + "'", str30, "Jane");
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertNotNull(strArray33);
// flaky "9) test0630(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray33, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry5 = superManager4.getRegistry();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap6 = accountRegistry5.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry9 = parkingSpaceProxy8.getRegistry();
        java.lang.String str12 = parkingSpaceProxy8.scanSpace("empty", "hi!");
        boolean boolean22 = parkingSpaceProxy8.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy8.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean32 = parkingSpaceProxy8.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry5.assignProxyToManager("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", parkingSpaceProxy8);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(accountRegistry9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean10 = debitOrCredit6.validateCard("Refunded without deposit ($-96.0)", (double) (short) 0);
        boolean boolean13 = debitOrCredit6.validateCard("", (double) (short) 10);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        java.util.List<java.lang.String[]> strArrayList25 = cSVManager0.readCSV("Jane");
        ParkingSystem.AccountRegistry accountRegistry35 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager36 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry35);
        boolean boolean38 = accountRegistry35.requiresValidation("disabled");
        int int39 = accountRegistry35.getManagersSize();
        ParkingSystem.SuperManager superManager40 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry35);
        ParkingSystem.AccountRegistry accountRegistry41 = superManager40.getRegistry();
        accountRegistry41.validateClient("pass");
        ParkingSystem.SuperManager superManager44 = ParkingSystem.SuperManager.createFromCSV("Refunded total cost of $1.0", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", accountRegistry41);
        cSVManager0.saveManager((ParkingSystem.Manager) superManager44);
        ParkingSystem.CSVManager cSVManager46 = new ParkingSystem.CSVManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = null;
        cSVManager46.loadParkingLots(strMap47);
        ParkingSystem.CSVManager cSVManager49 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList51 = cSVManager49.readCSV("");
        java.util.List<java.lang.String[]> strArrayList53 = cSVManager49.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap54 = null;
        cSVManager49.loadParkingLots(strMap54);
        ParkingSystem.AccountRegistry accountRegistry59 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager60 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry59);
        ParkingSystem.Manager manager61 = superManager60.autoGenerateManager();
        cSVManager49.saveManager((ParkingSystem.Manager) superManager60);
        ParkingSystem.SpaceManager spaceManager63 = new ParkingSystem.SpaceManager();
        boolean boolean66 = spaceManager63.isSpaceAvailable("hi!", (int) '#');
        spaceManager63.toggleLot("disabled", false);
        ParkingSystem.Booking booking79 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean80 = spaceManager63.assignBooking("empty", (int) (short) 0, booking79);
        spaceManager63.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap82 = spaceManager63.getParkingLots();
        cSVManager49.loadParkingLots(strMap82);
        ParkingSystem.SpaceManager spaceManager84 = new ParkingSystem.SpaceManager();
        boolean boolean87 = spaceManager84.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str90 = spaceManager84.scanSpace("disabled", "");
        spaceManager84.addParkingLot("hi!");
        java.lang.String str95 = spaceManager84.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap96 = spaceManager84.getParkingLots();
        cSVManager49.saveParkingLots(strMap96);
        cSVManager46.saveParkingLots(strMap96);
        cSVManager0.saveParkingLots(strMap96);
        org.junit.Assert.assertNotNull(strArray1);
// flaky "29) test0633(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "15) test0633(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
// flaky "10) test0633(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str4, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky "6) test0633(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3" + "'", str13, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
// flaky "3) test0633(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str14, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(superManager36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(superManager40);
        org.junit.Assert.assertNotNull(accountRegistry41);
        org.junit.Assert.assertNotNull(superManager44);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(superManager60);
        org.junit.Assert.assertNotNull(manager61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "disabled" + "'", str90, "disabled");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "disabled" + "'", str95, "disabled");
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager21 = bookingManager0.getSpaceManager();
        spaceManager21.toggleSpace("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "", false);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager21);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap28 = accountRegistry3.getManagers();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap5 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        java.lang.String str11 = parkingSpaceProxy7.scanSpace("empty", "hi!");
        boolean boolean21 = parkingSpaceProxy7.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy7.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean31 = parkingSpaceProxy7.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        accountRegistry3.assignProxyToManager("7aecb00c-028c-4dcf-96cc-14d25bd709ab", parkingSpaceProxy7);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap33 = accountRegistry3.getManagers();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadManagersFromCSV();
// flaky "30) test0636(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        double double19 = bookingManager0.getDeposit("02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 15.0d + "'", double19 == 15.0d);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        booking25.setStartTime("");
        int int34 = booking25.getDuration();
        booking25.setCheckedIn(false);
        boolean boolean37 = booking25.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        java.lang.String str4 = client0.getExtraId();
        java.lang.String str5 = client0.getClientId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Refunded total cost of $1.0" + "'", str4, "Refunded total cost of $1.0");
// flaky "31) test0639(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d" + "'", str5, "CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade3.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = spaceManager4.getParkingLots();
        cSVManager0.saveParkingLots(strMap5);
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry12 = parkingSpaceProxy11.getRegistry();
        boolean boolean14 = parkingSpaceProxy11.checkIn("");
        client7.assignProxy(parkingSpaceProxy11);
        boolean boolean16 = client7.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        client7.assignProxy(parkingSpaceProxy17);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        client7.assignProxy(parkingSpaceProxy19);
        cSVManager0.saveClient(client7);
        ParkingSystem.CSVManager cSVManager22 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList24 = cSVManager22.readCSV("");
        java.util.List<java.lang.String[]> strArrayList26 = cSVManager22.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap27 = null;
        cSVManager22.loadParkingLots(strMap27);
        ParkingSystem.AccountRegistry accountRegistry32 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager33 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry32);
        ParkingSystem.Manager manager34 = superManager33.autoGenerateManager();
        cSVManager22.saveManager((ParkingSystem.Manager) superManager33);
        ParkingSystem.SpaceManager spaceManager36 = new ParkingSystem.SpaceManager();
        boolean boolean39 = spaceManager36.isSpaceAvailable("hi!", (int) '#');
        spaceManager36.toggleLot("disabled", false);
        ParkingSystem.Booking booking52 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean53 = spaceManager36.assignBooking("empty", (int) (short) 0, booking52);
        spaceManager36.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap55 = spaceManager36.getParkingLots();
        cSVManager22.loadParkingLots(strMap55);
        ParkingSystem.SpaceManager spaceManager57 = new ParkingSystem.SpaceManager();
        boolean boolean60 = spaceManager57.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str63 = spaceManager57.scanSpace("disabled", "");
        spaceManager57.addParkingLot("hi!");
        java.lang.String str68 = spaceManager57.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap69 = spaceManager57.getParkingLots();
        cSVManager22.saveParkingLots(strMap69);
        cSVManager0.saveParkingLots(strMap69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList72 = cSVManager0.loadManagers();
// flaky "32) test0640(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
// flaky "16) test0640(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "11) test0640(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(client7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArrayList24);
        org.junit.Assert.assertNotNull(strArrayList26);
        org.junit.Assert.assertNotNull(superManager33);
        org.junit.Assert.assertNotNull(manager34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "disabled" + "'", str63, "disabled");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "disabled" + "'", str68, "disabled");
        org.junit.Assert.assertNotNull(strMap69);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "CLT-f02c481e-1504-4abf-b598-76152da8586a", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "433f3d1f-f758-4ae3-972b-7fb179aedfd7", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "Jane", true);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap3 = bookingManager0.getActiveBookings();
        double double6 = bookingManager0.calculateCost("CLT-035180a0-4707-410d-a011-2a4f0f46838b", (int) (short) 0);
        boolean boolean8 = bookingManager0.cancelBooking("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        boolean boolean13 = bookingManager0.extendBooking("qPYDfDnbtD", (-1), "CLT-55105d92-54d6-44d2-965a-736022b7f7cd", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        boolean boolean13 = accountRegistry6.requiresValidation("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        ParkingSystem.Client client15 = ParkingSystem.Client.getInstance();
        java.lang.String str16 = client15.getName();
        client15.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str25 = client15.getUsername();
        java.lang.String str26 = client15.getPassword();
        java.lang.String str27 = client15.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy28 = null;
        client15.assignProxy(parkingSpaceProxy28);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        client15.assignProxy(parkingSpaceProxy30);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking37 = parkingSpaceProxy35.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry38 = parkingSpaceProxy35.getRegistry();
        parkingSpaceProxy35.autoGenerateManager();
        client15.assignProxy(parkingSpaceProxy35);
        boolean boolean44 = parkingSpaceProxy35.editBooking("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded total cost of $100.0", (int) (byte) 0);
        accountRegistry6.assignProxyToClient("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", parkingSpaceProxy35);
        parkingSpaceProxy35.addParkingLot("jane");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(client15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CLT-f02c481e-1504-4abf-b598-76152da8586a" + "'", str16, "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(booking37);
        org.junit.Assert.assertNotNull(accountRegistry38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        java.lang.String str2 = client0.getClientId();
        boolean boolean10 = client0.confirmBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "2afd610d-a8cb-413a-bbee-7927f86b526c", 32, "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 1, "Refunded without deposit ($0.0)", "disabled");
        java.lang.String str11 = client0.getExtraId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        java.lang.String str4 = paymentManager0.paymentMessage;
        ParkingSystem.BookingManager bookingManager5 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager6 = new ParkingSystem.CheckInManager(bookingManager5);
        ParkingSystem.Booking booking8 = bookingManager5.getBooking("");
        ParkingSystem.SpaceManager spaceManager9 = bookingManager5.getSpaceManager();
        boolean boolean19 = bookingManager5.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double21 = bookingManager5.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit22 = new ParkingSystem.DebitOrCredit();
        bookingManager5.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit22);
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit22);
        java.lang.String str25 = paymentManager0.refundMessage;
        java.lang.String str26 = paymentManager0.refundMessage;
        java.lang.String str27 = paymentManager0.refundMessage;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(booking8);
        org.junit.Assert.assertNotNull(spaceManager9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Refunded total cost of $-1.0" + "'", str25, "Refunded total cost of $-1.0");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Refunded total cost of $-1.0" + "'", str26, "Refunded total cost of $-1.0");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Refunded total cost of $-1.0" + "'", str27, "Refunded total cost of $-1.0");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.Disabled disabled21 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace22 = null;
        java.lang.String str23 = disabled21.scanSpace(parkingSpace22);
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot26 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking28 = null;
        boolean boolean29 = parkingLot26.assignBooking(0, booking28);
        boolean boolean31 = parkingLot26.isSpaceAvailable((int) '#');
        boolean boolean33 = parkingLot26.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace35 = parkingLot26.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking36 = parkingSpace35.getCurrentBooking();
        parkingSpace35.removeBooking();
        java.lang.String str38 = enabled24.scanSpace(parkingSpace35);
        ParkingSystem.ParkingLot parkingLot40 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot40.assignBooking(0, booking42);
        boolean boolean45 = parkingLot40.isSpaceAvailable((int) '#');
        boolean boolean47 = parkingLot40.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace49 = parkingLot40.getParkingSpace((int) (byte) 10);
        int int50 = parkingSpace49.getSpaceId();
        ParkingSystem.Booking booking51 = parkingSpace49.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager52 = new ParkingSystem.SpaceManager();
        boolean boolean55 = spaceManager52.isSpaceAvailable("hi!", (int) '#');
        spaceManager52.toggleLot("disabled", false);
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean69 = spaceManager52.assignBooking("empty", (int) (short) 0, booking68);
        boolean boolean70 = parkingSpace49.assignBooking(booking68);
        java.lang.String str71 = enabled24.scanSpace(parkingSpace49);
        java.lang.String str72 = disabled21.scanSpace(parkingSpace49);
        user0.user = str72;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy74 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry75 = parkingSpaceProxy74.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy77 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj80 = parkingSpaceProxy77.login("empty", "Jane");
        parkingSpaceProxy77.validateClient("Jane");
        parkingSpaceProxy77.toggleSpace("", "staff", false);
        accountRegistry75.assignProxyToManager("pass", parkingSpaceProxy77);
        user0.assignProxy(parkingSpaceProxy77);
        parkingSpaceProxy77.toggleSpace("25527a32-01ef-45ba-816a-1d0a2fc2a52d", "ST001", false);
        parkingSpaceProxy77.autoGenerateManager();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingSpace35);
        org.junit.Assert.assertNull(booking36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "empty" + "'", str38, "empty");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parkingSpace49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNull(booking51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "disabled" + "'", str71, "disabled");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "disabled" + "'", str72, "disabled");
        org.junit.Assert.assertNotNull(accountRegistry75);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList7 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "33) test0647(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        java.util.List<ParkingSystem.Client> clientList31 = accountRegistry24.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry34 = parkingSpaceProxy33.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj39 = parkingSpaceProxy36.login("empty", "Jane");
        parkingSpaceProxy36.validateClient("Jane");
        parkingSpaceProxy36.toggleSpace("", "staff", false);
        accountRegistry34.assignProxyToManager("pass", parkingSpaceProxy36);
        accountRegistry24.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy36);
        ParkingSystem.Manager manager48 = accountRegistry24.autoGenerateManager();
        java.util.List<ParkingSystem.Client> clientList49 = accountRegistry24.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
// flaky "34) test0648(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str5, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
// flaky "17) test0648(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str20, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(clientList31);
        org.junit.Assert.assertNotNull(accountRegistry34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(manager48);
        org.junit.Assert.assertNotNull(clientList49);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        boolean boolean6 = paymentManager0.refundDeposit((double) 1);
        paymentManager0.paymentMessage = "Paid $ 10.0 with Mobile Pay";
        ParkingSystem.BookingManager bookingManager9 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager10 = new ParkingSystem.CheckInManager(bookingManager9);
        ParkingSystem.SpaceManager spaceManager11 = bookingManager9.getSpaceManager();
        double double14 = bookingManager9.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit15 = new ParkingSystem.DebitOrCredit();
        bookingManager9.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit15);
        boolean boolean21 = debitOrCredit15.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str22 = debitOrCredit15.getPaymentMessage();
        boolean boolean27 = debitOrCredit15.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean30 = debitOrCredit15.validateCard("Jane", (double) '4');
        java.lang.String str31 = debitOrCredit15.getPaymentMessage();
        boolean boolean36 = debitOrCredit15.processPayment("02659ad3-0b5c-4c48-a915-a466f2b50775", 0.0d, "TXCrKOGD", "02659ad3-0b5c-4c48-a915-a466f2b50775");
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit15);
        boolean boolean39 = paymentManager0.refundDeposit((double) (byte) 1);
        java.lang.String str40 = paymentManager0.paymentMessage;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(spaceManager11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 165.0d + "'", double14 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Card number should be 16 digits" + "'", str31, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str40, "Paid $ 10.0 with Mobile Pay");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.Manager manager14 = superManager11.autoGenerateManager();
        java.lang.String str15 = manager14.getManagerId();
        java.lang.String str16 = manager14.getPassword();
        java.lang.String str17 = manager14.getPassword();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(manager14);
// flaky "35) test0650(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8ca2ec61-774c-409d-89d5-5b9171b40497" + "'", str15, "8ca2ec61-774c-409d-89d5-5b9171b40497");
// flaky "18) test0650(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "K6PkM9rcCx" + "'", str16, "K6PkM9rcCx");
// flaky "12) test0650(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "K6PkM9rcCx" + "'", str17, "K6PkM9rcCx");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        boolean boolean48 = parkingSpace25.isAvailable();
        int int49 = parkingSpace25.getSpaceId();
        ParkingSystem.Disabled disabled50 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingLot parkingLot52 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking54 = null;
        boolean boolean55 = parkingLot52.assignBooking(0, booking54);
        boolean boolean57 = parkingLot52.isSpaceAvailable((int) '#');
        boolean boolean59 = parkingLot52.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace61 = parkingLot52.getParkingSpace((int) (byte) 10);
        int int62 = parkingSpace61.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace61.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager64 = new ParkingSystem.SpaceManager();
        boolean boolean67 = spaceManager64.isSpaceAvailable("hi!", (int) '#');
        spaceManager64.toggleLot("disabled", false);
        ParkingSystem.Booking booking80 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean81 = spaceManager64.assignBooking("empty", (int) (short) 0, booking80);
        boolean boolean82 = parkingSpace61.assignBooking(booking80);
        java.lang.String str83 = disabled50.scanSpace(parkingSpace61);
        parkingSpace25.setState((ParkingSystem.SpaceState) disabled50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(parkingSpace61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "disabled" + "'", str83, "disabled");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        boolean boolean9 = accountRegistry3.requiresValidation("disabled");
        int int10 = accountRegistry3.getManagersSize();
        java.lang.Object obj13 = accountRegistry3.login("ST001", "staff");
        java.util.List<ParkingSystem.Client> clientList14 = accountRegistry3.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(clientList14);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingLotIterator parkingLotIterator9 = parkingLot1.getIterator();
        boolean boolean10 = parkingLot1.isEnabled();
        boolean boolean12 = parkingLot1.isSpaceAvailable((int) (short) -1);
        ParkingSystem.Booking booking21 = new ParkingSystem.Booking("Jane", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", 100, "jane", (int) (short) 1, "pass", (double) 10);
        boolean boolean22 = parkingLot1.assignBooking((int) '4', booking21);
        boolean boolean24 = parkingLot1.isSpaceAvailable((int) (byte) -1);
        boolean boolean25 = parkingLot1.isEnabled();
        parkingLot1.removeBooking(100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = parkingSpaceFacade0.scanSpace("jane", "Refunded without deposit ($0.0)");
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("Jane", "");
        ParkingSystem.Booking booking12 = parkingSpaceFacade0.getBookingDetails("4a1f2343-8b2e-4dea-ba69-efd105414390");
        boolean boolean22 = parkingSpaceFacade0.confirmBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", "02659ad3-0b5c-4c48-a915-a466f2b50775", 32, "02659ad3-0b5c-4c48-a915-a466f2b50775", (int) (short) 0, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "89de8237-29df-4908-9de4-6dc1ce90de94");
        ParkingSystem.CheckInManager checkInManager23 = parkingSpaceFacade0.getCheckInManager();
        checkInManager23.refundMessage = "disabled";
        java.lang.String str26 = checkInManager23.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(checkInManager23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.DebitOrCredit debitOrCredit17 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit17);
        ParkingSystem.CheckInManager checkInManager19 = new ParkingSystem.CheckInManager(bookingManager0);
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap20 = bookingManager0.getActiveBookings();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap21 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager22 = bookingManager0.getSpaceManager();
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(spaceManager22);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.toggleLot("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", true);
        ParkingSystem.Booking booking19 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double20 = booking19.getTotalCost();
        java.lang.String str21 = booking19.getStartTime();
        boolean boolean22 = spaceManager0.assignBooking("4a1f2343-8b2e-4dea-ba69-efd105414390", (int) ' ', booking19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Jane" + "'", str21, "Jane");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        ParkingSystem.SpaceManager spaceManager32 = new ParkingSystem.SpaceManager();
        boolean boolean35 = spaceManager32.isSpaceAvailable("hi!", (int) '#');
        spaceManager32.toggleLot("disabled", false);
        ParkingSystem.Booking booking48 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean49 = spaceManager32.assignBooking("empty", (int) (short) 0, booking48);
        boolean boolean50 = booking48.isCheckedIn();
        java.lang.String str51 = booking48.getClientId();
        boolean boolean52 = parkingSpace10.assignBooking(booking48);
        booking48.setCheckedIn(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "staff" + "'", str51, "staff");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingLotIterator parkingLotIterator9 = parkingLot1.getIterator();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator9);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        ParkingSystem.User user2 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        boolean boolean14 = parkingSpaceProxy3.cancelBooking("");
        user2.assignProxy(parkingSpaceProxy3);
        client0.assignProxy(parkingSpaceProxy3);
        java.lang.String str17 = client0.getClientId();
        java.lang.String str18 = client0.getClientType();
        java.lang.String str19 = client0.getClientId();
        ParkingSystem.Booking booking20 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "36) test0659(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str1, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky "19) test0659(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04" + "'", str17, "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04");
// flaky "13) test0659(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9701df9a-2178-4ad5-8076-46ff5f05b3e8" + "'", str18, "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
// flaky "7) test0659(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04" + "'", str19, "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04");
        org.junit.Assert.assertNull(booking20);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        java.lang.String str4 = checkInManager1.refundMessage;
        java.lang.String str5 = checkInManager1.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean18 = client0.extendBooking((int) '#');
        java.lang.String str19 = client0.getClientId();
        java.lang.String str20 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
// flaky "37) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str1, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "20) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str10, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
// flaky "14) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str11, "Refunded without deposit ($-96.0)");
// flaky "8) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str12, "Refunded without deposit ($-96.0)");
// flaky "4) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9701df9a-2178-4ad5-8076-46ff5f05b3e8" + "'", str13, "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky "1) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04" + "'", str19, "CLT-23b57c8a-84c7-41fe-9781-bfe8a8f3fc04");
// flaky "1) test0661(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9701df9a-2178-4ad5-8076-46ff5f05b3e8" + "'", str20, "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        java.lang.String str6 = superManager4.getPassword();
        superManager4.displayPendingValidations();
        superManager4.setManagerInfo("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        ParkingSystem.AccountRegistry accountRegistry12 = superManager4.getRegistry();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry12.loadSuperManagerFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
// flaky "38) test0662(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded total cost of $1.0" + "'", str6, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry12);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getUsername();
        java.lang.String str15 = client0.getPassword();
        boolean boolean16 = client0.getIsValidated();
        org.junit.Assert.assertNotNull(client0);
// flaky "39) test0663(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str1, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.CheckInManager checkInManager18 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean20 = checkInManager18.checkOut("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        boolean boolean13 = client0.extendBooking(0);
        org.junit.Assert.assertNotNull(client0);
// flaky "40) test0665(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str1, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "21) test0665(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        client0.assignProxy(parkingSpaceProxy15);
        java.lang.String str20 = client0.getClientId();
        java.lang.String str21 = client0.getExtraId();
        org.junit.Assert.assertNotNull(client0);
// flaky "41) test0666(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str1, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean6 = paymentManager0.processPayment("pass", (double) 1, "Paid $ 10.0 with Mobile Pay", "Jane");
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) (short) -1, (double) (short) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getLotId();
        int int9 = booking7.getSpaceId();
        int int10 = booking7.getDuration();
        java.lang.String str11 = booking7.getStartTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime12 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Jane' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jane" + "'", str11, "Jane");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        parkingSpaceProxy18.toggleLot("disabled", false);
        java.lang.Object obj35 = parkingSpaceProxy18.login("Refunded without deposit ($-42.0)", "86z9Z9e0MN");
        java.lang.String str38 = parkingSpaceProxy18.scanSpace("Paid $ 0.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str5, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "disabled" + "'", str38, "disabled");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.SpaceState spaceState11 = parkingSpace10.getState();
        java.lang.String str12 = parkingSpace10.scanSpace();
        ParkingSystem.Booking booking13 = parkingSpace10.getCurrentBooking();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNotNull(spaceState11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertNull(booking13);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        accountRegistry28.assignProxyToManager("pass", parkingSpaceProxy30);
        boolean boolean46 = parkingSpaceProxy30.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled", "Refunded total cost of $1.0", "", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy30;
        java.lang.Object obj48 = user0.user;
        ParkingSystem.Client client49 = ParkingSystem.Client.getInstance();
        java.lang.String str50 = client49.getName();
        client49.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy53 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry54 = parkingSpaceProxy53.getRegistry();
        boolean boolean56 = parkingSpaceProxy53.checkIn("");
        client49.assignProxy(parkingSpaceProxy53);
        boolean boolean58 = client49.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy59 = new ParkingSystem.ParkingSpaceProxy();
        client49.assignProxy(parkingSpaceProxy59);
        ParkingSystem.AccountRegistry accountRegistry61 = parkingSpaceProxy59.getRegistry();
        boolean boolean65 = parkingSpaceProxy59.editBooking("pass", "Refunded without deposit ($0.0)", 1);
        user0.parkingProxy = parkingSpaceProxy59;
        java.lang.String str69 = parkingSpaceProxy59.scanSpace("", "Paid $ 1470.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(client49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str50, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(accountRegistry61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "disabled" + "'", str69, "disabled");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking(0);
        boolean boolean10 = parkingLot1.isEnabled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        ParkingSystem.User user13 = new ParkingSystem.User();
        java.lang.Object obj14 = user13.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = user13.parkingProxy;
        ParkingSystem.User user16 = new ParkingSystem.User();
        java.lang.Object obj17 = user16.user;
        ParkingSystem.Client client18 = ParkingSystem.Client.getInstance();
        java.lang.String str19 = client18.getName();
        client18.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy22.getRegistry();
        boolean boolean25 = parkingSpaceProxy22.checkIn("");
        client18.assignProxy(parkingSpaceProxy22);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade27 = parkingSpaceProxy22.getFacade();
        user16.assignProxy(parkingSpaceProxy22);
        user13.parkingProxy = parkingSpaceProxy22;
        ParkingSystem.AccountRegistry accountRegistry33 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry33);
        java.lang.String str35 = superManager34.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry36 = superManager34.registry;
        java.lang.String str37 = superManager34.getManagerId();
        ParkingSystem.Client client38 = ParkingSystem.Client.getInstance();
        java.lang.String str39 = client38.getName();
        client38.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy42 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry43 = parkingSpaceProxy42.getRegistry();
        boolean boolean45 = parkingSpaceProxy42.checkIn("");
        client38.assignProxy(parkingSpaceProxy42);
        boolean boolean47 = client38.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = new ParkingSystem.ParkingSpaceProxy();
        client38.assignProxy(parkingSpaceProxy48);
        superManager34.assignProxy(parkingSpaceProxy48);
        user13.assignProxy(parkingSpaceProxy48);
        ParkingSystem.AccountRegistry accountRegistry52 = parkingSpaceProxy48.getRegistry();
        java.lang.String str55 = parkingSpaceProxy48.scanSpace("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "");
        boolean boolean58 = parkingSpaceProxy48.extendBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (byte) 1);
        superManager11.assignProxy(parkingSpaceProxy48);
        ParkingSystem.AccountRegistry accountRegistry60 = superManager11.registry;
        superManager11.setManagerInfo("Refunded without deposit ($0.0)", "09622cbf-e665-45db-b1ad-365065947a20", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(parkingSpaceProxy15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(client18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str19, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade27);
        org.junit.Assert.assertNotNull(superManager34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str35, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertNotNull(accountRegistry36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str37, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertNotNull(client38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str39, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(accountRegistry52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(accountRegistry60);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.lang.String str7 = superManager4.getManagerId();
        ParkingSystem.Client client8 = ParkingSystem.Client.getInstance();
        java.lang.String str9 = client8.getName();
        client8.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy12.getRegistry();
        boolean boolean15 = parkingSpaceProxy12.checkIn("");
        client8.assignProxy(parkingSpaceProxy12);
        boolean boolean17 = client8.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        client8.assignProxy(parkingSpaceProxy18);
        superManager4.assignProxy(parkingSpaceProxy18);
        boolean boolean30 = parkingSpaceProxy18.confirmBooking("Paid $ 100.0 with Mobile Pay", "", "Paid $ -1.0 with Mobile Pay", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 0, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 32, "ST001", "Refunded total cost of $1.0");
        parkingSpaceProxy18.addParkingLot("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean38 = parkingSpaceProxy18.register("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "Refunded total cost of $-1.0", "89de8237-29df-4908-9de4-6dc1ce90de94", "hi!", "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        parkingSpaceProxy18.toggleLot("Card number should be 16 digits", true);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($0.0)" + "'", str5, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Refunded without deposit ($0.0)" + "'", str7, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(client8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str9, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        boolean boolean11 = client0.checkOut();
        boolean boolean13 = client0.extendBooking((int) ' ');
        client0.setValidated(false);
        boolean boolean17 = client0.extendBooking((int) (byte) 0);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49" + "'", str1, "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CLT-f02c481e-1504-4abf-b598-76152da8586a" + "'", str10, "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Manager manager11 = superManager4.autoGenerateManager();
        manager11.setManagerInfo("Paid $ 1470.0 with Mobile Pay", "83a51dc6-0c8f-4f21-ae40-68699828f95d", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(manager11);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean8 = paymentManager0.refundTotalCost((double) (short) 100);
        boolean boolean13 = paymentManager0.processPayment("", (double) 0, "Paid $ 100.0 with Mobile Pay", "Refunded without deposit ($-42.0)");
        boolean boolean18 = paymentManager0.processPayment("disabled", (double) 10.0f, "2afd610d-a8cb-413a-bbee-7927f86b526c", "pass");
        boolean boolean20 = paymentManager0.refundTotalCost((double) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.loadParkingLots();
        spaceManager0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        spaceManager0.loadParkingLots();
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.Booking booking19 = bookingManager0.getBooking("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        double double22 = bookingManager0.calculateCost("25527a32-01ef-45ba-816a-1d0a2fc2a52d", 100);
        double double24 = bookingManager0.getHourlyRate("Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(booking19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1515.0d + "'", double22 == 1515.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 15.0d + "'", double24 == 15.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        ParkingSystem.BookingManager bookingManager5 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager6 = new ParkingSystem.CheckInManager(bookingManager5);
        ParkingSystem.SpaceManager spaceManager7 = bookingManager5.getSpaceManager();
        double double10 = bookingManager5.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit11 = new ParkingSystem.DebitOrCredit();
        bookingManager5.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit11);
        boolean boolean17 = debitOrCredit11.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit11);
        boolean boolean21 = debitOrCredit11.validateCard("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", (double) 0L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(spaceManager7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 165.0d + "'", double10 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getLicensePlate();
        int int9 = booking7.getDuration();
        int int10 = booking7.getSpaceId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        java.lang.String str18 = booking15.getLicensePlate();
        double double19 = booking15.getTotalCost();
        booking15.setStartTime("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        booking15.setStartTime("empty");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("jane", "");
        spaceManager0.toggleLot("Jane", true);
        spaceManager0.addParkingLot("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.ParkingLot parkingLot15 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking17 = null;
        boolean boolean18 = parkingLot15.assignBooking(0, booking17);
        boolean boolean20 = parkingLot15.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = parkingLot15.assignBooking((int) (short) -1, booking29);
        java.lang.String str31 = booking29.getLotId();
        java.lang.String str32 = booking29.getLicensePlate();
        booking29.setStartTime("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        booking29.setDuration((int) (short) 10);
        boolean boolean37 = spaceManager0.assignBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", 10, booking29);
        java.lang.String str40 = spaceManager0.scanSpace("", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "disabled" + "'", str32, "disabled");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "disabled" + "'", str40, "disabled");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        java.lang.String str29 = superManager28.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry33 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry33);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = null;
        accountRegistry33.assignProxyToManager("disabled", parkingSpaceProxy36);
        superManager28.registry = accountRegistry33;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager28);
        ParkingSystem.AccountRegistry accountRegistry43 = null;
        ParkingSystem.SuperManager superManager44 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry43);
        superManager44.validateClient("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49");
        cSVManager0.saveManager((ParkingSystem.Manager) superManager44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList48 = cSVManager0.loadManagers();
// flaky "42) test0684(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
// flaky "22) test0684(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "15) test0684(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
// flaky "9) test0684(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky "5) test0684(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "staff" + "'", str13, "staff");
// flaky "2) test0684(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Refunded without deposit ($0.0)" + "'", str29, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(superManager34);
        org.junit.Assert.assertNotNull(superManager44);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        boolean boolean17 = parkingLot10.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace19 = parkingLot10.getParkingSpace((int) (byte) 10);
        int int20 = parkingSpace19.getSpaceId();
        ParkingSystem.Booking booking21 = parkingSpace19.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager22 = new ParkingSystem.SpaceManager();
        boolean boolean25 = spaceManager22.isSpaceAvailable("hi!", (int) '#');
        spaceManager22.toggleLot("disabled", false);
        ParkingSystem.Booking booking38 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean39 = spaceManager22.assignBooking("empty", (int) (short) 0, booking38);
        boolean boolean40 = parkingSpace19.assignBooking(booking38);
        ParkingSystem.SpaceManager spaceManager41 = new ParkingSystem.SpaceManager();
        boolean boolean44 = spaceManager41.isSpaceAvailable("hi!", (int) '#');
        spaceManager41.toggleLot("disabled", false);
        ParkingSystem.Booking booking57 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean58 = spaceManager41.assignBooking("empty", (int) (short) 0, booking57);
        boolean boolean59 = booking57.isCheckedIn();
        java.lang.String str60 = booking57.getClientId();
        boolean boolean61 = parkingSpace19.assignBooking(booking57);
        boolean boolean62 = parkingLot1.assignBooking(1, booking57);
        int int63 = booking57.getSpaceId();
        int int64 = booking57.getDuration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(parkingSpace19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(booking21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "staff" + "'", str60, "staff");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Manager manager16 = accountRegistry15.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean25 = parkingSpaceProxy18.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy18.toggleLot("hi!", false);
        accountRegistry15.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy18);
        parkingSpaceProxy18.validateClient("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
        boolean boolean33 = parkingSpaceProxy18.checkOut("Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($0.0)" + "'", str5, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(manager16);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.Disabled disabled21 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace22 = null;
        java.lang.String str23 = disabled21.scanSpace(parkingSpace22);
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot26 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking28 = null;
        boolean boolean29 = parkingLot26.assignBooking(0, booking28);
        boolean boolean31 = parkingLot26.isSpaceAvailable((int) '#');
        boolean boolean33 = parkingLot26.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace35 = parkingLot26.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking36 = parkingSpace35.getCurrentBooking();
        parkingSpace35.removeBooking();
        java.lang.String str38 = enabled24.scanSpace(parkingSpace35);
        ParkingSystem.ParkingLot parkingLot40 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot40.assignBooking(0, booking42);
        boolean boolean45 = parkingLot40.isSpaceAvailable((int) '#');
        boolean boolean47 = parkingLot40.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace49 = parkingLot40.getParkingSpace((int) (byte) 10);
        int int50 = parkingSpace49.getSpaceId();
        ParkingSystem.Booking booking51 = parkingSpace49.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager52 = new ParkingSystem.SpaceManager();
        boolean boolean55 = spaceManager52.isSpaceAvailable("hi!", (int) '#');
        spaceManager52.toggleLot("disabled", false);
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean69 = spaceManager52.assignBooking("empty", (int) (short) 0, booking68);
        boolean boolean70 = parkingSpace49.assignBooking(booking68);
        java.lang.String str71 = enabled24.scanSpace(parkingSpace49);
        java.lang.String str72 = disabled21.scanSpace(parkingSpace49);
        user0.user = str72;
        user0.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "Jane", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Client client80 = ParkingSystem.Client.getInstance();
        java.lang.String str81 = client80.getName();
        java.lang.String str82 = client80.getClientId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy83 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj86 = parkingSpaceProxy83.login("empty", "Jane");
        parkingSpaceProxy83.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        client80.assignProxy(parkingSpaceProxy83);
        user0.user = parkingSpaceProxy83;
        boolean boolean94 = parkingSpaceProxy83.cancelBooking("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        parkingSpaceProxy83.addParkingLot("Card number should be 16 digits");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingSpace35);
        org.junit.Assert.assertNull(booking36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "empty" + "'", str38, "empty");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parkingSpace49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNull(booking51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "disabled" + "'", str71, "disabled");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "disabled" + "'", str72, "disabled");
        org.junit.Assert.assertNotNull(client80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str81, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
// flaky "43) test0687(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c" + "'", str82, "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        java.lang.String str7 = paymentManager0.refundMessage;
        boolean boolean9 = paymentManager0.refundTotalCost((double) (short) 100);
        boolean boolean11 = paymentManager0.refundTotalCost((double) 100.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Refunded total cost of $1.0" + "'", str7, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        java.lang.Object obj15 = accountRegistry12.login("disabled", "pass");
        ParkingSystem.Manager manager16 = accountRegistry12.autoGenerateManager();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry12.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(manager16);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        java.lang.String str6 = paymentManager0.paymentMessage;
        java.lang.String str7 = paymentManager0.refundMessage;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str7, "Refunded without deposit ($-42.0)");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap28 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        boolean boolean41 = parkingSpaceProxy30.cancelBooking("Jane");
        boolean boolean43 = parkingSpaceProxy30.checkOut("empty");
        boolean boolean53 = parkingSpaceProxy30.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry3.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy30);
        java.util.List<ParkingSystem.Client> clientList55 = accountRegistry3.displayPendingValidations();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap56 = accountRegistry3.getManagers();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(clientList55);
        org.junit.Assert.assertNotNull(strMap56);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setClientInfo("Jane", "", "pass", "pass", "pass", "hi!", true);
        java.lang.String str10 = client0.getName();
        java.lang.String str11 = client0.getExtraId();
        java.lang.String str12 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "pass" + "'", str12, "pass");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("");
        java.lang.String str14 = parkingSpaceProxy0.scanSpace("staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean17 = parkingSpaceProxy0.extendBooking("jane", (int) ' ');
        boolean boolean19 = parkingSpaceProxy0.checkIn("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        parkingSpaceProxy0.autoGenerateManager();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.Manager manager8 = superManager4.autoGenerateManager();
        ParkingSystem.User user9 = new ParkingSystem.User();
        java.lang.Object obj10 = user9.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = user9.parkingProxy;
        ParkingSystem.User user12 = new ParkingSystem.User();
        java.lang.Object obj13 = user12.user;
        ParkingSystem.Client client14 = ParkingSystem.Client.getInstance();
        java.lang.String str15 = client14.getName();
        client14.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        boolean boolean21 = parkingSpaceProxy18.checkIn("");
        client14.assignProxy(parkingSpaceProxy18);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade23 = parkingSpaceProxy18.getFacade();
        user12.assignProxy(parkingSpaceProxy18);
        user9.parkingProxy = parkingSpaceProxy18;
        ParkingSystem.AccountRegistry accountRegistry29 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager30 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry29);
        boolean boolean32 = accountRegistry29.requiresValidation("disabled");
        int int33 = accountRegistry29.getManagersSize();
        boolean boolean39 = accountRegistry29.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy41 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj44 = parkingSpaceProxy41.login("empty", "Jane");
        parkingSpaceProxy41.validateClient("Jane");
        parkingSpaceProxy41.toggleSpace("", "staff", false);
        boolean boolean52 = parkingSpaceProxy41.cancelBooking("Jane");
        accountRegistry29.assignProxyToClient("pass", parkingSpaceProxy41);
        parkingSpaceProxy41.autoGenerateManager();
        parkingSpaceProxy41.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user9.assignProxy(parkingSpaceProxy41);
        ParkingSystem.AccountRegistry accountRegistry60 = parkingSpaceProxy41.getRegistry();
        manager8.assignProxy(parkingSpaceProxy41);
        manager8.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($0.0)" + "'", str5, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded without deposit ($0.0)" + "'", str6, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(manager8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(parkingSpaceProxy11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(client14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade23);
        org.junit.Assert.assertNotNull(superManager30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(accountRegistry60);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        java.lang.String str29 = superManager28.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry33 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry33);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy36 = null;
        accountRegistry33.assignProxyToManager("disabled", parkingSpaceProxy36);
        superManager28.registry = accountRegistry33;
        cSVManager0.saveManager((ParkingSystem.Manager) superManager28);
        cSVManager0.updateClientValidation("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList43 = cSVManager0.loadManagers();
// flaky "44) test0695(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
// flaky "23) test0695(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "16) test0695(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "staff" + "'", str13, "staff");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Refunded without deposit ($0.0)" + "'", str29, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(superManager34);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        ParkingSystem.Booking booking16 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean17 = spaceManager0.assignBooking("empty", (int) (short) 0, booking16);
        spaceManager0.loadParkingLots();
        spaceManager0.addParkingLot("staff");
        boolean boolean23 = spaceManager0.isSpaceAvailable("83a51dc6-0c8f-4f21-ae40-68699828f95d", (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean17 = bookingManager0.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap18 = bookingManager0.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager19 = bookingManager0.getSpaceManager();
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(spaceManager19);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.AccountRegistry accountRegistry27 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager28 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry27);
        ParkingSystem.AccountRegistry accountRegistry32 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager33 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry32);
        superManager28.registry = accountRegistry32;
        ParkingSystem.Manager manager35 = superManager28.autoGenerateManager();
        java.lang.String str36 = manager35.getManagerId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy40 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry41 = parkingSpaceProxy40.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy43 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj46 = parkingSpaceProxy43.login("empty", "Jane");
        parkingSpaceProxy43.validateClient("Jane");
        parkingSpaceProxy43.toggleSpace("", "staff", false);
        accountRegistry41.assignProxyToManager("pass", parkingSpaceProxy43);
        ParkingSystem.Client client55 = accountRegistry41.getClient("");
        ParkingSystem.SuperManager superManager56 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry41);
        boolean boolean62 = accountRegistry41.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy64 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry65 = parkingSpaceProxy64.getRegistry();
        boolean boolean67 = parkingSpaceProxy64.checkIn("");
        parkingSpaceProxy64.toggleLot("", true);
        accountRegistry41.assignProxyToManager("", parkingSpaceProxy64);
        manager35.assignProxy(parkingSpaceProxy64);
        client3.assignProxy(parkingSpaceProxy64);
        java.lang.String str74 = client3.getClientId();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "45) test0698(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "24) test0698(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
// flaky "17) test0698(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky "10) test0698(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky "6) test0698(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(superManager28);
        org.junit.Assert.assertNotNull(superManager33);
        org.junit.Assert.assertNotNull(manager35);
// flaky "3) test0698(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4c45f11e-b09a-4d81-adf1-86cfd519dc3c" + "'", str36, "4c45f11e-b09a-4d81-adf1-86cfd519dc3c");
        org.junit.Assert.assertNotNull(accountRegistry41);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(client55);
        org.junit.Assert.assertNotNull(superManager56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(accountRegistry65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky "2) test0698(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "CLT-390234b0-d56e-4275-bd7b-122280609c69" + "'", str74, "CLT-390234b0-d56e-4275-bd7b-122280609c69");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("");
        checkInManager1.refundMessage = "staff";
        boolean boolean7 = checkInManager1.checkIn("K6PkM9rcCx");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap7 = accountRegistry6.getManagers();
        ParkingSystem.Client client9 = ParkingSystem.Client.getInstance();
        java.lang.String str10 = client9.getName();
        client9.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str19 = client9.getUsername();
        java.lang.String str20 = client9.getPassword();
        java.lang.String str21 = client9.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        client9.assignProxy(parkingSpaceProxy22);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj27 = parkingSpaceProxy24.login("empty", "Jane");
        client9.assignProxy(parkingSpaceProxy24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking31 = parkingSpaceProxy29.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy29.getRegistry();
        parkingSpaceProxy29.autoGenerateManager();
        client9.assignProxy(parkingSpaceProxy29);
        boolean boolean38 = parkingSpaceProxy29.editBooking("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded total cost of $100.0", (int) (byte) 0);
        accountRegistry6.assignProxyToManager("Paid $ 100.0 with Mobile Pay", parkingSpaceProxy29);
        parkingSpaceProxy29.toggleSpace("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", "Refunded without deposit ($0.0)", true);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($0.0)" + "'", str5, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(client9);
// flaky "46) test0700(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        client0.setValidated(true);
        java.lang.String str14 = client0.getPassword();
        java.lang.String str15 = client0.getPassword();
        boolean boolean18 = client0.editBooking("CLT-035180a0-4707-410d-a011-2a4f0f46838b", (int) (short) -1);
        java.lang.String str19 = client0.getClientId();
        boolean boolean22 = client0.editBooking("8ca2ec61-774c-409d-89d5-5b9171b40497", (int) (short) -1);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.toggleSpace("empty", "Paid $ 10.0 with Mobile Pay", false);
        boolean boolean34 = parkingSpaceProxy15.extendBooking("disabled", 100);
        parkingSpaceProxy15.toggleLot("09622cbf-e665-45db-b1ad-365065947a20", false);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        double double5 = bookingManager0.getHourlyRate("Paid $ 10.0 with Mobile Pay");
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        boolean boolean11 = mobilePay6.processPayment("hi!", (-1.0d), "", "");
        boolean boolean16 = mobilePay6.processPayment("hi!", (double) 100, "jane", "disabled");
        boolean boolean21 = mobilePay6.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) 10.0f, "staff", "empty");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) mobilePay6);
        boolean boolean32 = bookingManager0.confirmBooking("89de8237-29df-4908-9de4-6dc1ce90de94", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "02659ad3-0b5c-4c48-a915-a466f2b50775", "8ca2ec61-774c-409d-89d5-5b9171b40497", 1, "staff", 10, "", "CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        java.lang.String str13 = client0.getName();
        client0.setValidated(false);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", 2, "", (int) (byte) -1, "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) ' ');
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        java.lang.Object obj17 = accountRegistry8.login("ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        accountRegistry8.validateClient("Paid $ -1.0 with Mobile Pay");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry8.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("Paid $ 10.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        accountRegistry3.validateClient("staff");
        boolean boolean21 = accountRegistry3.registerClient("Refunded without deposit ($-96.0)", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        java.lang.Object obj24 = accountRegistry3.login("2afd610d-a8cb-413a-bbee-7927f86b526c", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = parkingSpaceProxy0.getFacade();
        ParkingSystem.Booking booking3 = parkingSpaceFacade1.getBookingDetails("7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        ParkingSystem.BookingManager bookingManager4 = parkingSpaceFacade1.getBookingManager();
        boolean boolean7 = parkingSpaceFacade1.extendBooking("Refunded without deposit ($-96.0)", (int) (byte) 10);
        org.junit.Assert.assertNotNull(parkingSpaceFacade1);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(bookingManager4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        java.lang.Object obj18 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking22 = parkingSpaceProxy20.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy20.getRegistry();
        java.lang.String str26 = parkingSpaceProxy20.scanSpace("staff", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        ParkingSystem.Booking booking28 = parkingSpaceProxy20.getBookingDetails("ST001");
        user0.parkingProxy = parkingSpaceProxy20;
        java.lang.Object obj32 = user0.login("hi!", "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertNull(parkingSpaceProxy19);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "disabled" + "'", str26, "disabled");
        org.junit.Assert.assertNull(booking28);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        accountRegistry20.assignProxyToManager("jane", parkingSpaceProxy22);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap24 = accountRegistry20.getManagers();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap25 = accountRegistry20.getManagers();
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        double double6 = bookingManager0.getDeposit("Jane");
        boolean boolean11 = bookingManager0.extendBooking("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", 52, "TXCrKOGD", "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        ParkingSystem.CSVManager cSVManager1 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade2 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager3 = parkingSpaceFacade2.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade2.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = spaceManager4.getParkingLots();
        cSVManager1.loadParkingLots(strMap5);
        java.lang.String[] strArray7 = cSVManager1.loadSuperManager();
        ParkingSystem.CSVManager cSVManager8 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray9 = cSVManager8.loadSuperManager();
        java.lang.String[] strArray10 = cSVManager8.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade11 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager12 = parkingSpaceFacade11.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap13 = spaceManager12.getParkingLots();
        cSVManager8.saveParkingLots(strMap13);
        cSVManager1.saveParkingLots(strMap13);
        cSVManager0.loadParkingLots(strMap13);
        ParkingSystem.CSVManager cSVManager17 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray18 = cSVManager17.loadSuperManager();
        java.lang.String[] strArray19 = cSVManager17.loadSuperManager();
        ParkingSystem.Client client20 = ParkingSystem.Client.getInstance();
        java.lang.String str21 = client20.getName();
        client20.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry25 = parkingSpaceProxy24.getRegistry();
        boolean boolean27 = parkingSpaceProxy24.checkIn("");
        client20.assignProxy(parkingSpaceProxy24);
        boolean boolean29 = client20.cancelBooking();
        java.lang.String str30 = client20.getExtraId();
        java.lang.String str31 = client20.getName();
        client20.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager17.saveClient(client20);
        ParkingSystem.AccountRegistry accountRegistry44 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager45 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry44);
        java.lang.String str46 = superManager45.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry50 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager51 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry50);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy53 = null;
        accountRegistry50.assignProxyToManager("disabled", parkingSpaceProxy53);
        superManager45.registry = accountRegistry50;
        cSVManager17.saveManager((ParkingSystem.Manager) superManager45);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade57 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str60 = parkingSpaceFacade57.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager61 = parkingSpaceFacade57.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap62 = spaceManager61.getParkingLots();
        cSVManager17.saveParkingLots(strMap62);
        cSVManager0.saveParkingLots(strMap62);
        java.util.List<java.lang.String[]> strArrayList66 = cSVManager0.readCSV("h40rNQ7kR1");
        org.junit.Assert.assertNotNull(checkInManager3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArray7);
// flaky "47) test0712(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray9);
// flaky "25) test0712(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray10);
// flaky "18) test0712(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray10, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strArray18);
// flaky "11) test0712(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray19);
// flaky "7) test0712(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client20);
// flaky "4) test0712(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "empty" + "'", str21, "empty");
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky "3) test0712(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Refunded total cost of $1.0" + "'", str30, "Refunded total cost of $1.0");
// flaky "1) test0712(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "empty" + "'", str31, "empty");
        org.junit.Assert.assertNotNull(superManager45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Refunded without deposit ($0.0)" + "'", str46, "Refunded without deposit ($0.0)");
        org.junit.Assert.assertNotNull(superManager51);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(spaceManager61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strArrayList66);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        boolean boolean15 = client0.getIsValidated();
        boolean boolean23 = client0.confirmBooking("", "02659ad3-0b5c-4c48-a915-a466f2b50775", 32, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", (int) (short) 0, "Refunded total cost of $-1.0", "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.paymentMessage = "pass";
        paymentManager0.paymentMessage = "empty";
        paymentManager0.refundMessage = "";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager1 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("hi!", false);
        boolean boolean8 = parkingSpaceFacade0.editBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "Paid $ -1.0 with Mobile Pay", 1);
        boolean boolean10 = parkingSpaceFacade0.checkOut("Paid $ -1.0 with Mobile Pay");
        boolean boolean14 = parkingSpaceFacade0.editBooking("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "", 0);
        org.junit.Assert.assertNotNull(spaceManager1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        double double5 = bookingManager0.getDeposit("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        ParkingSystem.Booking booking3 = client0.getBookingDetails();
        java.lang.String str4 = client0.getName();
        org.junit.Assert.assertNotNull(client0);
// flaky "48) test0717(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
// flaky "26) test0717(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str2, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNull(booking3);
// flaky "19) test0717(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "empty" + "'", str4, "empty");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        java.lang.String str7 = parkingSpaceProxy3.scanSpace("empty", "hi!");
        boolean boolean17 = parkingSpaceProxy3.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy3.autoGenerateManager();
        user0.user = parkingSpaceProxy3;
        parkingSpaceProxy3.toggleLot("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", true);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.addParkingLot("");
        spaceManager0.removeBooking("Refunded total cost of $0.0", 2);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        ParkingSystem.Booking booking3 = client0.getBookingDetails();
        java.lang.String str4 = client0.getExtraId();
        boolean boolean5 = client0.checkOut();
        org.junit.Assert.assertNotNull(client0);
// flaky "49) test0720(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
// flaky "27) test0720(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str2, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNull(booking3);
// flaky "20) test0720(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.loadParkingLots();
        spaceManager0.removeBooking("empty", 52);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        java.lang.String str7 = mobilePay0.getPaymentMessage();
        boolean boolean12 = mobilePay0.processPayment("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 1.0d, "disabled", "Refunded without deposit ($0.0)");
        boolean boolean17 = mobilePay0.processPayment("Refunded total cost of $1.0", (double) 10, "staff", "Refunded total cost of $-1.0");
        boolean boolean22 = mobilePay0.processPayment("Paid $ 15.0 with Mobile Pay", 0.0d, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str7, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        java.lang.String[] strArray9 = cSVManager0.loadSuperManager();
        ParkingSystem.CSVManager cSVManager10 = new ParkingSystem.CSVManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade11 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager12 = parkingSpaceFacade11.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager13 = parkingSpaceFacade11.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap14 = spaceManager13.getParkingLots();
        cSVManager10.loadParkingLots(strMap14);
        java.lang.String[] strArray16 = cSVManager10.loadSuperManager();
        ParkingSystem.CSVManager cSVManager17 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray18 = cSVManager17.loadSuperManager();
        java.lang.String[] strArray19 = cSVManager17.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade20 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager21 = parkingSpaceFacade20.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap22 = spaceManager21.getParkingLots();
        cSVManager17.saveParkingLots(strMap22);
        cSVManager10.saveParkingLots(strMap22);
        cSVManager0.loadParkingLots(strMap22);
        // The following exception was thrown during execution in test generation
        try {
            cSVManager0.updateClientValidation("09622cbf-e665-45db-b1ad-365065947a20", false);
// flaky "50) test0724(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArray9);
// flaky "28) test0724(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(checkInManager12);
        org.junit.Assert.assertNotNull(spaceManager13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strArray16);
// flaky "21) test0724(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray16, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray18);
// flaky "12) test0724(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray19);
// flaky "8) test0724(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        boolean boolean15 = client0.editBooking("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 32);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj19 = parkingSpaceProxy16.login("empty", "Jane");
        parkingSpaceProxy16.validateClient("Jane");
        parkingSpaceProxy16.toggleSpace("", "staff", false);
        boolean boolean27 = parkingSpaceProxy16.cancelBooking("Jane");
        boolean boolean29 = parkingSpaceProxy16.checkOut("empty");
        boolean boolean39 = parkingSpaceProxy16.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        boolean boolean45 = parkingSpaceProxy16.register("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "02659ad3-0b5c-4c48-a915-a466f2b50775", "Paid $ 100.0 with Mobile Pay");
        client0.assignProxy(parkingSpaceProxy16);
        org.junit.Assert.assertNotNull(client0);
// flaky "51) test0725(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "29) test0725(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
// flaky "22) test0725(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
// flaky "13) test0725(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        ParkingSystem.Booking booking3 = client0.getBookingDetails();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj13 = parkingSpaceProxy10.login("empty", "Jane");
        parkingSpaceProxy10.validateClient("Jane");
        parkingSpaceProxy10.toggleSpace("", "staff", false);
        accountRegistry8.assignProxyToManager("pass", parkingSpaceProxy10);
        ParkingSystem.Client client22 = accountRegistry8.getClient("");
        ParkingSystem.SuperManager superManager23 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry8);
        boolean boolean29 = accountRegistry8.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy31 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry32 = parkingSpaceProxy31.getRegistry();
        boolean boolean34 = parkingSpaceProxy31.checkIn("");
        parkingSpaceProxy31.toggleLot("", true);
        accountRegistry8.assignProxyToManager("", parkingSpaceProxy31);
        client0.assignProxy(parkingSpaceProxy31);
        ParkingSystem.User user40 = new ParkingSystem.User();
        java.lang.Object obj41 = user40.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy42 = user40.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy43 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry44 = parkingSpaceProxy43.getRegistry();
        java.lang.String str47 = parkingSpaceProxy43.scanSpace("empty", "hi!");
        boolean boolean57 = parkingSpaceProxy43.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy43.autoGenerateManager();
        user40.user = parkingSpaceProxy43;
        client0.assignProxy(parkingSpaceProxy43);
        java.lang.String str61 = client0.getClientId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "02659ad3-0b5c-4c48-a915-a466f2b50775" + "'", str1, "02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str2, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(client22);
        org.junit.Assert.assertNotNull(superManager23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(accountRegistry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(parkingSpaceProxy42);
        org.junit.Assert.assertNotNull(accountRegistry44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky "52) test0726(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753" + "'", str61, "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean6 = bookingManager0.extendBooking("jane", (int) (byte) 100, "hi!", "jane");
        boolean boolean10 = bookingManager0.editBooking("jane", "Jane", 0);
        double double13 = bookingManager0.calculateCost("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 15.0d + "'", double13 == 15.0d);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        java.lang.String str61 = parkingSpace58.scanSpace();
        int int62 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace58.getCurrentBooking();
        int int64 = parkingSpace58.getSpaceId();
        java.lang.String str65 = enabled0.scanSpace(parkingSpace58);
        ParkingSystem.ParkingSpace parkingSpace66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = enabled0.scanSpace(parkingSpace66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.ParkingSpace.getCurrentBooking()\" because \"space\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "empty" + "'", str61, "empty");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "empty" + "'", str65, "empty");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        parkingSpace10.removeBooking();
        int int13 = parkingSpace10.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.CSVManager cSVManager14 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList16 = cSVManager14.readCSV("");
        java.util.List<java.lang.String[]> strArrayList18 = cSVManager14.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap19 = null;
        cSVManager14.loadParkingLots(strMap19);
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        cSVManager14.saveManager((ParkingSystem.Manager) superManager25);
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        spaceManager28.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = spaceManager28.getParkingLots();
        cSVManager14.loadParkingLots(strMap47);
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str55 = spaceManager49.scanSpace("disabled", "");
        spaceManager49.addParkingLot("hi!");
        java.lang.String str60 = spaceManager49.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap61 = spaceManager49.getParkingLots();
        cSVManager14.saveParkingLots(strMap61);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade63 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str66 = parkingSpaceFacade63.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager67 = parkingSpaceFacade63.getSpaceManager();
        spaceManager67.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap70 = spaceManager67.getParkingLots();
        cSVManager14.saveParkingLots(strMap70);
        cSVManager0.loadParkingLots(strMap70);
        ParkingSystem.BookingManager bookingManager73 = new ParkingSystem.BookingManager();
        double double76 = bookingManager73.calculateCost("", 0);
        boolean boolean80 = bookingManager73.editBooking("Jane", "empty", 10);
        boolean boolean90 = bookingManager73.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap91 = bookingManager73.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager92 = bookingManager73.getSpaceManager();
        spaceManager92.addParkingLot("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap95 = spaceManager92.getParkingLots();
        cSVManager0.loadParkingLots(strMap95);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertNotNull(spaceManager67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 15.0d + "'", double76 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertNotNull(spaceManager92);
        org.junit.Assert.assertNotNull(strMap95);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        java.lang.String str5 = parkingSpaceFacade0.scanSpace("Paid $ 10.0 with Mobile Pay", "hi!");
        ParkingSystem.CheckInManager checkInManager6 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean8 = checkInManager6.checkOut("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        boolean boolean10 = checkInManager6.checkIn("Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
        org.junit.Assert.assertNotNull(checkInManager6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLotIterator7.next();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertNotNull(parkingSpace10);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager1 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("hi!", false);
        ParkingSystem.CheckInManager checkInManager5 = parkingSpaceFacade0.getCheckInManager();
        org.junit.Assert.assertNotNull(spaceManager1);
        org.junit.Assert.assertNotNull(checkInManager5);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        java.lang.String str5 = parkingSpaceFacade0.scanSpace("Paid $ 10.0 with Mobile Pay", "hi!");
        ParkingSystem.CheckInManager checkInManager6 = parkingSpaceFacade0.getCheckInManager();
        java.lang.String str7 = checkInManager6.refundMessage;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
        org.junit.Assert.assertNotNull(checkInManager6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean13 = bookingManager0.confirmBooking("empty", "Jane", "disabled", "pass", (int) (byte) 0, "hi!", (int) 'a', "hi!", "");
        double double15 = bookingManager0.getHourlyRate("Jane");
        boolean boolean20 = bookingManager0.extendBooking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", (int) (byte) 10, "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "CLT-f02c481e-1504-4abf-b598-76152da8586a");
        ParkingSystem.Booking booking22 = bookingManager0.getBooking("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(booking22);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        superManager10.registry = accountRegistry14;
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry14);
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "pass", "empty", accountRegistry14);
        ParkingSystem.AccountRegistry accountRegistry22 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager23 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry22);
        ParkingSystem.Manager manager24 = superManager23.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry25 = superManager23.getRegistry();
        java.lang.Object obj28 = accountRegistry25.login("Paid $ 100.0 with Mobile Pay", "qPYDfDnbtD");
        superManager18.registry = accountRegistry25;
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(superManager23);
        org.junit.Assert.assertNotNull(manager24);
        org.junit.Assert.assertNotNull(accountRegistry25);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.autoGenerateManager();
        parkingSpaceProxy32.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user0.assignProxy(parkingSpaceProxy32);
        ParkingSystem.BookingManager bookingManager51 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager52 = new ParkingSystem.CheckInManager(bookingManager51);
        ParkingSystem.SpaceManager spaceManager53 = bookingManager51.getSpaceManager();
        double double56 = bookingManager51.calculateCost("", (int) (byte) 10);
        ParkingSystem.SpaceManager spaceManager57 = bookingManager51.getSpaceManager();
        user0.user = spaceManager57;
        spaceManager57.removeBooking("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", (int) 'a');
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "53) test0737(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2afd610d-a8cb-413a-bbee-7927f86b526c" + "'", str6, "2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(spaceManager53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 165.0d + "'", double56 == 165.0d);
        org.junit.Assert.assertNotNull(spaceManager57);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.paymentMessage = "pass";
        paymentManager0.paymentMessage = "empty";
        boolean boolean9 = paymentManager0.refundTotalCost((double) (byte) 0);
        java.lang.String str10 = paymentManager0.refundMessage;
        paymentManager0.paymentMessage = "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Refunded total cost of $0.0" + "'", str10, "Refunded total cost of $0.0");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        java.lang.String str7 = mobilePay0.getPaymentMessage();
        boolean boolean12 = mobilePay0.processPayment("Card number should be 16 digits", (double) (short) -1, "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "89de8237-29df-4908-9de4-6dc1ce90de94");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str7, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        superManager4.setManagerInfo("Paid $ 0.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", "Refunded total cost of $1.0");
        superManager4.setManagerInfo("TXCrKOGD", "86z9Z9e0MN", "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNotNull(superManager4);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        boolean boolean16 = accountRegistry6.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        parkingSpaceProxy18.validateClient("Jane");
        parkingSpaceProxy18.toggleSpace("", "staff", false);
        boolean boolean29 = parkingSpaceProxy18.cancelBooking("Jane");
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy18);
        boolean boolean32 = accountRegistry6.requiresValidation("empty");
        boolean boolean34 = accountRegistry6.requiresValidation("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        accountRegistry6.validateClient("4a1f2343-8b2e-4dea-ba69-efd105414390");
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("disabled", "Paid $ 100.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry38 = superManager37.registry;
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertNotNull(accountRegistry38);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.lang.String str8 = superManager7.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = superManager7.registry;
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap10 = accountRegistry9.getManagers();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("Paid $ 100.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ -1.0 with Mobile Pay", accountRegistry9);
        superManager11.validateClient("Refunded total cost of $100.0");
        java.lang.String str14 = superManager11.getManagerId();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TXCrKOGD" + "'", str8, "TXCrKOGD");
        org.junit.Assert.assertNotNull(accountRegistry9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "TXCrKOGD" + "'", str14, "TXCrKOGD");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("disabled", "staff", "staff", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        java.lang.String str10 = parkingSpaceProxy6.scanSpace("empty", "hi!");
        parkingSpaceProxy6.addParkingLot("empty");
        parkingSpaceProxy6.addParkingLot("");
        superManager4.assignProxy(parkingSpaceProxy6);
        ParkingSystem.Manager manager16 = superManager4.autoGenerateManager();
        manager16.validateClient("");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(manager16);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap6 = null;
        cSVManager0.loadParkingLots(strMap6);
        ParkingSystem.Client client8 = ParkingSystem.Client.getInstance();
        java.lang.String str9 = client8.getClientType();
        cSVManager0.saveClient(client8);
        boolean boolean11 = client8.checkIn();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(client8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str9, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot1.assignBooking((int) (short) 1, booking4);
        parkingLot1.removeBooking((int) (short) 0);
        parkingLot1.removeBooking(10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(32);
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking15 = null;
        boolean boolean16 = parkingLot13.assignBooking(0, booking15);
        boolean boolean18 = parkingLot13.isSpaceAvailable((int) '#');
        boolean boolean20 = parkingLot13.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace22 = parkingLot13.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking23 = parkingSpace22.getCurrentBooking();
        ParkingSystem.Booking booking24 = parkingSpace22.getCurrentBooking();
        ParkingSystem.Disabled disabled25 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace26 = null;
        java.lang.String str27 = disabled25.scanSpace(parkingSpace26);
        ParkingSystem.ParkingSpace parkingSpace28 = null;
        java.lang.String str29 = disabled25.scanSpace(parkingSpace28);
        parkingSpace22.setState((ParkingSystem.SpaceState) disabled25);
        ParkingSystem.SpaceState spaceState31 = parkingSpace22.getState();
        parkingSpace11.setState(spaceState31);
        ParkingSystem.Enabled enabled33 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot35 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking37 = null;
        boolean boolean38 = parkingLot35.assignBooking(0, booking37);
        boolean boolean40 = parkingLot35.isSpaceAvailable((int) '#');
        boolean boolean42 = parkingLot35.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace44 = parkingLot35.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking45 = parkingSpace44.getCurrentBooking();
        parkingSpace44.removeBooking();
        java.lang.String str47 = enabled33.scanSpace(parkingSpace44);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager61 = new ParkingSystem.SpaceManager();
        boolean boolean64 = spaceManager61.isSpaceAvailable("hi!", (int) '#');
        spaceManager61.toggleLot("disabled", false);
        ParkingSystem.Booking booking77 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean78 = spaceManager61.assignBooking("empty", (int) (short) 0, booking77);
        boolean boolean79 = parkingSpace58.assignBooking(booking77);
        java.lang.String str80 = enabled33.scanSpace(parkingSpace58);
        boolean boolean81 = parkingSpace58.isAvailable();
        java.lang.String str82 = spaceState31.scanSpace(parkingSpace58);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(parkingSpace22);
        org.junit.Assert.assertNull(booking23);
        org.junit.Assert.assertNull(booking24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "disabled" + "'", str27, "disabled");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "disabled" + "'", str29, "disabled");
        org.junit.Assert.assertNotNull(spaceState31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpace44);
        org.junit.Assert.assertNull(booking45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "empty" + "'", str47, "empty");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "disabled" + "'", str80, "disabled");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "disabled" + "'", str82, "disabled");
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean3 = checkInManager1.checkOut("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        boolean boolean5 = checkInManager1.checkOut("Paid $ 15.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        spaceManager0.loadParkingLots();
        spaceManager0.loadParkingLots();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        ParkingSystem.Booking booking10 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int11 = booking10.getDuration();
        booking10.setDuration((int) (short) 1);
        boolean boolean14 = parkingLot1.assignBooking((int) ' ', booking10);
        java.lang.String str15 = booking10.getLicensePlate();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        java.lang.Object obj17 = accountRegistry8.login("ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        java.lang.Object obj20 = accountRegistry8.login("Paid $ 0.0 with Mobile Pay", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry8.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.User user21 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj25 = parkingSpaceProxy22.login("empty", "Jane");
        parkingSpaceProxy22.validateClient("Jane");
        parkingSpaceProxy22.toggleSpace("", "staff", false);
        boolean boolean33 = parkingSpaceProxy22.cancelBooking("");
        user21.assignProxy(parkingSpaceProxy22);
        user0.user = parkingSpaceProxy22;
        ParkingSystem.User user36 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj40 = parkingSpaceProxy37.login("empty", "Jane");
        parkingSpaceProxy37.validateClient("Jane");
        parkingSpaceProxy37.toggleSpace("", "staff", false);
        boolean boolean48 = parkingSpaceProxy37.cancelBooking("");
        user36.assignProxy(parkingSpaceProxy37);
        parkingSpaceProxy37.displayPendingValidations();
        user0.parkingProxy = parkingSpaceProxy37;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade52 = parkingSpaceProxy37.getFacade();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade52);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Client client6 = accountRegistry3.getClient("0b35479f-5869-423e-9abc-e4ab9cef903d");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNull(client6);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.AccountRegistry accountRegistry13 = bookingManager12.getAccountRegistry();
        ParkingSystem.SpaceManager spaceManager14 = bookingManager12.getSpaceManager();
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 10.0 with Mobile Pay", (int) (short) 0, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", 1, "2afd610d-a8cb-413a-bbee-7927f86b526c", (-1.0d));
        boolean boolean25 = spaceManager14.assignBooking("Paid $ 100.0 with Mobile Pay", (int) (byte) 10, booking24);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(spaceManager14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap1 = null;
        cSVManager0.loadParkingLots(strMap1);
        // The following exception was thrown during execution in test generation
        try {
            cSVManager0.updateClientValidation("9701df9a-2178-4ad5-8076-46ff5f05b3e8", false);
// flaky "54) test0753(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLotIterator7.next();
        boolean boolean11 = parkingSpace10.isAvailable();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        spaceManager2.toggleSpace("Jane", "Refunded total cost of $1.0", true);
        spaceManager2.toggleSpace("3b453211-7dd1-4452-8741-a206711c1217", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", true);
        org.junit.Assert.assertNotNull(spaceManager2);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("02659ad3-0b5c-4c48-a915-a466f2b50775", "Refunded without deposit ($-42.0)", (int) (short) 1, "13b04414-31a5-407f-8ea3-fba4613c73d1", (int) ' ', "Refunded total cost of $-1.0", (double) 1);
        boolean boolean8 = booking7.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        client0.setClientInfo("pass", "Paid $ 10.0 with Mobile Pay", "pass", "Jane", "2afd610d-a8cb-413a-bbee-7927f86b526c", "hi!", false);
        client0.setClientInfo("ST001", "3b453211-7dd1-4452-8741-a206711c1217", "Paid $ 10.0 with Mobile Pay", "Refunded without deposit ($-42.0)", "", "Card number should be 16 digits", true);
        ParkingSystem.Booking booking28 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "55) test0757(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertNull(booking28);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundDeposit((double) 1.0f);
        paymentManager0.paymentMessage = "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager18);
        boolean boolean23 = checkInManager21.checkIn("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3b453211-7dd1-4452-8741-a206711c1217" + "'", str6, "3b453211-7dd1-4452-8741-a206711c1217");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        ParkingSystem.Enabled enabled14 = new ParkingSystem.Enabled();
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled14);
        ParkingSystem.ParkingSpace parkingSpace16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = enabled14.scanSpace(parkingSpace16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.ParkingSpace.getCurrentBooking()\" because \"space\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.Enabled enabled1 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot3 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking5 = null;
        boolean boolean6 = parkingLot3.assignBooking(0, booking5);
        boolean boolean8 = parkingLot3.isSpaceAvailable((int) '#');
        boolean boolean10 = parkingLot3.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLot3.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking13 = parkingSpace12.getCurrentBooking();
        parkingSpace12.removeBooking();
        java.lang.String str15 = enabled1.scanSpace(parkingSpace12);
        java.lang.String str16 = parkingSpace12.scanSpace();
        java.lang.String str17 = disabled0.scanSpace(parkingSpace12);
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        boolean boolean26 = parkingLot19.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace28 = parkingLot19.getParkingSpace((int) (byte) 10);
        ParkingSystem.SpaceState spaceState29 = parkingSpace28.getState();
        java.lang.String str30 = parkingSpace28.scanSpace();
        java.lang.String str31 = disabled0.scanSpace(parkingSpace28);
        ParkingSystem.Booking booking32 = null;
        boolean boolean33 = parkingSpace28.assignBooking(booking32);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "empty" + "'", str15, "empty");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "empty" + "'", str16, "empty");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace28);
        org.junit.Assert.assertNotNull(spaceState29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "empty" + "'", str30, "empty");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "disabled" + "'", str31, "disabled");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", (int) (short) 100);
        boolean boolean13 = bookingManager0.confirmBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "86z9Z9e0MN", "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753", (int) (byte) 0, "4c45f11e-b09a-4d81-adf1-86cfd519dc3c", (int) (byte) -1, "02659ad3-0b5c-4c48-a915-a466f2b50775", "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1515.0d + "'", double3 == 1515.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        boolean boolean9 = client0.confirmBooking("", "pass", (int) (byte) 0, "Paid $ 10.0 with Mobile Pay", (int) (byte) 0, "", "Jane");
        java.lang.String str10 = client0.getUsername();
        boolean boolean12 = client0.extendBooking((-1));
        client0.setValidated(true);
        ParkingSystem.Booking booking15 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str10, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(booking15);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        java.lang.String str9 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str12 = spaceManager0.scanSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Card number should be 16 digits");
        ParkingSystem.Booking booking22 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double23 = booking22.getTotalCost();
        boolean boolean24 = spaceManager0.assignBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0, booking22);
        java.lang.String str25 = booking22.getClientId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disabled" + "'", str9, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "staff" + "'", str25, "staff");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap28 = accountRegistry3.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        boolean boolean41 = parkingSpaceProxy30.cancelBooking("Jane");
        boolean boolean43 = parkingSpaceProxy30.checkOut("empty");
        boolean boolean53 = parkingSpaceProxy30.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry3.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy30);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy56 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj59 = parkingSpaceProxy56.login("empty", "Jane");
        parkingSpaceProxy56.validateClient("Jane");
        parkingSpaceProxy56.toggleSpace("", "staff", false);
        boolean boolean67 = parkingSpaceProxy56.cancelBooking("");
        java.lang.String str70 = parkingSpaceProxy56.scanSpace("staff", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        boolean boolean73 = parkingSpaceProxy56.extendBooking("jane", (int) ' ');
        parkingSpaceProxy56.autoGenerateManager();
        accountRegistry3.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy56);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "disabled" + "'", str70, "disabled");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj5 = parkingSpaceProxy2.login("empty", "Jane");
        parkingSpaceProxy2.validateClient("Jane");
        java.lang.String str10 = parkingSpaceProxy2.scanSpace("", "");
        parkingSpaceProxy2.toggleSpace("", "disabled", true);
        user0.parkingProxy = parkingSpaceProxy2;
        ParkingSystem.ParkingLot parkingLot17 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator18 = parkingLot17.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator19 = parkingLot17.getIterator();
        user0.user = parkingLot17;
        ParkingSystem.Disabled disabled21 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace22 = null;
        java.lang.String str23 = disabled21.scanSpace(parkingSpace22);
        ParkingSystem.Enabled enabled24 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot26 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking28 = null;
        boolean boolean29 = parkingLot26.assignBooking(0, booking28);
        boolean boolean31 = parkingLot26.isSpaceAvailable((int) '#');
        boolean boolean33 = parkingLot26.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace35 = parkingLot26.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking36 = parkingSpace35.getCurrentBooking();
        parkingSpace35.removeBooking();
        java.lang.String str38 = enabled24.scanSpace(parkingSpace35);
        ParkingSystem.ParkingLot parkingLot40 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot40.assignBooking(0, booking42);
        boolean boolean45 = parkingLot40.isSpaceAvailable((int) '#');
        boolean boolean47 = parkingLot40.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace49 = parkingLot40.getParkingSpace((int) (byte) 10);
        int int50 = parkingSpace49.getSpaceId();
        ParkingSystem.Booking booking51 = parkingSpace49.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager52 = new ParkingSystem.SpaceManager();
        boolean boolean55 = spaceManager52.isSpaceAvailable("hi!", (int) '#');
        spaceManager52.toggleLot("disabled", false);
        ParkingSystem.Booking booking68 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean69 = spaceManager52.assignBooking("empty", (int) (short) 0, booking68);
        boolean boolean70 = parkingSpace49.assignBooking(booking68);
        java.lang.String str71 = enabled24.scanSpace(parkingSpace49);
        java.lang.String str72 = disabled21.scanSpace(parkingSpace49);
        user0.user = str72;
        user0.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "Jane", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Client client80 = ParkingSystem.Client.getInstance();
        java.lang.String str81 = client80.getName();
        java.lang.String str82 = client80.getClientId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy83 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj86 = parkingSpaceProxy83.login("empty", "Jane");
        parkingSpaceProxy83.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        client80.assignProxy(parkingSpaceProxy83);
        user0.user = parkingSpaceProxy83;
        boolean boolean94 = parkingSpaceProxy83.cancelBooking("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        boolean boolean96 = parkingSpaceProxy83.cancelBooking("Card number should be 16 digits");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator18);
        org.junit.Assert.assertNotNull(parkingLotIterator19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(parkingSpace35);
        org.junit.Assert.assertNull(booking36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "empty" + "'", str38, "empty");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(parkingSpace49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNull(booking51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "disabled" + "'", str71, "disabled");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "disabled" + "'", str72, "disabled");
        org.junit.Assert.assertNotNull(client80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CLT-30fd593b-dedd-41b3-a919-c48700301f41" + "'", str81, "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
// flaky "56) test0766(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "CLT-5be1cd5a-d829-4101-9cd3-6006338eb786" + "'", str82, "CLT-5be1cd5a-d829-4101-9cd3-6006338eb786");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean7 = bookingManager0.editBooking("Jane", "empty", 10);
        boolean boolean11 = bookingManager0.editBooking("Jane", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) (short) 1);
        ParkingSystem.SpaceManager spaceManager12 = bookingManager0.getSpaceManager();
        spaceManager12.loadParkingLots();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(spaceManager12);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry20 = superManager19.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = null;
        accountRegistry20.assignProxyToManager("jane", parkingSpaceProxy22);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap24 = accountRegistry20.getManagers();
        boolean boolean30 = accountRegistry20.registerClient("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Paid $ 100.0 with Mobile Pay", "CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        java.lang.String str8 = booking7.getClientId();
        java.lang.String str9 = booking7.getLotId();
        booking7.setDuration(10);
        java.lang.String str12 = booking7.getStartTime();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "staff" + "'", str8, "staff");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "jane" + "'", str9, "jane");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jane" + "'", str12, "Jane");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        java.lang.String str18 = booking15.getLicensePlate();
        int int19 = booking15.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(false);
        client0.setClientInfo("staff", "Refunded total cost of $1.0", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Jane", "Paid $ 10.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", true);
        java.lang.String str13 = client0.getExtraId();
        java.lang.String str14 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089" + "'", str1, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str2, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str13, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jane" + "'", str14, "Jane");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        spaceManager0.addParkingLot("staff");
        spaceManager0.toggleSpace("h40rNQ7kR1", "2afd610d-a8cb-413a-bbee-7927f86b526c", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList12 = accountRegistry6.displayPendingValidations();
        java.lang.Object obj15 = accountRegistry6.login("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(clientList12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        ParkingSystem.MobilePay mobilePay4 = new ParkingSystem.MobilePay();
        boolean boolean9 = mobilePay4.processPayment("hi!", (-1.0d), "", "");
        boolean boolean14 = mobilePay4.processPayment("staff", (double) (-1L), "disabled", "pass");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay4);
        java.lang.String str16 = mobilePay4.getPaymentMessage();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str16, "Paid $ -1.0 with Mobile Pay");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean18 = paymentManager0.refundWithoutDeposit((double) 0.0f, (double) (-1));
        java.lang.String str19 = paymentManager0.paymentMessage;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str19, "Paid $ 100.0 with Mobile Pay");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade3.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = spaceManager4.getParkingLots();
        cSVManager0.saveParkingLots(strMap5);
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry12 = parkingSpaceProxy11.getRegistry();
        boolean boolean14 = parkingSpaceProxy11.checkIn("");
        client7.assignProxy(parkingSpaceProxy11);
        boolean boolean16 = client7.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy17 = new ParkingSystem.ParkingSpaceProxy();
        client7.assignProxy(parkingSpaceProxy17);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy19 = null;
        client7.assignProxy(parkingSpaceProxy19);
        cSVManager0.saveClient(client7);
        ParkingSystem.CSVManager cSVManager22 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray23 = cSVManager22.loadSuperManager();
        java.lang.String[] strArray24 = cSVManager22.loadSuperManager();
        ParkingSystem.Client client25 = ParkingSystem.Client.getInstance();
        java.lang.String str26 = client25.getName();
        client25.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy29 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry30 = parkingSpaceProxy29.getRegistry();
        boolean boolean32 = parkingSpaceProxy29.checkIn("");
        client25.assignProxy(parkingSpaceProxy29);
        boolean boolean34 = client25.cancelBooking();
        java.lang.String str35 = client25.getExtraId();
        java.lang.String str36 = client25.getName();
        client25.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager22.saveClient(client25);
        ParkingSystem.AccountRegistry accountRegistry49 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager50 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry49);
        java.lang.String str51 = superManager50.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry55 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager56 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry55);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy58 = null;
        accountRegistry55.assignProxyToManager("disabled", parkingSpaceProxy58);
        superManager50.registry = accountRegistry55;
        cSVManager22.saveManager((ParkingSystem.Manager) superManager50);
        cSVManager0.saveManager((ParkingSystem.Manager) superManager50);
        ParkingSystem.AccountRegistry accountRegistry63 = superManager50.getRegistry();
        org.junit.Assert.assertNotNull(strArray1);
// flaky "57) test0776(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "30) test0776(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(client7);
// flaky "23) test0776(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jane" + "'", str8, "jane");
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
// flaky "14) test0776(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray23, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray24);
// flaky "9) test0776(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client25);
// flaky "5) test0776(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertNotNull(accountRegistry30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky "4) test0776(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "staff" + "'", str35, "staff");
// flaky "2) test0776(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "jane" + "'", str36, "jane");
        org.junit.Assert.assertNotNull(superManager50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "TXCrKOGD" + "'", str51, "TXCrKOGD");
        org.junit.Assert.assertNotNull(superManager56);
        org.junit.Assert.assertNotNull(accountRegistry63);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.BookingManager bookingManager13 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager14 = new ParkingSystem.CheckInManager(bookingManager13);
        ParkingSystem.SpaceManager spaceManager15 = bookingManager13.getSpaceManager();
        double double18 = bookingManager13.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit19 = new ParkingSystem.DebitOrCredit();
        bookingManager13.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit19);
        boolean boolean25 = debitOrCredit19.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str26 = debitOrCredit19.getPaymentMessage();
        boolean boolean29 = debitOrCredit19.validateCard("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", (double) (short) 1);
        bookingManager12.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit19);
        boolean boolean33 = debitOrCredit19.validateCard("Refunded without deposit ($-42.0)", (double) 2);
        boolean boolean38 = debitOrCredit19.processPayment("13b04414-31a5-407f-8ea3-fba4613c73d1", (double) (short) 100, "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "qPYDfDnbtD");
        org.junit.Assert.assertNotNull(client0);
// flaky "58) test0777(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(spaceManager15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 165.0d + "'", double18 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Card number should be 16 digits" + "'", str26, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(false);
        client0.setClientInfo("staff", "Refunded total cost of $1.0", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Jane", "Paid $ 10.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", true);
        boolean boolean13 = client0.checkIn();
        java.lang.String str14 = client0.getPassword();
        boolean boolean16 = client0.extendBooking(100);
        org.junit.Assert.assertNotNull(client0);
// flaky "59) test0778(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Refunded total cost of $1.0" + "'", str1, "Refunded total cost of $1.0");
// flaky "31) test0778(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str2, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jane" + "'", str14, "Jane");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap19 = bookingManager18.getActiveBookings();
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager18);
        java.lang.String str21 = checkInManager20.refundMessage;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Refunded total cost of $1.0" + "'", str6, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getPassword();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str13 = client3.getUsername();
        java.lang.String str14 = client3.getPassword();
        java.lang.String str15 = client3.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = null;
        client3.assignProxy(parkingSpaceProxy16);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        client3.assignProxy(parkingSpaceProxy18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj26 = parkingSpaceProxy23.login("empty", "Jane");
        parkingSpaceProxy23.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        parkingSpaceProxy23.displayPendingValidations();
        client3.assignProxy(parkingSpaceProxy23);
        client0.assignProxy(parkingSpaceProxy23);
        java.lang.String str34 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str1, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Jane" + "'", str2, "Jane");
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Refunded total cost of $1.0" + "'", str4, "Refunded total cost of $1.0");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "disabled" + "'", str14, "disabled");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "disabled" + "'", str34, "disabled");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap8 = accountRegistry6.getManagers();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry6);
        boolean boolean15 = accountRegistry6.registerClient("ST001", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "pass", "staff", "Card number should be 16 digits");
        java.util.List<ParkingSystem.Client> clientList16 = accountRegistry6.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(clientList16);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        parkingSpaceFacade17.toggleSpace("pass", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", true);
        parkingSpaceFacade17.addParkingLot("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "60) test0782(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Card number should be 16 digits" + "'", str6, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        boolean boolean13 = parkingSpaceFacade0.confirmBooking("staff", "", "Paid $ 10.0 with Mobile Pay", "Card number should be 16 digits", (int) (short) 0, "", (int) (short) 1, "Refunded without deposit ($0.0)", "disabled");
        boolean boolean15 = parkingSpaceFacade0.checkIn("pass");
        boolean boolean17 = parkingSpaceFacade0.checkOut("Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean2 = parkingSpaceProxy0.cancelBooking("pass");
        parkingSpaceProxy0.addParkingLot("pass");
        boolean boolean6 = parkingSpaceProxy0.checkIn("Paid $ 100.0 with Mobile Pay");
        boolean boolean12 = parkingSpaceProxy0.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Refunded without deposit ($-42.0)", "Paid $ 0.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled");
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy0.getRegistry();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap14 = accountRegistry13.getManagers();
        java.lang.Class<?> wildcardClass15 = accountRegistry13.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "hi!";
        ParkingSystem.BookingManager bookingManager7 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager8 = new ParkingSystem.CheckInManager(bookingManager7);
        ParkingSystem.SpaceManager spaceManager9 = bookingManager7.getSpaceManager();
        double double12 = bookingManager7.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit13 = new ParkingSystem.DebitOrCredit();
        bookingManager7.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit13);
        boolean boolean19 = debitOrCredit13.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        java.lang.String str20 = debitOrCredit13.getPaymentMessage();
        java.lang.String str21 = debitOrCredit13.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit13);
        boolean boolean27 = debitOrCredit13.processPayment("83a51dc6-0c8f-4f21-ae40-68699828f95d", 0.0d, "Refunded total cost of $100.0", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(spaceManager9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 165.0d + "'", double12 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Card number should be 16 digits" + "'", str20, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Card number should be 16 digits" + "'", str21, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry8.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        boolean boolean16 = accountRegistry6.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        parkingSpaceProxy18.validateClient("Jane");
        parkingSpaceProxy18.toggleSpace("", "staff", false);
        boolean boolean29 = parkingSpaceProxy18.cancelBooking("Jane");
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy18);
        boolean boolean32 = accountRegistry6.requiresValidation("empty");
        boolean boolean34 = accountRegistry6.requiresValidation("433f3d1f-f758-4ae3-972b-7fb179aedfd7");
        accountRegistry6.validateClient("4a1f2343-8b2e-4dea-ba69-efd105414390");
        ParkingSystem.SuperManager superManager37 = ParkingSystem.SuperManager.createFromCSV("disabled", "Paid $ 100.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", accountRegistry6);
        boolean boolean43 = accountRegistry6.registerClient("83a51dc6-0c8f-4f21-ae40-68699828f95d", "4a1f2343-8b2e-4dea-ba69-efd105414390", "", "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(superManager37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = parkingSpaceFacade0.scanSpace("jane", "Refunded without deposit ($0.0)");
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("Jane", "");
        ParkingSystem.Booking booking12 = parkingSpaceFacade0.getBookingDetails("4a1f2343-8b2e-4dea-ba69-efd105414390");
        boolean boolean22 = parkingSpaceFacade0.confirmBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", "02659ad3-0b5c-4c48-a915-a466f2b50775", 32, "02659ad3-0b5c-4c48-a915-a466f2b50775", (int) (short) 0, "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "89de8237-29df-4908-9de4-6dc1ce90de94");
        ParkingSystem.CheckInManager checkInManager23 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean27 = parkingSpaceFacade0.editBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "Refunded without deposit ($-42.0)", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(checkInManager23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = parkingSpaceFacade0.scanSpace("jane", "Refunded without deposit ($0.0)");
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay");
        parkingSpaceFacade0.toggleSpace("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "", false);
        ParkingSystem.CheckInManager checkInManager15 = parkingSpaceFacade0.getCheckInManager();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNotNull(checkInManager15);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        parkingSpaceProxy0.toggleSpace("", "staff", false);
        boolean boolean11 = parkingSpaceProxy0.cancelBooking("Jane");
        boolean boolean13 = parkingSpaceProxy0.checkOut("empty");
        java.lang.Object obj16 = parkingSpaceProxy0.login("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        ParkingSystem.CSVManager cSVManager2 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager2.readCSV("");
        java.util.List<java.lang.String[]> strArrayList6 = cSVManager2.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap7 = null;
        cSVManager2.loadParkingLots(strMap7);
        java.util.List<java.lang.String[]> strArrayList10 = cSVManager2.readCSV("Paid $ -1.0 with Mobile Pay");
        java.lang.String[] strArray11 = cSVManager2.loadSuperManager();
        java.lang.String[] strArray12 = cSVManager2.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry16 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager17 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry16);
        boolean boolean19 = accountRegistry16.requiresValidation("disabled");
        int int20 = accountRegistry16.getManagersSize();
        boolean boolean26 = accountRegistry16.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy28 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj31 = parkingSpaceProxy28.login("empty", "Jane");
        parkingSpaceProxy28.validateClient("Jane");
        parkingSpaceProxy28.toggleSpace("", "staff", false);
        boolean boolean39 = parkingSpaceProxy28.cancelBooking("Jane");
        accountRegistry16.assignProxyToClient("pass", parkingSpaceProxy28);
        parkingSpaceProxy28.autoGenerateManager();
        parkingSpaceProxy28.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade46 = parkingSpaceProxy28.getFacade();
        boolean boolean48 = parkingSpaceFacade46.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean50 = parkingSpaceFacade46.cancelBooking("Jane");
        boolean boolean53 = parkingSpaceFacade46.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager54 = parkingSpaceFacade46.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap55 = spaceManager54.getParkingLots();
        cSVManager2.loadParkingLots(strMap55);
        cSVManager0.loadParkingLots(strMap55);
        org.junit.Assert.assertNotNull(strArray1);
// flaky "61) test0791(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArray11);
// flaky "32) test0791(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray12);
// flaky "24) test0791(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray12, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(spaceManager54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        java.lang.String str8 = parkingSpaceProxy0.scanSpace("", "");
        java.lang.Object obj11 = parkingSpaceProxy0.login("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff");
        parkingSpaceProxy0.toggleLot("Refunded without deposit ($-42.0)", false);
        boolean boolean24 = parkingSpaceProxy0.confirmBooking("Paid $ 10.0 with Mobile Pay", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "Paid $ 10.0 with Mobile Pay", 1, "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", (-1), "Refunded total cost of $-1.0", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52");
        boolean boolean26 = parkingSpaceProxy0.checkOut("3b453211-7dd1-4452-8741-a206711c1217");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        java.lang.String str6 = superManager4.getManagerId();
        ParkingSystem.Manager manager7 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        java.lang.String str9 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry10 = superManager4.registry;
        java.lang.String str11 = superManager4.getManagerId();
        java.lang.Class<?> wildcardClass12 = superManager4.getClass();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TXCrKOGD" + "'", str5, "TXCrKOGD");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TXCrKOGD" + "'", str6, "TXCrKOGD");
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TXCrKOGD" + "'", str9, "TXCrKOGD");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TXCrKOGD" + "'", str11, "TXCrKOGD");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        java.lang.String str2 = client0.getPassword();
        boolean boolean3 = client0.checkIn();
        java.lang.String str4 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("Paid $ -1.0 with Mobile Pay");
        boolean boolean3 = parkingLot1.isSpaceAvailable((int) '4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean4 = parkingSpaceFacade0.cancelBooking("jane");
        boolean boolean7 = parkingSpaceFacade0.extendBooking("hi!", (-1));
        parkingSpaceFacade0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        parkingSpaceFacade0.toggleSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ 10.0 with Mobile Pay", true);
        ParkingSystem.SpaceManager spaceManager15 = parkingSpaceFacade0.getSpaceManager();
        ParkingSystem.SpaceManager spaceManager16 = parkingSpaceFacade0.getSpaceManager();
        spaceManager16.loadParkingLots();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(spaceManager15);
        org.junit.Assert.assertNotNull(spaceManager16);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean23 = bookingManager18.extendBooking("Paid $ 0.0 with Mobile Pay", (int) 'a', "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        double double25 = bookingManager18.getHourlyRate("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        boolean boolean30 = bookingManager18.extendBooking("ST001", (int) (byte) 1, "86z9Z9e0MN", "disabled");
        double double32 = bookingManager18.getDeposit("");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "62) test0797(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 15.0d + "'", double25 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 15.0d + "'", double32 == 15.0d);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        ParkingSystem.SpaceManager spaceManager32 = new ParkingSystem.SpaceManager();
        boolean boolean35 = spaceManager32.isSpaceAvailable("hi!", (int) '#');
        spaceManager32.toggleLot("disabled", false);
        ParkingSystem.Booking booking48 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean49 = spaceManager32.assignBooking("empty", (int) (short) 0, booking48);
        boolean boolean50 = booking48.isCheckedIn();
        java.lang.String str51 = booking48.getClientId();
        boolean boolean52 = parkingSpace10.assignBooking(booking48);
        ParkingSystem.SpaceManager spaceManager53 = new ParkingSystem.SpaceManager();
        boolean boolean56 = spaceManager53.isSpaceAvailable("hi!", (int) '#');
        spaceManager53.toggleLot("disabled", false);
        ParkingSystem.Booking booking69 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean70 = spaceManager53.assignBooking("empty", (int) (short) 0, booking69);
        boolean boolean71 = booking69.isCheckedIn();
        boolean boolean72 = parkingSpace10.assignBooking(booking69);
        ParkingSystem.ParkingLot parkingLot74 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking76 = null;
        boolean boolean77 = parkingLot74.assignBooking(0, booking76);
        boolean boolean79 = parkingLot74.isSpaceAvailable((int) '#');
        boolean boolean81 = parkingLot74.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace83 = parkingLot74.getParkingSpace((int) (byte) 10);
        ParkingSystem.Enabled enabled84 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot86 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator87 = parkingLot86.getIterator();
        ParkingSystem.ParkingSpace parkingSpace89 = parkingLot86.getParkingSpace((int) (byte) -1);
        java.lang.String str90 = enabled84.scanSpace(parkingSpace89);
        parkingSpace83.setState((ParkingSystem.SpaceState) enabled84);
        ParkingSystem.SpaceState spaceState92 = parkingSpace83.getState();
        parkingSpace10.setState(spaceState92);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "staff" + "'", str51, "staff");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(parkingSpace83);
        org.junit.Assert.assertNotNull(parkingLotIterator87);
        org.junit.Assert.assertNotNull(parkingSpace89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "empty" + "'", str90, "empty");
        org.junit.Assert.assertNotNull(spaceState92);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double8 = booking7.getTotalCost();
        java.lang.String str9 = booking7.getLotId();
        int int10 = booking7.getDuration();
        java.lang.String str11 = booking7.getLotId();
        boolean boolean12 = booking7.isCheckedIn();
        java.lang.String str13 = booking7.getStartTime();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "jane" + "'", str9, "jane");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jane" + "'", str13, "Jane");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.Client client9 = ParkingSystem.Client.getInstance();
        java.lang.String str10 = client9.getName();
        client9.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str19 = client9.getUsername();
        java.lang.String str20 = client9.getPassword();
        java.lang.String str21 = client9.getUsername();
        cSVManager0.saveClient(client9);
        boolean boolean23 = client9.cancelBooking();
        client9.setValidated(false);
        java.lang.String str26 = client9.getClientId();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(client9);
// flaky "63) test0800(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "empty" + "'", str10, "empty");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        boolean boolean44 = parkingSpaceFacade33.extendBooking("Card number should be 16 digits", 100);
        parkingSpaceFacade33.toggleLot("25527a32-01ef-45ba-816a-1d0a2fc2a52d", true);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getClientType();
        java.lang.String str2 = client0.getUsername();
        client0.setValidated(false);
        client0.setClientInfo("staff", "Refunded total cost of $1.0", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Jane", "Paid $ 10.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay", true);
        boolean boolean15 = client0.editBooking("Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean16 = client0.checkOut();
        client0.setClientInfo("jane", "disabled", "", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "Refunded without deposit ($0.0)", false);
        boolean boolean25 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str1, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        double double5 = bookingManager3.getHourlyRate("jane");
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        bookingManager3.setPaymentStrategy((ParkingSystem.Strategy) mobilePay6);
        ParkingSystem.Booking booking9 = bookingManager3.getBooking("Paid $ 100.0 with Mobile Pay");
        ParkingSystem.CheckInManager checkInManager10 = new ParkingSystem.CheckInManager(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNull(booking9);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("3b453211-7dd1-4452-8741-a206711c1217");
        parkingLot1.removeBooking(0);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        java.lang.String str14 = debitOrCredit6.getPaymentMessage();
        boolean boolean17 = debitOrCredit6.validateCard("7aecb00c-028c-4dcf-96cc-14d25bd709ab", (double) (byte) 10);
        boolean boolean22 = debitOrCredit6.processPayment("86z9Z9e0MN", (double) (byte) 10, "CLT-5be1cd5a-d829-4101-9cd3-6006338eb786", "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Card number should be 16 digits" + "'", str14, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        accountRegistry28.assignProxyToManager("pass", parkingSpaceProxy30);
        boolean boolean46 = parkingSpaceProxy30.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled", "Refunded total cost of $1.0", "", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy30;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = user0.parkingProxy;
        java.lang.String str51 = parkingSpaceProxy48.scanSpace("13b04414-31a5-407f-8ea3-fba4613c73d1", "Refunded total cost of $100.0");
        parkingSpaceProxy48.displayPendingValidations();
        boolean boolean58 = parkingSpaceProxy48.register("Refunded total cost of $1.0", "83a51dc6-0c8f-4f21-ae40-68699828f95d", "86z9Z9e0MN", "jane", "86z9Z9e0MN");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "disabled" + "'", str51, "disabled");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean10 = accountRegistry3.registerClient("Paid $ 0.0 with Mobile Pay", "Jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        java.util.List<ParkingSystem.Client> clientList11 = accountRegistry3.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(clientList11);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        boolean boolean15 = client0.getIsValidated();
        boolean boolean16 = client0.checkOut();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str1, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        boolean boolean14 = parkingSpaceProxy3.cancelBooking("");
        boolean boolean20 = parkingSpaceProxy3.register("jane", "jane", "Jane", "hi!", "disabled");
        accountRegistry1.assignProxyToManager("empty", parkingSpaceProxy3);
        boolean boolean23 = parkingSpaceProxy3.checkOut("8ca2ec61-774c-409d-89d5-5b9171b40497");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace(10);
        ParkingSystem.ParkingLot parkingLot3 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking5 = null;
        boolean boolean6 = parkingLot3.assignBooking(0, booking5);
        boolean boolean8 = parkingLot3.isSpaceAvailable((int) '#');
        boolean boolean10 = parkingLot3.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLot3.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking13 = parkingSpace12.getCurrentBooking();
        ParkingSystem.Booking booking14 = parkingSpace12.getCurrentBooking();
        ParkingSystem.Disabled disabled15 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace16 = null;
        java.lang.String str17 = disabled15.scanSpace(parkingSpace16);
        ParkingSystem.ParkingSpace parkingSpace18 = null;
        java.lang.String str19 = disabled15.scanSpace(parkingSpace18);
        parkingSpace12.setState((ParkingSystem.SpaceState) disabled15);
        parkingSpace1.setState((ParkingSystem.SpaceState) disabled15);
        ParkingSystem.ParkingLot parkingLot23 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking25 = null;
        boolean boolean26 = parkingLot23.assignBooking(0, booking25);
        boolean boolean28 = parkingLot23.isSpaceAvailable((int) '#');
        boolean boolean30 = parkingLot23.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace32 = parkingLot23.getParkingSpace((int) (byte) 10);
        int int33 = parkingSpace32.getSpaceId();
        java.lang.String str34 = parkingSpace32.scanSpace();
        java.lang.String str35 = disabled15.scanSpace(parkingSpace32);
        ParkingSystem.ParkingLot parkingLot37 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking39 = null;
        boolean boolean40 = parkingLot37.assignBooking(0, booking39);
        ParkingSystem.Booking booking42 = null;
        boolean boolean43 = parkingLot37.assignBooking(1, booking42);
        ParkingSystem.ParkingLotIterator parkingLotIterator44 = parkingLot37.getIterator();
        ParkingSystem.ParkingSpace parkingSpace45 = parkingLotIterator44.next();
        boolean boolean46 = parkingSpace45.isAvailable();
        ParkingSystem.Booking booking47 = parkingSpace45.getCurrentBooking();
        java.lang.String str48 = disabled15.scanSpace(parkingSpace45);
        java.lang.String str49 = parkingSpace45.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertNull(booking14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "disabled" + "'", str17, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(parkingSpace32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "empty" + "'", str34, "empty");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "disabled" + "'", str35, "disabled");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator44);
        org.junit.Assert.assertNotNull(parkingSpace45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(booking47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "disabled" + "'", str48, "disabled");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "empty" + "'", str49, "empty");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager3 = new ParkingSystem.PaymentManager();
        java.lang.String str4 = paymentManager3.refundMessage;
        boolean boolean6 = paymentManager3.refundTotalCost((-1.0d));
        paymentManager3.refundMessage = "disabled";
        boolean boolean13 = paymentManager3.processPayment("", (double) 0L, "Paid $ 10.0 with Mobile Pay", "pass");
        boolean boolean16 = paymentManager3.refundWithoutDeposit(165.0d, 10.0d);
        user0.user = boolean16;
        ParkingSystem.User user18 = new ParkingSystem.User();
        java.lang.Object obj19 = user18.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = user18.parkingProxy;
        ParkingSystem.User user21 = new ParkingSystem.User();
        java.lang.Object obj22 = user21.user;
        ParkingSystem.Client client23 = ParkingSystem.Client.getInstance();
        java.lang.String str24 = client23.getName();
        client23.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean30 = parkingSpaceProxy27.checkIn("");
        client23.assignProxy(parkingSpaceProxy27);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade32 = parkingSpaceProxy27.getFacade();
        user21.assignProxy(parkingSpaceProxy27);
        user18.parkingProxy = parkingSpaceProxy27;
        ParkingSystem.AccountRegistry accountRegistry38 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager39 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry38);
        boolean boolean41 = accountRegistry38.requiresValidation("disabled");
        int int42 = accountRegistry38.getManagersSize();
        boolean boolean48 = accountRegistry38.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy50 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj53 = parkingSpaceProxy50.login("empty", "Jane");
        parkingSpaceProxy50.validateClient("Jane");
        parkingSpaceProxy50.toggleSpace("", "staff", false);
        boolean boolean61 = parkingSpaceProxy50.cancelBooking("Jane");
        accountRegistry38.assignProxyToClient("pass", parkingSpaceProxy50);
        parkingSpaceProxy50.autoGenerateManager();
        parkingSpaceProxy50.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        user18.assignProxy(parkingSpaceProxy50);
        user0.assignProxy(parkingSpaceProxy50);
        parkingSpaceProxy50.toggleSpace("", "empty", true);
        java.lang.Class<?> wildcardClass74 = parkingSpaceProxy50.getClass();
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(parkingSpaceProxy20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(client23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "jane" + "'", str24, "jane");
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade32);
        org.junit.Assert.assertNotNull(superManager39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Client client6 = accountRegistry3.getClient("staff");
        java.lang.Object obj9 = accountRegistry3.login("staff", "83a51dc6-0c8f-4f21-ae40-68699828f95d");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNull(client6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        ParkingSystem.Disabled disabled0 = new ParkingSystem.Disabled();
        ParkingSystem.ParkingSpace parkingSpace1 = null;
        java.lang.String str2 = disabled0.scanSpace(parkingSpace1);
        ParkingSystem.ParkingSpace parkingSpace3 = null;
        java.lang.String str4 = disabled0.scanSpace(parkingSpace3);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        boolean boolean11 = parkingLot6.isSpaceAvailable((int) '#');
        boolean boolean12 = parkingLot6.isEnabled();
        boolean boolean14 = parkingLot6.isSpaceAvailable((int) (byte) 100);
        boolean boolean15 = parkingLot6.isEnabled();
        ParkingSystem.ParkingSpace parkingSpace17 = parkingLot6.getParkingSpace((-1));
        java.lang.String str18 = disabled0.scanSpace(parkingSpace17);
        ParkingSystem.ParkingLot parkingLot20 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking22 = null;
        boolean boolean23 = parkingLot20.assignBooking(0, booking22);
        boolean boolean25 = parkingLot20.isSpaceAvailable((int) '#');
        boolean boolean27 = parkingLot20.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace29 = parkingLot20.getParkingSpace((int) (byte) 10);
        int int30 = parkingSpace29.getSpaceId();
        ParkingSystem.Booking booking31 = parkingSpace29.getCurrentBooking();
        java.lang.String str32 = parkingSpace29.scanSpace();
        int int33 = parkingSpace29.getSpaceId();
        ParkingSystem.ParkingLot parkingLot35 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking37 = null;
        boolean boolean38 = parkingLot35.assignBooking(0, booking37);
        boolean boolean40 = parkingLot35.isSpaceAvailable((int) '#');
        boolean boolean42 = parkingLot35.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace44 = parkingLot35.getParkingSpace((int) (byte) 10);
        int int45 = parkingSpace44.getSpaceId();
        ParkingSystem.Booking booking46 = parkingSpace44.getCurrentBooking();
        java.lang.String str47 = parkingSpace44.scanSpace();
        int int48 = parkingSpace44.getSpaceId();
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        spaceManager49.toggleLot("disabled", false);
        ParkingSystem.Booking booking65 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean66 = spaceManager49.assignBooking("empty", (int) (short) 0, booking65);
        java.lang.String str67 = booking65.getClientId();
        boolean boolean68 = parkingSpace44.assignBooking(booking65);
        int int69 = booking65.getDuration();
        boolean boolean70 = parkingSpace29.assignBooking(booking65);
        java.lang.String str71 = disabled0.scanSpace(parkingSpace29);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "disabled" + "'", str2, "disabled");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(parkingSpace17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingSpace29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(booking31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "empty" + "'", str32, "empty");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpace44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNull(booking46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "empty" + "'", str47, "empty");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "staff" + "'", str67, "staff");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "disabled" + "'", str71, "disabled");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("jane", "");
        spaceManager0.toggleLot("Jane", true);
        spaceManager0.addParkingLot("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        spaceManager0.removeBooking("FNuxCiXmkP", (int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        boolean boolean8 = parkingLotIterator7.hasNext();
        ParkingSystem.ParkingSpace parkingSpace9 = parkingLotIterator7.next();
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLotIterator7.next();
        // The following exception was thrown during execution in test generation
        try {
            ParkingSystem.ParkingSpace parkingSpace11 = parkingLotIterator7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace9);
        org.junit.Assert.assertNotNull(parkingSpace10);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean6 = parkingSpaceFacade0.extendBooking("disabled", 0);
        parkingSpaceFacade0.toggleSpace("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "", false);
        boolean boolean20 = parkingSpaceFacade0.confirmBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "Refunded without deposit ($0.0)", (int) (byte) -1, "433f3d1f-f758-4ae3-972b-7fb179aedfd7", 0, "Paid $ -1.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        parkingSpaceFacade0.toggleLot("8ca2ec61-774c-409d-89d5-5b9171b40497", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.Manager manager15 = accountRegistry8.autoGenerateManager();
        int int16 = accountRegistry8.getManagersSize();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNotNull(manager15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        ParkingSystem.ParkingLot parkingLot7 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot7.assignBooking(0, booking9);
        boolean boolean12 = parkingLot7.isSpaceAvailable((int) '#');
        boolean boolean14 = parkingLot7.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace16 = parkingLot7.getParkingSpace((int) (byte) 10);
        int int17 = parkingSpace16.getSpaceId();
        ParkingSystem.Booking booking18 = parkingSpace16.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager19 = new ParkingSystem.SpaceManager();
        boolean boolean22 = spaceManager19.isSpaceAvailable("hi!", (int) '#');
        spaceManager19.toggleLot("disabled", false);
        ParkingSystem.Booking booking35 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean36 = spaceManager19.assignBooking("empty", (int) (short) 0, booking35);
        boolean boolean37 = parkingSpace16.assignBooking(booking35);
        ParkingSystem.SpaceManager spaceManager38 = new ParkingSystem.SpaceManager();
        boolean boolean41 = spaceManager38.isSpaceAvailable("hi!", (int) '#');
        spaceManager38.toggleLot("disabled", false);
        ParkingSystem.Booking booking54 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean55 = spaceManager38.assignBooking("empty", (int) (short) 0, booking54);
        ParkingSystem.SpaceManager spaceManager58 = new ParkingSystem.SpaceManager();
        boolean boolean61 = spaceManager58.isSpaceAvailable("hi!", (int) '#');
        spaceManager58.toggleLot("disabled", false);
        ParkingSystem.Booking booking74 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean75 = spaceManager58.assignBooking("empty", (int) (short) 0, booking74);
        boolean boolean76 = spaceManager38.assignBooking("disabled", (int) (byte) 0, booking74);
        boolean boolean77 = parkingSpace16.assignBooking(booking74);
        boolean boolean78 = spaceManager0.assignBooking("", (int) (short) 1, booking74);
        boolean boolean81 = spaceManager0.isSpaceAvailable("hi!", (int) (byte) 1);
        spaceManager0.loadParkingLots();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(parkingSpace16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(booking18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        accountRegistry1.assignProxyToManager("pass", parkingSpaceProxy3);
        boolean boolean16 = parkingSpaceProxy3.extendBooking("4a1f2343-8b2e-4dea-ba69-efd105414390", (int) (short) 1);
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client3 = ParkingSystem.Client.getInstance();
        java.lang.String str4 = client3.getName();
        client3.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy7 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry8 = parkingSpaceProxy7.getRegistry();
        boolean boolean10 = parkingSpaceProxy7.checkIn("");
        client3.assignProxy(parkingSpaceProxy7);
        boolean boolean12 = client3.cancelBooking();
        java.lang.String str13 = client3.getExtraId();
        java.lang.String str14 = client3.getName();
        client3.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        cSVManager0.saveClient(client3);
        ParkingSystem.Client client24 = ParkingSystem.Client.getInstance();
        java.lang.String str25 = client24.getName();
        client24.setValidated(true);
        ParkingSystem.Booking booking28 = client24.getBookingDetails();
        java.lang.String str29 = client24.getUsername();
        java.lang.String str30 = client24.getUsername();
        ParkingSystem.Booking booking31 = client24.getBookingDetails();
        cSVManager0.saveClient(client24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList33 = cSVManager0.loadManagers();
// flaky "64) test0820(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
// flaky "33) test0820(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "25) test0820(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jane" + "'", str4, "jane");
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "staff" + "'", str13, "staff");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jane" + "'", str14, "jane");
        org.junit.Assert.assertNotNull(client24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "empty" + "'", str25, "empty");
        org.junit.Assert.assertNull(booking28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jane" + "'", str29, "Jane");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Jane" + "'", str30, "Jane");
        org.junit.Assert.assertNull(booking31);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        parkingSpaceProxy1.displayPendingValidations();
        boolean boolean18 = parkingSpaceProxy1.editBooking("Paid $ -1.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", 100);
        parkingSpaceProxy1.autoGenerateManager();
        boolean boolean21 = parkingSpaceProxy1.checkOut("4a1f2343-8b2e-4dea-ba69-efd105414390");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("staff", false);
        parkingSpaceFacade0.toggleLot("", false);
        parkingSpaceFacade0.addParkingLot("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        client0.assignProxy(parkingSpaceProxy15);
        boolean boolean21 = client0.extendBooking((int) (byte) 10);
        java.lang.String str22 = client0.getClientId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry24 = parkingSpaceProxy23.getRegistry();
        boolean boolean30 = parkingSpaceProxy23.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean34 = parkingSpaceProxy23.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        boolean boolean44 = parkingSpaceProxy23.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff", "disabled", (int) (short) 0, "Paid $ 100.0 with Mobile Pay", (int) (short) 10, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Jane");
        boolean boolean46 = parkingSpaceProxy23.checkOut("Card number should be 16 digits");
        parkingSpaceProxy23.autoGenerateManager();
        client0.assignProxy(parkingSpaceProxy23);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean21 = debitOrCredit6.validateCard("Jane", (double) '4');
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        boolean boolean27 = debitOrCredit6.processPayment("86z9Z9e0MN", (double) 0, "jane", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        boolean boolean32 = debitOrCredit6.processPayment("qPYDfDnbtD", (double) 10L, "CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", "");
        boolean boolean37 = debitOrCredit6.processPayment("Refunded total cost of $100.0", (double) (short) 1, "13b04414-31a5-407f-8ea3-fba4613c73d1", "25527a32-01ef-45ba-816a-1d0a2fc2a52d");
        boolean boolean40 = debitOrCredit6.validateCard("Refunded total cost of $1.0", (double) 10);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        booking25.setStartTime("");
        java.lang.String str34 = booking25.getLicensePlate();
        int int35 = booking25.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "disabled" + "'", str34, "disabled");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.BookingManager bookingManager1 = parkingSpaceFacade0.getBookingManager();
        double double3 = bookingManager1.getHourlyRate("pass");
        double double6 = bookingManager1.calculateCost("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", (int) '4');
        org.junit.Assert.assertNotNull(bookingManager1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 795.0d + "'", double6 == 795.0d);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        ParkingSystem.AccountRegistry accountRegistry3 = null;
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("pass", "empty", "Jane", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry5 = superManager4.getRegistry();
        java.util.List<ParkingSystem.Client> clientList6 = accountRegistry5.displayPendingValidations();
        java.util.List<ParkingSystem.Client> clientList7 = accountRegistry5.displayPendingValidations();
        boolean boolean13 = accountRegistry5.registerClient("CLT-f02c481e-1504-4abf-b598-76152da8586a", "FNuxCiXmkP", "", "Paid $ -1.0 with Mobile Pay", "qPYDfDnbtD");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertNotNull(clientList6);
        org.junit.Assert.assertNotNull(clientList7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        boolean boolean13 = bookingManager0.confirmBooking("empty", "Jane", "disabled", "pass", (int) (byte) 0, "hi!", (int) 'a', "hi!", "");
        double double15 = bookingManager0.getHourlyRate("Jane");
        ParkingSystem.SpaceManager spaceManager16 = bookingManager0.getSpaceManager();
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int27 = booking26.getDuration();
        java.lang.String str28 = booking26.getClientId();
        booking26.setStartTime("hi!");
        boolean boolean31 = booking26.isCheckedIn();
        java.lang.String str32 = booking26.getLotId();
        boolean boolean33 = spaceManager16.assignBooking("", 52, booking26);
        spaceManager16.addParkingLot("h40rNQ7kR1");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 15.0d + "'", double15 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "staff" + "'", str28, "staff");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "jane" + "'", str32, "jane");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        boolean boolean18 = booking15.isCheckedIn();
        booking15.setDuration((int) (byte) 10);
        java.lang.String str21 = booking15.getStartTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Jane" + "'", str21, "Jane");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy8 = null;
        accountRegistry3.assignProxyToClient("", parkingSpaceProxy8);
        java.util.List<ParkingSystem.Client> clientList10 = accountRegistry3.displayPendingValidations();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy12.getRegistry();
        java.lang.String str16 = parkingSpaceProxy12.scanSpace("empty", "hi!");
        boolean boolean26 = parkingSpaceProxy12.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean30 = parkingSpaceProxy12.editBooking("pass", "2afd610d-a8cb-413a-bbee-7927f86b526c", (int) (byte) 100);
        accountRegistry3.assignProxyToManager("", parkingSpaceProxy12);
        boolean boolean33 = parkingSpaceProxy12.cancelBooking("Refunded without deposit ($-42.0)");
        boolean boolean35 = parkingSpaceProxy12.checkOut("CLT-f02c481e-1504-4abf-b598-76152da8586a");
        java.lang.Object obj38 = parkingSpaceProxy12.login("06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "ST001");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(clientList10);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.CheckInManager checkInManager18 = new ParkingSystem.CheckInManager(bookingManager0);
        checkInManager18.refundMessage = "jane";
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        ParkingSystem.User user2 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.validateClient("Jane");
        parkingSpaceProxy3.toggleSpace("", "staff", false);
        boolean boolean14 = parkingSpaceProxy3.cancelBooking("");
        user2.assignProxy(parkingSpaceProxy3);
        client0.assignProxy(parkingSpaceProxy3);
        java.lang.String str17 = client0.getClientId();
        ParkingSystem.Booking booking18 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "65) test0832(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str1, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky "34) test0832(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b" + "'", str17, "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b");
        org.junit.Assert.assertNull(booking18);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean3 = parkingSpaceProxy0.checkIn("");
        parkingSpaceProxy0.toggleLot("", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade7 = parkingSpaceProxy0.getFacade();
        ParkingSystem.Booking booking9 = parkingSpaceProxy0.getBookingDetails("3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean11 = parkingSpaceProxy0.checkIn("2afd610d-a8cb-413a-bbee-7927f86b526c");
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade7);
        org.junit.Assert.assertNull(booking9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        int int18 = booking15.getDuration();
        int int19 = booking15.getSpaceId();
        booking15.setStartTime("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        booking15.setDuration((int) 'a');
        boolean boolean24 = booking15.isCheckedIn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.getRegistry();
        java.lang.Object obj9 = accountRegistry6.login("Paid $ 100.0 with Mobile Pay", "qPYDfDnbtD");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry6.loadManagersFromCSV();
// flaky "66) test0835(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("staff", false);
        ParkingSystem.BookingManager bookingManager8 = parkingSpaceFacade0.getBookingManager();
        ParkingSystem.PaymentManager paymentManager9 = new ParkingSystem.PaymentManager();
        paymentManager9.refundMessage = "";
        boolean boolean13 = paymentManager9.refundTotalCost((double) (byte) 1);
        paymentManager9.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean18 = paymentManager9.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str19 = paymentManager9.paymentMessage;
        boolean boolean24 = paymentManager9.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Strategy strategy25 = null;
        paymentManager9.setStrategy(strategy25);
        java.lang.String str27 = paymentManager9.refundMessage;
        ParkingSystem.MobilePay mobilePay28 = new ParkingSystem.MobilePay();
        boolean boolean33 = mobilePay28.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str34 = mobilePay28.getPaymentMessage();
        java.lang.String str35 = mobilePay28.getPaymentMessage();
        boolean boolean40 = mobilePay28.processPayment("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 1.0d, "disabled", "Refunded without deposit ($0.0)");
        paymentManager9.setStrategy((ParkingSystem.Strategy) mobilePay28);
        bookingManager8.setPaymentStrategy((ParkingSystem.Strategy) mobilePay28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(bookingManager8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str19, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str27, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str34, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str35, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        cSVManager0.updateClientValidation("empty", false);
        java.util.List<java.lang.String[]> strArrayList5 = cSVManager0.readCSV("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList6 = cSVManager0.loadManagers();
// flaky "67) test0837(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList5);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        boolean boolean4 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) 10);
        parkingSpaceFacade0.toggleLot("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", true);
        boolean boolean11 = parkingSpaceFacade0.editBooking("CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "TXCrKOGD", (int) '#');
        ParkingSystem.Booking booking13 = parkingSpaceFacade0.getBookingDetails("Refunded without deposit ($-96.0)");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(booking13);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator3 = parkingLot1.getIterator();
        boolean boolean4 = parkingLotIterator3.hasNext();
        boolean boolean5 = parkingLotIterator3.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            ParkingSystem.ParkingSpace parkingSpace6 = parkingLotIterator3.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingLotIterator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        ParkingSystem.Manager manager7 = accountRegistry3.autoGenerateManager();
        java.util.List<ParkingSystem.Client> clientList8 = accountRegistry3.displayPendingValidations();
        ParkingSystem.Client client10 = accountRegistry3.getClient("jane");
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap11 = accountRegistry3.getManagers();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(manager7);
        org.junit.Assert.assertNotNull(clientList8);
        org.junit.Assert.assertNull(client10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.toggleSpace("Refunded without deposit ($0.0)", "disabled", false);
        spaceManager0.removeBooking("qPYDfDnbtD", (int) (byte) 1);
        boolean boolean16 = spaceManager0.isSpaceAvailable("Paid $ 15.0 with Mobile Pay", (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Card number should be 16 digits");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList5 = cSVManager0.loadManagers();
// flaky "68) test0842(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.CSVManager cSVManager14 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList16 = cSVManager14.readCSV("");
        java.util.List<java.lang.String[]> strArrayList18 = cSVManager14.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap19 = null;
        cSVManager14.loadParkingLots(strMap19);
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        cSVManager14.saveManager((ParkingSystem.Manager) superManager25);
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        spaceManager28.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = spaceManager28.getParkingLots();
        cSVManager14.loadParkingLots(strMap47);
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str55 = spaceManager49.scanSpace("disabled", "");
        spaceManager49.addParkingLot("hi!");
        java.lang.String str60 = spaceManager49.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap61 = spaceManager49.getParkingLots();
        cSVManager14.saveParkingLots(strMap61);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade63 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str66 = parkingSpaceFacade63.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager67 = parkingSpaceFacade63.getSpaceManager();
        spaceManager67.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap70 = spaceManager67.getParkingLots();
        cSVManager14.saveParkingLots(strMap70);
        cSVManager0.loadParkingLots(strMap70);
        ParkingSystem.Client client73 = ParkingSystem.Client.getInstance();
        java.lang.String str74 = client73.getClientType();
        java.lang.String str75 = client73.getName();
        cSVManager0.saveClient(client73);
        java.lang.String[] strArray77 = cSVManager0.loadSuperManager();
        java.util.List<java.lang.String[]> strArrayList79 = cSVManager0.readCSV("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList80 = cSVManager0.loadManagers();
// flaky "69) test0843(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertNotNull(spaceManager67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(client73);
// flaky "35) test0843(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Refunded total cost of $1.0" + "'", str74, "Refunded total cost of $1.0");
// flaky "26) test0843(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Card number should be 16 digits" + "'", str75, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(strArray77);
// flaky "15) test0843(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray77, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArrayList79);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj12 = parkingSpaceProxy9.login("empty", "Jane");
        parkingSpaceProxy9.validateClient("Jane");
        parkingSpaceProxy9.toggleSpace("", "staff", false);
        boolean boolean20 = parkingSpaceProxy9.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy9);
        boolean boolean27 = parkingSpaceProxy9.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean33 = parkingSpaceProxy9.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        ParkingSystem.Booking booking35 = parkingSpaceProxy9.getBookingDetails("hi!");
        boolean boolean37 = parkingSpaceProxy9.checkOut("ST001");
        boolean boolean41 = parkingSpaceProxy9.editBooking("disabled", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", (int) (byte) -1);
        parkingSpaceProxy9.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(booking35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        spaceManager0.toggleLot("disabled", false);
        java.lang.String str9 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str12 = spaceManager0.scanSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Card number should be 16 digits");
        ParkingSystem.Booking booking22 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double23 = booking22.getTotalCost();
        boolean boolean24 = spaceManager0.assignBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", 0, booking22);
        spaceManager0.toggleLot("empty", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "disabled" + "'", str9, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        boolean boolean13 = client0.checkIn();
        client0.setClientInfo("staff", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Paid $ 100.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", true);
        boolean boolean24 = client0.editBooking("Card number should be 16 digits", (int) 'a');
        java.lang.String str25 = client0.getUsername();
        boolean boolean26 = client0.checkOut();
        org.junit.Assert.assertNotNull(client0);
// flaky "70) test0846(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7" + "'", str25, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        boolean boolean5 = parkingSpaceFacade0.checkOut("disabled");
        ParkingSystem.SpaceManager spaceManager6 = parkingSpaceFacade0.getSpaceManager();
        spaceManager6.removeBooking("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", (int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(spaceManager6);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry19 = parkingSpaceProxy18.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj24 = parkingSpaceProxy21.login("empty", "Jane");
        parkingSpaceProxy21.validateClient("Jane");
        parkingSpaceProxy21.toggleSpace("", "staff", false);
        accountRegistry19.assignProxyToManager("pass", parkingSpaceProxy21);
        ParkingSystem.Client client33 = accountRegistry19.getClient("");
        ParkingSystem.SuperManager superManager34 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry19);
        ParkingSystem.AccountRegistry accountRegistry35 = superManager34.registry;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy37 = null;
        accountRegistry35.assignProxyToManager("jane", parkingSpaceProxy37);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy40 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj43 = parkingSpaceProxy40.login("empty", "Jane");
        boolean boolean46 = parkingSpaceProxy40.extendBooking("pass", 0);
        boolean boolean48 = parkingSpaceProxy40.checkOut("Paid $ 10.0 with Mobile Pay");
        accountRegistry35.assignProxyToClient("hi!", parkingSpaceProxy40);
        parkingSpaceProxy40.validateClient("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        parkingSpaceProxy40.toggleSpace("hi!", "Refunded total cost of $-1.0", false);
        superManager4.assignProxy(parkingSpaceProxy40);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TXCrKOGD" + "'", str5, "TXCrKOGD");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(client33);
        org.junit.Assert.assertNotNull(superManager34);
        org.junit.Assert.assertNotNull(accountRegistry35);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "Refunded total cost of $1.0", (int) '4', "09622cbf-e665-45db-b1ad-365065947a20", (int) (byte) 1, "Refunded total cost of $-1.0", (double) 100.0f);
        booking7.setCheckedIn(true);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.SpaceState spaceState11 = parkingSpace10.getState();
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking15 = null;
        boolean boolean16 = parkingLot13.assignBooking(0, booking15);
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot13.assignBooking(1, booking18);
        ParkingSystem.ParkingLot parkingLot22 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking24 = null;
        boolean boolean25 = parkingLot22.assignBooking(0, booking24);
        boolean boolean27 = parkingLot22.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking36 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean37 = parkingLot22.assignBooking((int) (short) -1, booking36);
        java.lang.String str38 = booking36.getLotId();
        boolean boolean39 = parkingLot13.assignBooking(0, booking36);
        boolean boolean40 = parkingSpace10.assignBooking(booking36);
        ParkingSystem.ParkingLot parkingLot42 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking44 = null;
        boolean boolean45 = parkingLot42.assignBooking(0, booking44);
        boolean boolean47 = parkingLot42.isSpaceAvailable((int) '#');
        boolean boolean48 = parkingLot42.isEnabled();
        boolean boolean50 = parkingLot42.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator51 = parkingLot42.getIterator();
        ParkingSystem.Booking booking60 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int61 = booking60.getDuration();
        java.lang.String str62 = booking60.getClientId();
        booking60.setStartTime("hi!");
        boolean boolean65 = booking60.isCheckedIn();
        java.lang.String str66 = booking60.getLotId();
        boolean boolean67 = parkingLot42.assignBooking((int) '#', booking60);
        double double68 = booking60.getTotalCost();
        boolean boolean69 = parkingSpace10.assignBooking(booking60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNotNull(spaceState11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "jane" + "'", str38, "jane");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "staff" + "'", str62, "staff");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "jane" + "'", str66, "jane");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.Manager manager5 = superManager4.autoGenerateManager();
        java.lang.String str6 = superManager4.getPassword();
        ParkingSystem.AccountRegistry accountRegistry7 = superManager4.registry;
        ParkingSystem.AccountRegistry accountRegistry8 = superManager4.registry;
        java.lang.Object obj11 = accountRegistry8.login("8ca2ec61-774c-409d-89d5-5b9171b40497", "9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(manager5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c" + "'", str6, "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertNotNull(accountRegistry8);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        java.lang.String str2 = client0.getClientId();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj6 = parkingSpaceProxy3.login("empty", "Jane");
        parkingSpaceProxy3.toggleSpace("jane", "Paid $ 10.0 with Mobile Pay", true);
        client0.assignProxy(parkingSpaceProxy3);
        boolean boolean13 = parkingSpaceProxy3.checkOut("4c45f11e-b09a-4d81-adf1-86cfd519dc3c");
        org.junit.Assert.assertNotNull(client0);
// flaky "71) test0852(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str1, "13b04414-31a5-407f-8ea3-fba4613c73d1");
// flaky "36) test0852(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8" + "'", str2, "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "ST001", (int) '#', "Card number should be 16 digits", (int) '4', "8ca2ec61-774c-409d-89d5-5b9171b40497", (double) (byte) 10);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean21 = client0.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        client0.setValidated(true);
        boolean boolean24 = client0.checkIn();
        org.junit.Assert.assertNotNull(client0);
// flaky "72) test0854(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        java.lang.String str14 = client0.getUsername();
        java.lang.String str15 = client0.getPassword();
        java.lang.String str16 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
// flaky "73) test0855(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8" + "'", str1, "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "disabled" + "'", str15, "disabled");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "disabled" + "'", str16, "disabled");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager12 = parkingSpaceFacade9.getBookingManager();
        ParkingSystem.AccountRegistry accountRegistry13 = bookingManager12.getAccountRegistry();
        ParkingSystem.SpaceManager spaceManager14 = bookingManager12.getSpaceManager();
        boolean boolean17 = spaceManager14.isSpaceAvailable("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", 2);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bookingManager12);
        org.junit.Assert.assertNotNull(accountRegistry13);
        org.junit.Assert.assertNotNull(spaceManager14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        boolean boolean4 = client0.editBooking("jane", (int) (short) 0);
        boolean boolean6 = client0.extendBooking(32);
        boolean boolean7 = client0.getIsValidated();
        client0.setValidated(true);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        java.util.List<ParkingSystem.Client> clientList14 = accountRegistry3.displayPendingValidations();
        ParkingSystem.AccountRegistry accountRegistry19 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager20 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry19);
        boolean boolean22 = accountRegistry19.requiresValidation("disabled");
        int int23 = accountRegistry19.getManagersSize();
        boolean boolean29 = accountRegistry19.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy31 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj34 = parkingSpaceProxy31.login("empty", "Jane");
        parkingSpaceProxy31.validateClient("Jane");
        parkingSpaceProxy31.toggleSpace("", "staff", false);
        boolean boolean42 = parkingSpaceProxy31.cancelBooking("Jane");
        accountRegistry19.assignProxyToClient("pass", parkingSpaceProxy31);
        parkingSpaceProxy31.autoGenerateManager();
        parkingSpaceProxy31.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade49 = parkingSpaceProxy31.getFacade();
        accountRegistry3.assignProxyToClient("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy31);
        parkingSpaceProxy31.toggleSpace("Refunded total cost of $100.0", "3b453211-7dd1-4452-8741-a206711c1217", false);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(clientList14);
        org.junit.Assert.assertNotNull(superManager20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade49);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.paymentMessage = "staff";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (short) 0);
        boolean boolean7 = paymentManager0.refundWithoutDeposit((double) (-1.0f), (double) (short) -1);
        paymentManager0.paymentMessage = "83a51dc6-0c8f-4f21-ae40-68699828f95d";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        int int9 = booking7.getDuration();
        int int10 = booking7.getDuration();
        double double11 = booking7.getTotalCost();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        boolean boolean13 = accountRegistry6.requiresValidation("CLT-035180a0-4707-410d-a011-2a4f0f46838b");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking17 = parkingSpaceProxy15.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry18 = parkingSpaceProxy15.getRegistry();
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("staff", "Jane", false);
        parkingSpaceProxy15.displayPendingValidations();
        accountRegistry6.assignProxyToClient("8ca2ec61-774c-409d-89d5-5b9171b40497", parkingSpaceProxy15);
        ParkingSystem.Booking booking27 = parkingSpaceProxy15.getBookingDetails("CLT-4fb51645-0cbc-48a2-9b9c-17fc2991039d");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(booking17);
        org.junit.Assert.assertNotNull(accountRegistry18);
        org.junit.Assert.assertNull(booking27);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        paymentManager0.paymentMessage = "Refunded total cost of $0.0";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking(0);
        ParkingSystem.ParkingLot parkingLot12 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking14 = null;
        boolean boolean15 = parkingLot12.assignBooking(0, booking14);
        boolean boolean17 = parkingLot12.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean27 = parkingLot12.assignBooking((int) (short) -1, booking26);
        java.lang.String str28 = booking26.getLotId();
        java.lang.String str29 = booking26.getLicensePlate();
        boolean boolean30 = parkingLot1.assignBooking((int) (short) -1, booking26);
        ParkingSystem.ParkingLotIterator parkingLotIterator31 = parkingLot1.getIterator();
        ParkingSystem.ParkingLot parkingLot34 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking36 = null;
        boolean boolean37 = parkingLot34.assignBooking(0, booking36);
        boolean boolean39 = parkingLot34.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking48 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean49 = parkingLot34.assignBooking((int) (short) -1, booking48);
        java.lang.String str50 = booking48.getLotId();
        int int51 = booking48.getDuration();
        int int52 = booking48.getSpaceId();
        booking48.setStartTime("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        booking48.setDuration((int) 'a');
        boolean boolean57 = parkingLot1.assignBooking((int) (short) 1, booking48);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime58 = booking48.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'CLT-84172690-12e5-43e4-8a26-14753ff3c6e3' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "jane" + "'", str28, "jane");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "disabled" + "'", str29, "disabled");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "jane" + "'", str50, "jane");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        ParkingSystem.ParkingLot parkingLot10 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking12 = null;
        boolean boolean13 = parkingLot10.assignBooking(0, booking12);
        boolean boolean15 = parkingLot10.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean25 = parkingLot10.assignBooking((int) (short) -1, booking24);
        java.lang.String str26 = booking24.getLotId();
        boolean boolean27 = parkingLot1.assignBooking(0, booking24);
        ParkingSystem.ParkingLotIterator parkingLotIterator28 = parkingLot1.getIterator();
        // The following exception was thrown during execution in test generation
        try {
            parkingLotIterator28.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "jane" + "'", str26, "jane");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator28);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean16 = debitOrCredit6.validateCard("pass", (double) 100.0f);
        boolean boolean21 = debitOrCredit6.processPayment("", (double) 1, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "Refunded without deposit ($-42.0)");
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        boolean boolean11 = parkingLot6.isSpaceAvailable((int) '#');
        boolean boolean13 = parkingLot6.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace15 = parkingLot6.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking16 = parkingSpace15.getCurrentBooking();
        parkingSpace15.removeBooking();
        int int18 = parkingSpace15.getSpaceId();
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        boolean boolean27 = parkingSpace15.assignBooking(booking26);
        boolean boolean28 = parkingSpace4.assignBooking(booking26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime29 = booking26.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Paid $ 10.0 with Mobile Pay' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parkingSpace15);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setValidated(false);
        ParkingSystem.AccountRegistry accountRegistry7 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager8 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry7);
        java.lang.String str9 = superManager8.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = null;
        accountRegistry13.assignProxyToManager("disabled", parkingSpaceProxy16);
        superManager8.registry = accountRegistry13;
        ParkingSystem.AccountRegistry accountRegistry19 = superManager8.getRegistry();
        ParkingSystem.Manager manager20 = accountRegistry19.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy22 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy22.getRegistry();
        boolean boolean29 = parkingSpaceProxy22.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy22.toggleLot("hi!", false);
        accountRegistry19.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy22);
        parkingSpaceProxy22.toggleLot("disabled", false);
        client0.assignProxy(parkingSpaceProxy22);
        java.lang.String str38 = client0.getName();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(superManager8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TXCrKOGD" + "'", str9, "TXCrKOGD");
        org.junit.Assert.assertNotNull(superManager14);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(manager20);
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "empty" + "'", str38, "empty");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str3 = parkingSpaceFacade0.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Refunded total cost of $1.0", false);
        ParkingSystem.SpaceManager spaceManager8 = parkingSpaceFacade0.getSpaceManager();
        parkingSpaceFacade0.toggleLot("Paid $ 100.0 with Mobile Pay", false);
        boolean boolean21 = parkingSpaceFacade0.confirmBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "4a1f2343-8b2e-4dea-ba69-efd105414390", "06b0adae-5a80-41cd-b7f6-6da51afdd4f5", "", (int) (byte) 1, "pass", (int) (byte) 10, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "Paid $ 100.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager22 = parkingSpaceFacade0.getBookingManager();
        double double25 = bookingManager22.calculateCost("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", 32);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "disabled" + "'", str3, "disabled");
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bookingManager22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 495.0d + "'", double25 == 495.0d);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap3 = bookingManager0.getActiveBookings();
        double double6 = bookingManager0.calculateCost("CLT-035180a0-4707-410d-a011-2a4f0f46838b", (int) (short) 0);
        double double8 = bookingManager0.getHourlyRate("09622cbf-e665-45db-b1ad-365065947a20");
        boolean boolean12 = bookingManager0.editBooking("02659ad3-0b5c-4c48-a915-a466f2b50775", "Refunded total cost of $-1.0", 52);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.0d + "'", double6 == 15.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 15.0d + "'", double8 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        boolean boolean21 = parkingSpaceProxy9.editBooking("empty", "Refunded without deposit ($0.0)", 100);
        parkingSpaceProxy9.autoGenerateManager();
        boolean boolean24 = parkingSpaceProxy9.checkOut("4a1f2343-8b2e-4dea-ba69-efd105414390");
        boolean boolean28 = parkingSpaceProxy9.editBooking("433f3d1f-f758-4ae3-972b-7fb179aedfd7", "Jane", 1);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        boolean boolean2 = parkingSpaceProxy0.cancelBooking("pass");
        parkingSpaceProxy0.addParkingLot("pass");
        boolean boolean6 = parkingSpaceProxy0.checkIn("Paid $ 100.0 with Mobile Pay");
        boolean boolean12 = parkingSpaceProxy0.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Refunded without deposit ($-42.0)", "Paid $ 0.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled");
        ParkingSystem.AccountRegistry accountRegistry13 = parkingSpaceProxy0.getRegistry();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry13.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry13);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str6 = spaceManager0.scanSpace("disabled", "");
        spaceManager0.addParkingLot("hi!");
        java.lang.String str11 = spaceManager0.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        spaceManager0.addParkingLot("Refunded total cost of $1.0");
        spaceManager0.addParkingLot("hi!");
        ParkingSystem.ParkingLot parkingLot19 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking21 = null;
        boolean boolean22 = parkingLot19.assignBooking(0, booking21);
        boolean boolean24 = parkingLot19.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator25 = parkingLot19.getIterator();
        boolean boolean26 = parkingLotIterator25.hasNext();
        ParkingSystem.ParkingSpace parkingSpace27 = parkingLotIterator25.next();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        ParkingSystem.SpaceManager spaceManager48 = new ParkingSystem.SpaceManager();
        boolean boolean51 = spaceManager48.isSpaceAvailable("hi!", (int) '#');
        spaceManager48.toggleLot("disabled", false);
        ParkingSystem.Booking booking64 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean65 = spaceManager48.assignBooking("empty", (int) (short) 0, booking64);
        boolean boolean66 = spaceManager28.assignBooking("disabled", (int) (byte) 0, booking64);
        boolean boolean67 = parkingSpace27.assignBooking(booking64);
        int int68 = booking64.getSpaceId();
        boolean boolean69 = spaceManager0.assignBooking("empty", (int) (byte) 1, booking64);
        booking64.setCheckedIn(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpace27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry6 = superManager4.registry;
        java.lang.String str7 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry11 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry11);
        superManager4.registry = accountRegistry11;
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry11.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TXCrKOGD" + "'", str5, "TXCrKOGD");
        org.junit.Assert.assertNotNull(accountRegistry6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TXCrKOGD" + "'", str7, "TXCrKOGD");
        org.junit.Assert.assertNotNull(superManager12);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        boolean boolean7 = parkingSpaceProxy0.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean11 = parkingSpaceProxy0.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        parkingSpaceProxy0.toggleLot("Paid $ -1.0 with Mobile Pay", false);
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy0.getRegistry();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(accountRegistry15);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) ' ');
        parkingLot1.setEnabled(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkOut("ST001");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Manager manager11 = accountRegistry8.autoGenerateManager();
        ParkingSystem.Client client13 = accountRegistry8.getClient("TXCrKOGD");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNotNull(manager11);
        org.junit.Assert.assertNull(client13);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        ParkingSystem.AccountRegistry accountRegistry23 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager24 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry23);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = null;
        accountRegistry23.assignProxyToManager("disabled", parkingSpaceProxy26);
        boolean boolean29 = accountRegistry23.requiresValidation("disabled");
        int int30 = accountRegistry23.getManagersSize();
        superManager19.registry = accountRegistry23;
        java.lang.String str32 = superManager19.getPassword();
        superManager19.displayPendingValidations();
        java.lang.String str34 = superManager19.getName();
        superManager19.displayPendingValidations();
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(superManager24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c" + "'", str32, "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "86z9Z9e0MN" + "'", str34, "86z9Z9e0MN");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        boolean boolean18 = booking15.isCheckedIn();
        booking15.setDuration((int) (byte) 10);
        java.lang.String str21 = booking15.getClientId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "staff" + "'", str21, "staff");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        java.lang.Object obj13 = accountRegistry6.login("empty", "Refunded total cost of $1.0");
        boolean boolean15 = accountRegistry6.requiresValidation("Refunded total cost of $1.0");
        ParkingSystem.SuperManager superManager16 = ParkingSystem.SuperManager.createFromCSV("Paid $ 0.0 with Mobile Pay", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "Paid $ 15.0 with Mobile Pay", accountRegistry6);
        accountRegistry6.validateClient("09622cbf-e665-45db-b1ad-365065947a20");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(superManager16);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        java.lang.String str13 = parkingSpace10.scanSpace();
        int int14 = parkingSpace10.getSpaceId();
        ParkingSystem.SpaceManager spaceManager15 = new ParkingSystem.SpaceManager();
        boolean boolean18 = spaceManager15.isSpaceAvailable("hi!", (int) '#');
        spaceManager15.toggleLot("disabled", false);
        ParkingSystem.Booking booking31 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean32 = spaceManager15.assignBooking("empty", (int) (short) 0, booking31);
        java.lang.String str33 = booking31.getClientId();
        boolean boolean34 = parkingSpace10.assignBooking(booking31);
        int int35 = booking31.getDuration();
        booking31.setCheckedIn(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "empty" + "'", str13, "empty");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "staff" + "'", str33, "staff");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.lang.String[] strArray1 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray2 = cSVManager0.loadSuperManager();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade3 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade3.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = spaceManager4.getParkingLots();
        cSVManager0.saveParkingLots(strMap5);
        ParkingSystem.CSVManager cSVManager7 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList9 = cSVManager7.readCSV("");
        java.util.List<java.lang.String[]> strArrayList11 = cSVManager7.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap12 = null;
        cSVManager7.loadParkingLots(strMap12);
        ParkingSystem.AccountRegistry accountRegistry17 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager18 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry17);
        ParkingSystem.Manager manager19 = superManager18.autoGenerateManager();
        cSVManager7.saveManager((ParkingSystem.Manager) superManager18);
        ParkingSystem.SpaceManager spaceManager21 = new ParkingSystem.SpaceManager();
        boolean boolean24 = spaceManager21.isSpaceAvailable("hi!", (int) '#');
        spaceManager21.toggleLot("disabled", false);
        ParkingSystem.Booking booking37 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean38 = spaceManager21.assignBooking("empty", (int) (short) 0, booking37);
        spaceManager21.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap40 = spaceManager21.getParkingLots();
        cSVManager7.loadParkingLots(strMap40);
        cSVManager0.loadParkingLots(strMap40);
        // The following exception was thrown during execution in test generation
        try {
            cSVManager0.updateClientValidation("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
// flaky "74) test0882(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray2);
// flaky "37) test0882(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray2, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(superManager18);
        org.junit.Assert.assertNotNull(manager19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int8 = booking7.getDuration();
        java.lang.String str9 = booking7.getClientId();
        booking7.setStartTime("hi!");
        booking7.setCheckedIn(true);
        boolean boolean14 = booking7.isCheckedIn();
        int int15 = booking7.getSpaceId();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "staff" + "'", str9, "staff");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.Booking booking3 = parkingSpaceFacade0.getBookingDetails("Paid $ 100.0 with Mobile Pay");
        ParkingSystem.BookingManager bookingManager4 = parkingSpaceFacade0.getBookingManager();
        ParkingSystem.BookingManager bookingManager5 = parkingSpaceFacade0.getBookingManager();
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(bookingManager4);
        org.junit.Assert.assertNotNull(bookingManager5);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (short) 10);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking((int) (short) -1, booking6);
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap21 = bookingManager0.getActiveBookings();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", (int) ' ', "Refunded total cost of $-1.0", (int) 'a', "staff", (double) (byte) 10);
        java.lang.String str8 = booking7.getClientId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "25527a32-01ef-45ba-816a-1d0a2fc2a52d" + "'", str8, "25527a32-01ef-45ba-816a-1d0a2fc2a52d");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap6 = null;
        cSVManager0.loadParkingLots(strMap6);
        ParkingSystem.Client client8 = ParkingSystem.Client.getInstance();
        java.lang.String str9 = client8.getClientType();
        cSVManager0.saveClient(client8);
        java.lang.String[] strArray11 = cSVManager0.loadSuperManager();
        java.util.List<java.lang.String[]> strArrayList13 = cSVManager0.readCSV("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList14 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(client8);
// flaky "75) test0888(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Refunded total cost of $1.0" + "'", str9, "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(strArray11);
// flaky "38) test0888(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArrayList13);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        java.lang.String str61 = parkingSpace58.scanSpace();
        int int62 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace58.getCurrentBooking();
        java.lang.String str64 = enabled0.scanSpace(parkingSpace58);
        ParkingSystem.SpaceState spaceState65 = parkingSpace58.getState();
        ParkingSystem.Booking booking66 = parkingSpace58.getCurrentBooking();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "empty" + "'", str61, "empty");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "empty" + "'", str64, "empty");
        org.junit.Assert.assertNotNull(spaceState65);
        org.junit.Assert.assertNull(booking66);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.toggleLot("Jane", false);
        spaceManager0.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager9 = new ParkingSystem.SpaceManager();
        boolean boolean12 = spaceManager9.isSpaceAvailable("hi!", (int) '#');
        spaceManager9.toggleLot("disabled", false);
        ParkingSystem.Booking booking25 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean26 = spaceManager9.assignBooking("empty", (int) (short) 0, booking25);
        boolean boolean27 = spaceManager0.assignBooking("hi!", 0, booking25);
        double double28 = booking25.getTotalCost();
        booking25.setDuration((-1));
        java.lang.String str31 = booking25.getLotId();
        booking25.setStartTime("");
        java.lang.String str34 = booking25.getLotId();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "jane" + "'", str34, "jane");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean10 = accountRegistry3.registerClient("0b35479f-5869-423e-9abc-e4ab9cef903d", "Refunded total cost of $100.0", "staff", "hi!", "Paid $ 0.0 with Mobile Pay");
        java.lang.Object obj13 = accountRegistry3.login("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "Jane");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        java.lang.String str6 = spaceManager0.scanSpace("hi!", "disabled");
        spaceManager0.toggleLot("Paid $ 15.0 with Mobile Pay", false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "disabled" + "'", str6, "disabled");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        boolean boolean18 = bookingManager0.cancelBooking("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        ParkingSystem.AccountRegistry accountRegistry19 = bookingManager0.getAccountRegistry();
        ParkingSystem.AccountRegistry accountRegistry20 = bookingManager0.getAccountRegistry();
        ParkingSystem.Client client22 = accountRegistry20.getClient("ST001");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(accountRegistry19);
        org.junit.Assert.assertNotNull(accountRegistry20);
        org.junit.Assert.assertNull(client22);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean21 = debitOrCredit6.validateCard("Jane", (double) '4');
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        boolean boolean27 = debitOrCredit6.processPayment("Refunded without deposit ($-42.0)", (double) 1.0f, "Paid $ -1.0 with Mobile Pay", "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator3 = parkingLot2.getIterator();
        ParkingSystem.ParkingSpace parkingSpace5 = parkingLot2.getParkingSpace((int) (byte) -1);
        java.lang.String str6 = enabled0.scanSpace(parkingSpace5);
        boolean boolean7 = parkingSpace5.isAvailable();
        org.junit.Assert.assertNotNull(parkingLotIterator3);
        org.junit.Assert.assertNotNull(parkingSpace5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "empty" + "'", str6, "empty");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        client0.setClientInfo("pass", "empty", "Jane", "pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", false);
        boolean boolean22 = client0.editBooking("jane", 0);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking25 = parkingSpaceProxy23.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        client0.assignProxy(parkingSpaceProxy23);
        ParkingSystem.Booking booking27 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
// flaky "76) test0896(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "empty" + "'", str1, "empty");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky "39) test0896(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jane" + "'", str10, "jane");
// flaky "27) test0896(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(booking25);
        org.junit.Assert.assertNull(booking27);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        parkingSpaceProxy15.toggleSpace("", "staff", false);
        boolean boolean26 = parkingSpaceProxy15.cancelBooking("Jane");
        accountRegistry3.assignProxyToClient("pass", parkingSpaceProxy15);
        parkingSpaceProxy15.autoGenerateManager();
        parkingSpaceProxy15.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy15.getFacade();
        boolean boolean35 = parkingSpaceFacade33.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean37 = parkingSpaceFacade33.cancelBooking("Jane");
        boolean boolean40 = parkingSpaceFacade33.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager41 = parkingSpaceFacade33.getSpaceManager();
        boolean boolean51 = parkingSpaceFacade33.confirmBooking("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", (int) '#', "Paid $ -1.0 with Mobile Pay", (int) (short) -1, "CLT-d45cbb33-f273-4b7c-a70f-0ed3be87451f", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        boolean boolean53 = parkingSpaceFacade33.checkOut("Paid $ 10.0 with Mobile Pay");
        parkingSpaceFacade33.toggleSpace("Refunded without deposit ($-96.0)", "CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", true);
        ParkingSystem.BookingManager bookingManager58 = parkingSpaceFacade33.getBookingManager();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(spaceManager41);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bookingManager58);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        java.lang.String str12 = superManager11.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager11.getRegistry();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        superManager11.setManagerInfo("", "25527a32-01ef-45ba-816a-1d0a2fc2a52d", "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c");
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "77) test0898(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TXCrKOGD" + "'", str12, "TXCrKOGD");
        org.junit.Assert.assertNotNull(accountRegistry13);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        java.lang.String str13 = client0.getName();
        boolean boolean14 = client0.getIsValidated();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        boolean boolean6 = accountRegistry3.requiresValidation("disabled");
        int int7 = accountRegistry3.getManagersSize();
        boolean boolean13 = accountRegistry3.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        java.util.List<ParkingSystem.Client> clientList14 = accountRegistry3.displayPendingValidations();
        ParkingSystem.User user16 = new ParkingSystem.User();
        java.lang.Object obj17 = user16.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = user16.parkingProxy;
        ParkingSystem.User user19 = new ParkingSystem.User();
        java.lang.Object obj20 = user19.user;
        ParkingSystem.Client client21 = ParkingSystem.Client.getInstance();
        java.lang.String str22 = client21.getName();
        client21.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry26 = parkingSpaceProxy25.getRegistry();
        boolean boolean28 = parkingSpaceProxy25.checkIn("");
        client21.assignProxy(parkingSpaceProxy25);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade30 = parkingSpaceProxy25.getFacade();
        user19.assignProxy(parkingSpaceProxy25);
        user16.parkingProxy = parkingSpaceProxy25;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade33 = parkingSpaceProxy25.getFacade();
        boolean boolean37 = parkingSpaceProxy25.editBooking("empty", "Refunded without deposit ($0.0)", 100);
        parkingSpaceProxy25.autoGenerateManager();
        boolean boolean40 = parkingSpaceProxy25.checkOut("4a1f2343-8b2e-4dea-ba69-efd105414390");
        java.lang.String str43 = parkingSpaceProxy25.scanSpace("Paid $ 0.0 with Mobile Pay", "pass");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade44 = parkingSpaceProxy25.getFacade();
        java.lang.Object obj47 = parkingSpaceProxy25.login("CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "83a51dc6-0c8f-4f21-ae40-68699828f95d");
        accountRegistry3.assignProxyToManager("8ca2ec61-774c-409d-89d5-5b9171b40497", parkingSpaceProxy25);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(clientList14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(parkingSpaceProxy18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(client21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "jane" + "'", str22, "jane");
        org.junit.Assert.assertNotNull(accountRegistry26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade30);
        org.junit.Assert.assertNotNull(parkingSpaceFacade33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "disabled" + "'", str43, "disabled");
        org.junit.Assert.assertNotNull(parkingSpaceFacade44);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        java.lang.Object obj16 = parkingSpaceProxy1.login("disabled", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean18 = parkingSpaceProxy1.checkIn("hi!");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean4 = paymentManager0.refundWithoutDeposit((double) (short) 10, (double) '4');
        java.lang.String str5 = paymentManager0.refundMessage;
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        boolean boolean11 = mobilePay6.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str12 = mobilePay6.getPaymentMessage();
        boolean boolean17 = mobilePay6.processPayment("Jane", (double) 10L, "jane", "Paid $ 10.0 with Mobile Pay");
        java.lang.String str18 = mobilePay6.getPaymentMessage();
        java.lang.String str19 = mobilePay6.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay6);
        java.lang.String str21 = mobilePay6.getPaymentMessage();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Refunded without deposit ($-42.0)" + "'", str5, "Refunded without deposit ($-42.0)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str12, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str18, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str19, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str21, "Paid $ 10.0 with Mobile Pay");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean6 = bookingManager0.extendBooking("jane", (int) (byte) 100, "hi!", "jane");
        ParkingSystem.SpaceManager spaceManager7 = bookingManager0.getSpaceManager();
        boolean boolean12 = bookingManager0.extendBooking("Refunded without deposit ($0.0)", (int) (byte) 1, "hi!", "pass");
        boolean boolean17 = bookingManager0.extendBooking("Refunded without deposit ($-42.0)", 0, "Refunded total cost of $1.0", "Jane");
        ParkingSystem.CheckInManager checkInManager18 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean20 = bookingManager0.cancelBooking("Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(spaceManager7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setClientInfo("Jane", "", "pass", "pass", "pass", "hi!", true);
        java.lang.String str10 = client0.getClientId();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jane" + "'", str10, "Jane");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        accountRegistry8.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.Manager manager15 = accountRegistry8.autoGenerateManager();
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry8.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertNotNull(manager15);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getUsername();
        client0.setClientInfo("Jane", "", "pass", "pass", "pass", "hi!", true);
        client0.setValidated(true);
        org.junit.Assert.assertNotNull(client0);
// flaky "78) test0906(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        java.lang.String str14 = superManager13.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = null;
        accountRegistry18.assignProxyToManager("disabled", parkingSpaceProxy21);
        superManager13.registry = accountRegistry18;
        ParkingSystem.AccountRegistry accountRegistry24 = superManager13.getRegistry();
        ParkingSystem.Manager manager25 = accountRegistry24.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean34 = parkingSpaceProxy27.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy27.toggleLot("hi!", false);
        accountRegistry24.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        accountRegistry3.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        parkingSpaceProxy27.displayPendingValidations();
        boolean boolean42 = parkingSpaceProxy27.cancelBooking("Refunded total cost of $-1.0");
        boolean boolean44 = parkingSpaceProxy27.checkIn("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade45 = parkingSpaceProxy27.getFacade();
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(manager25);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade45);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry11 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry11);
        superManager7.registry = accountRegistry11;
        ParkingSystem.Client client15 = accountRegistry11.getClient("empty");
        accountRegistry11.validateClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        java.lang.Object obj20 = accountRegistry11.login("ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        accountRegistry11.validateClient("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.SuperManager superManager23 = ParkingSystem.SuperManager.createFromCSV("Jane", "Paid $ -1.0 with Mobile Pay", "pass", accountRegistry11);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap24 = accountRegistry11.getManagers();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertNull(client15);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(superManager23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager2 = parkingSpaceFacade0.getSpaceManager();
        boolean boolean5 = spaceManager2.isSpaceAvailable("hi!", (int) (short) -1);
        spaceManager2.toggleSpace("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786", "h40rNQ7kR1", true);
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        ParkingSystem.MobilePay mobilePay4 = new ParkingSystem.MobilePay();
        boolean boolean9 = mobilePay4.processPayment("hi!", (-1.0d), "", "");
        boolean boolean14 = mobilePay4.processPayment("staff", (double) (-1L), "disabled", "pass");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay4);
        java.lang.String str16 = paymentManager0.paymentMessage;
        boolean boolean18 = paymentManager0.refundTotalCost(100.0d);
        java.lang.String str19 = paymentManager0.paymentMessage;
        ParkingSystem.BookingManager bookingManager20 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager21 = new ParkingSystem.CheckInManager(bookingManager20);
        ParkingSystem.SpaceManager spaceManager22 = bookingManager20.getSpaceManager();
        double double25 = bookingManager20.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit26 = new ParkingSystem.DebitOrCredit();
        bookingManager20.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit26);
        boolean boolean32 = debitOrCredit26.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        java.lang.String str33 = debitOrCredit26.getPaymentMessage();
        java.lang.String str34 = debitOrCredit26.getPaymentMessage();
        java.lang.String str35 = debitOrCredit26.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit26);
        boolean boolean41 = debitOrCredit26.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1L), "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", "Refunded total cost of $0.0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(spaceManager22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 165.0d + "'", double25 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Card number should be 16 digits" + "'", str33, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Card number should be 16 digits" + "'", str34, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Card number should be 16 digits" + "'", str35, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking15 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean16 = parkingLot1.assignBooking((int) (short) -1, booking15);
        java.lang.String str17 = booking15.getLotId();
        int int18 = booking15.getDuration();
        int int19 = booking15.getSpaceId();
        booking15.setStartTime("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        booking15.setDuration((int) 'a');
        booking15.setStartTime("disabled");
        booking15.setCheckedIn(true);
        int int28 = booking15.getSpaceId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "jane" + "'", str17, "jane");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean3 = parkingSpaceFacade0.extendBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (byte) -1);
        ParkingSystem.SpaceManager spaceManager4 = parkingSpaceFacade0.getSpaceManager();
        java.lang.String str7 = parkingSpaceFacade0.scanSpace("jane", "Refunded without deposit ($0.0)");
        java.lang.String str10 = parkingSpaceFacade0.scanSpace("Jane", "");
        ParkingSystem.Booking booking12 = parkingSpaceFacade0.getBookingDetails("4a1f2343-8b2e-4dea-ba69-efd105414390");
        ParkingSystem.CheckInManager checkInManager13 = parkingSpaceFacade0.getCheckInManager();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "disabled" + "'", str7, "disabled");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "disabled" + "'", str10, "disabled");
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertNotNull(checkInManager13);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        boolean boolean25 = accountRegistry4.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        java.lang.Object obj28 = accountRegistry4.login("Paid $ 100.0 with Mobile Pay", "staff");
        ParkingSystem.User user30 = new ParkingSystem.User();
        java.lang.Object obj31 = user30.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        java.lang.String str40 = parkingSpaceProxy32.scanSpace("", "");
        parkingSpaceProxy32.toggleSpace("", "disabled", true);
        user30.parkingProxy = parkingSpaceProxy32;
        ParkingSystem.ParkingLot parkingLot47 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator48 = parkingLot47.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator49 = parkingLot47.getIterator();
        user30.user = parkingLot47;
        ParkingSystem.User user51 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy52 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj55 = parkingSpaceProxy52.login("empty", "Jane");
        parkingSpaceProxy52.validateClient("Jane");
        parkingSpaceProxy52.toggleSpace("", "staff", false);
        boolean boolean63 = parkingSpaceProxy52.cancelBooking("");
        user51.assignProxy(parkingSpaceProxy52);
        user30.user = parkingSpaceProxy52;
        ParkingSystem.User user66 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy67 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj70 = parkingSpaceProxy67.login("empty", "Jane");
        parkingSpaceProxy67.validateClient("Jane");
        parkingSpaceProxy67.toggleSpace("", "staff", false);
        boolean boolean78 = parkingSpaceProxy67.cancelBooking("");
        user66.assignProxy(parkingSpaceProxy67);
        parkingSpaceProxy67.displayPendingValidations();
        user30.parkingProxy = parkingSpaceProxy67;
        accountRegistry4.assignProxyToClient("pass", parkingSpaceProxy67);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry4.loadManagersFromCSV();
// flaky "79) test0913(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "disabled" + "'", str40, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator48);
        org.junit.Assert.assertNotNull(parkingLotIterator49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        boolean boolean5 = bookingManager0.extendBooking("jane", (int) (short) -1, "", "Paid $ 10.0 with Mobile Pay");
        double double7 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.CheckInManager checkInManager8 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean10 = checkInManager8.checkOut("Refunded without deposit ($-42.0)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 15.0d + "'", double7 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade1 = parkingSpaceProxy0.getFacade();
        ParkingSystem.CheckInManager checkInManager2 = parkingSpaceFacade1.getCheckInManager();
        boolean boolean4 = checkInManager2.checkIn("Paid $ -1.0 with Mobile Pay");
        boolean boolean6 = checkInManager2.checkIn("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        org.junit.Assert.assertNotNull(parkingSpaceFacade1);
        org.junit.Assert.assertNotNull(checkInManager2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        boolean boolean6 = parkingSpaceProxy0.extendBooking("pass", 0);
        boolean boolean8 = parkingSpaceProxy0.checkOut("Paid $ 10.0 with Mobile Pay");
        boolean boolean14 = parkingSpaceProxy0.register("Paid $ 1470.0 with Mobile Pay", "CLT-5e15ad0b-2221-4ef9-a477-c00f6c4e54d8", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "TXCrKOGD");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        parkingSpaceFacade0.addParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        ParkingSystem.CheckInManager checkInManager4 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.BookingManager bookingManager5 = parkingSpaceFacade0.getBookingManager();
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(checkInManager4);
        org.junit.Assert.assertNotNull(bookingManager5);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        int int11 = parkingSpace10.getSpaceId();
        ParkingSystem.Booking booking12 = parkingSpace10.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager13 = new ParkingSystem.SpaceManager();
        boolean boolean16 = spaceManager13.isSpaceAvailable("hi!", (int) '#');
        spaceManager13.toggleLot("disabled", false);
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = spaceManager13.assignBooking("empty", (int) (short) 0, booking29);
        boolean boolean31 = parkingSpace10.assignBooking(booking29);
        booking29.setDuration(10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        java.lang.Object obj15 = accountRegistry12.login("disabled", "pass");
        ParkingSystem.AccountRegistry accountRegistry20 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager21 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry20);
        boolean boolean23 = accountRegistry20.requiresValidation("disabled");
        int int24 = accountRegistry20.getManagersSize();
        boolean boolean30 = accountRegistry20.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        parkingSpaceProxy32.validateClient("Jane");
        parkingSpaceProxy32.toggleSpace("", "staff", false);
        boolean boolean43 = parkingSpaceProxy32.cancelBooking("Jane");
        accountRegistry20.assignProxyToClient("pass", parkingSpaceProxy32);
        parkingSpaceProxy32.toggleSpace("empty", "Paid $ 10.0 with Mobile Pay", false);
        accountRegistry12.assignProxyToClient("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", parkingSpaceProxy32);
        boolean boolean55 = accountRegistry12.registerClient("89de8237-29df-4908-9de4-6dc1ce90de94", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", "Paid $ 10.0 with Mobile Pay", "02659ad3-0b5c-4c48-a915-a466f2b50775", "pass");
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(superManager21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        ParkingSystem.Manager manager12 = superManager11.autoGenerateManager();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        ParkingSystem.CSVManager cSVManager14 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList16 = cSVManager14.readCSV("");
        java.util.List<java.lang.String[]> strArrayList18 = cSVManager14.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap19 = null;
        cSVManager14.loadParkingLots(strMap19);
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.Manager manager26 = superManager25.autoGenerateManager();
        cSVManager14.saveManager((ParkingSystem.Manager) superManager25);
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        spaceManager28.loadParkingLots();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap47 = spaceManager28.getParkingLots();
        cSVManager14.loadParkingLots(strMap47);
        ParkingSystem.SpaceManager spaceManager49 = new ParkingSystem.SpaceManager();
        boolean boolean52 = spaceManager49.isSpaceAvailable("hi!", (int) '#');
        java.lang.String str55 = spaceManager49.scanSpace("disabled", "");
        spaceManager49.addParkingLot("hi!");
        java.lang.String str60 = spaceManager49.scanSpace("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap61 = spaceManager49.getParkingLots();
        cSVManager14.saveParkingLots(strMap61);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade63 = new ParkingSystem.ParkingSpaceFacade();
        java.lang.String str66 = parkingSpaceFacade63.scanSpace("disabled", "empty");
        ParkingSystem.SpaceManager spaceManager67 = parkingSpaceFacade63.getSpaceManager();
        spaceManager67.addParkingLot("hi!");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap70 = spaceManager67.getParkingLots();
        cSVManager14.saveParkingLots(strMap70);
        cSVManager0.loadParkingLots(strMap70);
        ParkingSystem.Client client73 = ParkingSystem.Client.getInstance();
        java.lang.String str74 = client73.getClientType();
        java.lang.String str75 = client73.getName();
        cSVManager0.saveClient(client73);
        ParkingSystem.AccountRegistry accountRegistry80 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager81 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry80);
        java.lang.String str82 = superManager81.getManagerId();
        java.lang.String str83 = superManager81.getManagerId();
        ParkingSystem.Manager manager84 = superManager81.autoGenerateManager();
        manager84.setManagerInfo("pass", "", "staff");
        cSVManager0.saveManager(manager84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Manager> managerList90 = cSVManager0.loadManagers();
// flaky "80) test0920(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(manager12);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(manager26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "disabled" + "'", str55, "disabled");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "disabled" + "'", str60, "disabled");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "disabled" + "'", str66, "disabled");
        org.junit.Assert.assertNotNull(spaceManager67);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(client73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "02659ad3-0b5c-4c48-a915-a466f2b50775" + "'", str74, "02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "89de8237-29df-4908-9de4-6dc1ce90de94" + "'", str75, "89de8237-29df-4908-9de4-6dc1ce90de94");
        org.junit.Assert.assertNotNull(superManager81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(manager84);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        java.lang.String str4 = client0.getExtraId();
        ParkingSystem.Booking booking5 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "89de8237-29df-4908-9de4-6dc1ce90de94" + "'", str1, "89de8237-29df-4908-9de4-6dc1ce90de94");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "pass" + "'", str4, "pass");
        org.junit.Assert.assertNull(booking5);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        user0.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = user0.parkingProxy;
        ParkingSystem.PaymentManager paymentManager26 = new ParkingSystem.PaymentManager();
        paymentManager26.refundMessage = "";
        boolean boolean30 = paymentManager26.refundTotalCost((double) (byte) 1);
        paymentManager26.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean35 = paymentManager26.refundWithoutDeposit((double) 1L, (double) 'a');
        boolean boolean40 = paymentManager26.processPayment("9701df9a-2178-4ad5-8076-46ff5f05b3e8", (double) 10.0f, "", "Card number should be 16 digits");
        paymentManager26.paymentMessage = "Card number should be 16 digits";
        user0.user = "Card number should be 16 digits";
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "89de8237-29df-4908-9de4-6dc1ce90de94" + "'", str3, "89de8237-29df-4908-9de4-6dc1ce90de94");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy24);
        org.junit.Assert.assertNotNull(parkingSpaceProxy25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean21 = client0.confirmBooking("disabled", "CLT-f02c481e-1504-4abf-b598-76152da8586a", 0, "Paid $ 10.0 with Mobile Pay", (int) (byte) 1, "CLT-60bc02e6-ea36-49ee-91f5-9241efd385cc", "TXCrKOGD");
        boolean boolean24 = client0.editBooking("3b453211-7dd1-4452-8741-a206711c1217", 0);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Card number should be 16 digits" + "'", str1, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str10, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Card number should be 16 digits" + "'", str11, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Card number should be 16 digits" + "'", str12, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Refunded total cost of $1.0" + "'", str13, "Refunded total cost of $1.0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.Client client7 = ParkingSystem.Client.getInstance();
        java.lang.String str8 = client7.getName();
        client7.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str17 = client7.getUsername();
        java.lang.String str18 = client7.getPassword();
        java.lang.String str19 = client7.getClientType();
        boolean boolean20 = client7.getIsValidated();
        boolean boolean28 = client7.confirmBooking("hi!", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", 0, "Paid $ 100.0 with Mobile Pay", (-1), "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "empty");
        java.lang.String str29 = client7.getName();
        boolean boolean30 = client7.getIsValidated();
        cSVManager0.saveClient(client7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<ParkingSystem.Client> clientList32 = cSVManager0.loadClients();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "81) test0924(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(client7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Card number should be 16 digits" + "'", str8, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "disabled" + "'", str18, "disabled");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "disabled" + "'", str19, "disabled");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        java.util.List<ParkingSystem.Client> clientList12 = accountRegistry6.displayPendingValidations();
        accountRegistry6.validateClient("disabled");
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry6.loadClientsFromCSV();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(clientList12);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        client0.setValidated(false);
        org.junit.Assert.assertNotNull(client0);
// flaky "82) test0926(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jane" + "'", str1, "Jane");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        double double22 = bookingManager18.getHourlyRate("disabled");
        boolean boolean27 = bookingManager18.extendBooking("Refunded without deposit ($-42.0)", 100, "hi!", "09622cbf-e665-45db-b1ad-365065947a20");
        boolean boolean32 = bookingManager18.extendBooking("CLT-5be1cd5a-d829-4101-9cd3-6006338eb786", (int) (byte) 10, "CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
// flaky "83) test0927(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jane" + "'", str6, "Jane");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 15.0d + "'", double22 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        java.lang.String str4 = parkingSpaceProxy0.scanSpace("empty", "hi!");
        boolean boolean14 = parkingSpaceProxy0.confirmBooking("Paid $ -1.0 with Mobile Pay", "staff", "hi!", "hi!", (-1), "Paid $ 10.0 with Mobile Pay", 10, "jane", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        parkingSpaceProxy0.toggleSpace("9701df9a-2178-4ad5-8076-46ff5f05b3e8", "", true);
        boolean boolean24 = parkingSpaceProxy0.register("jane", "Paid $ -1.0 with Mobile Pay", "Refunded without deposit ($0.0)", "disabled", "Refunded total cost of $1.0");
        boolean boolean28 = parkingSpaceProxy0.editBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "9701df9a-2178-4ad5-8076-46ff5f05b3e8", (int) (short) 10);
        boolean boolean32 = parkingSpaceProxy0.editBooking("fhd49ADb", "4c45f11e-b09a-4d81-adf1-86cfd519dc3c", (int) (short) 0);
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "disabled" + "'", str4, "disabled");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        ParkingSystem.AccountRegistry accountRegistry6 = null;
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("disabled", "staff", "staff", accountRegistry6);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy11 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry12 = parkingSpaceProxy11.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj17 = parkingSpaceProxy14.login("empty", "Jane");
        parkingSpaceProxy14.validateClient("Jane");
        parkingSpaceProxy14.toggleSpace("", "staff", false);
        accountRegistry12.assignProxyToManager("pass", parkingSpaceProxy14);
        ParkingSystem.Client client26 = accountRegistry12.getClient("");
        ParkingSystem.SuperManager superManager27 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry12);
        superManager7.registry = accountRegistry12;
        ParkingSystem.AccountRegistry accountRegistry29 = superManager7.getRegistry();
        ParkingSystem.Manager manager30 = accountRegistry29.autoGenerateManager();
        ParkingSystem.SuperManager superManager31 = ParkingSystem.SuperManager.createFromCSV("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "", "CLT-3ec6d712-8a64-40d1-bda2-2cbb8012a753", accountRegistry29);
        java.lang.String str32 = superManager31.getName();
        superManager31.displayPendingValidations();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertNotNull(accountRegistry12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(client26);
        org.junit.Assert.assertNotNull(superManager27);
        org.junit.Assert.assertNotNull(accountRegistry29);
        org.junit.Assert.assertNotNull(manager30);
        org.junit.Assert.assertNotNull(superManager31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "25527a32-01ef-45ba-816a-1d0a2fc2a52d" + "'", str32, "25527a32-01ef-45ba-816a-1d0a2fc2a52d");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean7 = parkingSpaceFacade0.editBooking("Card number should be 16 digits", "", (int) (short) 0);
        parkingSpaceFacade0.toggleLot("Refunded total cost of $0.0", true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("hi!", (-1.0d), "", "");
        boolean boolean10 = mobilePay0.processPayment("hi!", (double) 100, "jane", "disabled");
        java.lang.String str11 = mobilePay0.getPaymentMessage();
        boolean boolean16 = mobilePay0.processPayment("Refunded without deposit ($0.0)", (double) (-1L), "Refunded total cost of $1.0", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        java.lang.String str17 = mobilePay0.getPaymentMessage();
        java.lang.String str18 = mobilePay0.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str11, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str17, "Paid $ -1.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Paid $ -1.0 with Mobile Pay" + "'", str18, "Paid $ -1.0 with Mobile Pay");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("");
        double double7 = bookingManager0.getDeposit("staff");
        boolean boolean11 = bookingManager0.editBooking("", "Paid $ -1.0 with Mobile Pay", (int) 'a');
        boolean boolean15 = bookingManager0.editBooking("jane", "pass", (int) '4');
        boolean boolean17 = bookingManager0.cancelBooking("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean19 = bookingManager0.cancelBooking("Refunded total cost of $1.0");
        ParkingSystem.CheckInManager checkInManager20 = new ParkingSystem.CheckInManager(bookingManager0);
        boolean boolean25 = bookingManager0.extendBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) '#', "CLT-f02c481e-1504-4abf-b598-76152da8586a", "ST001");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj3 = parkingSpaceProxy0.login("empty", "Jane");
        parkingSpaceProxy0.validateClient("Jane");
        java.lang.String str8 = parkingSpaceProxy0.scanSpace("", "");
        java.lang.Object obj11 = parkingSpaceProxy0.login("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "staff");
        ParkingSystem.Booking booking13 = parkingSpaceProxy0.getBookingDetails("Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "disabled" + "'", str8, "disabled");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(booking13);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        client0.assignProxy(parkingSpaceProxy15);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy20 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.Booking booking22 = parkingSpaceProxy20.getBookingDetails("Paid $ -1.0 with Mobile Pay");
        ParkingSystem.AccountRegistry accountRegistry23 = parkingSpaceProxy20.getRegistry();
        parkingSpaceProxy20.autoGenerateManager();
        client0.assignProxy(parkingSpaceProxy20);
        boolean boolean33 = client0.confirmBooking("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183", "", (int) (byte) 1, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (short) 10, "Paid $ -1.0 with Mobile Pay", "4a1f2343-8b2e-4dea-ba69-efd105414390");
        java.lang.String str34 = client0.getExtraId();
        ParkingSystem.Booking booking35 = client0.getBookingDetails();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jane" + "'", str1, "jane");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(booking22);
        org.junit.Assert.assertNotNull(accountRegistry23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(booking35);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.AccountRegistry accountRegistry4 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager5 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry4);
        boolean boolean7 = accountRegistry4.requiresValidation("disabled");
        int int8 = accountRegistry4.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy10 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj13 = parkingSpaceProxy10.login("empty", "Jane");
        parkingSpaceProxy10.validateClient("Jane");
        parkingSpaceProxy10.toggleSpace("", "staff", false);
        boolean boolean21 = parkingSpaceProxy10.cancelBooking("Jane");
        accountRegistry4.assignProxyToClient("pass", parkingSpaceProxy10);
        boolean boolean28 = parkingSpaceProxy10.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean34 = parkingSpaceProxy10.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        user0.parkingProxy = parkingSpaceProxy10;
        ParkingSystem.Client client36 = ParkingSystem.Client.getInstance();
        java.lang.String str37 = client36.getClientType();
        boolean boolean38 = client36.getIsValidated();
        client36.setValidated(false);
        boolean boolean41 = client36.cancelBooking();
        user0.user = client36;
        org.junit.Assert.assertNotNull(superManager5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(client36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "jane" + "'", str37, "jane");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        boolean boolean10 = client0.getIsValidated();
        java.lang.String str11 = client0.getClientType();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jane" + "'", str11, "jane");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy13 = null;
        client0.assignProxy(parkingSpaceProxy13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = client0.editBooking("", (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"ParkingSystem.ParkingSpaceProxy.editBooking(String, String, int)\" because \"this.parkingProxy\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        user0.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = new ParkingSystem.ParkingSpaceProxy();
        user0.assignProxy(parkingSpaceProxy25);
        java.lang.Object obj29 = user0.login("h40rNQ7kR1", "CLT-32d5cdc9-3c20-4f30-9d68-0be20fdf349c");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy24);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        user0.register("Paid $ 15.0 with Mobile Pay", "Paid $ 100.0 with Mobile Pay", "pass", "jane", "FNuxCiXmkP");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Card number should be 16 digits" + "'", str6, "Card number should be 16 digits");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5");
        boolean boolean3 = parkingLot1.isSpaceAvailable(10);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        ParkingSystem.Booking booking11 = null;
        boolean boolean12 = parkingLot6.assignBooking(1, booking11);
        ParkingSystem.ParkingLot parkingLot15 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking17 = null;
        boolean boolean18 = parkingLot15.assignBooking(0, booking17);
        boolean boolean20 = parkingLot15.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking29 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean30 = parkingLot15.assignBooking((int) (short) -1, booking29);
        java.lang.String str31 = booking29.getLotId();
        boolean boolean32 = parkingLot6.assignBooking(0, booking29);
        booking29.setCheckedIn(true);
        java.lang.String str35 = booking29.getLotId();
        boolean boolean36 = parkingLot1.assignBooking(52, booking29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "jane" + "'", str31, "jane");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "jane" + "'", str35, "jane");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        double double5 = bookingManager3.getHourlyRate("jane");
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        bookingManager3.setPaymentStrategy((ParkingSystem.Strategy) mobilePay6);
        ParkingSystem.Strategy strategy8 = null;
        bookingManager3.setPaymentStrategy(strategy8);
        ParkingSystem.SpaceManager spaceManager10 = bookingManager3.getSpaceManager();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager10);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        parkingLot1.setEnabled(false);
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        double double9 = bookingManager6.calculateCost("", 0);
        boolean boolean13 = bookingManager6.editBooking("Jane", "empty", 10);
        boolean boolean23 = bookingManager6.confirmBooking("pass", "disabled", "pass", "staff", (int) (short) 1, "empty", (int) '#', "hi!", "empty");
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap24 = bookingManager6.getActiveBookings();
        ParkingSystem.SpaceManager spaceManager25 = bookingManager6.getSpaceManager();
        ParkingSystem.Booking booking35 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double36 = booking35.getTotalCost();
        java.lang.String str37 = booking35.getLotId();
        boolean boolean38 = booking35.isCheckedIn();
        booking35.setStartTime("Refunded total cost of $1.0");
        boolean boolean41 = spaceManager25.assignBooking("empty", (int) '4', booking35);
        boolean boolean42 = parkingLot1.assignBooking(100, booking35);
        ParkingSystem.ParkingLotIterator parkingLotIterator43 = parkingLot1.getIterator();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 15.0d + "'", double9 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(spaceManager25);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "jane" + "'", str37, "jane");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(parkingLotIterator43);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        java.util.List<java.lang.String[]> strArrayList4 = cSVManager0.readCSV("Jane");
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap5 = null;
        cSVManager0.loadParkingLots(strMap5);
        java.util.List<java.lang.String[]> strArrayList8 = cSVManager0.readCSV("Paid $ -1.0 with Mobile Pay");
        java.lang.String[] strArray9 = cSVManager0.loadSuperManager();
        java.lang.String[] strArray10 = cSVManager0.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry14 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager15 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry14);
        boolean boolean17 = accountRegistry14.requiresValidation("disabled");
        int int18 = accountRegistry14.getManagersSize();
        boolean boolean24 = accountRegistry14.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj29 = parkingSpaceProxy26.login("empty", "Jane");
        parkingSpaceProxy26.validateClient("Jane");
        parkingSpaceProxy26.toggleSpace("", "staff", false);
        boolean boolean37 = parkingSpaceProxy26.cancelBooking("Jane");
        accountRegistry14.assignProxyToClient("pass", parkingSpaceProxy26);
        parkingSpaceProxy26.autoGenerateManager();
        parkingSpaceProxy26.toggleSpace("Paid $ 100.0 with Mobile Pay", "Jane", true);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade44 = parkingSpaceProxy26.getFacade();
        boolean boolean46 = parkingSpaceFacade44.checkOut("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        boolean boolean48 = parkingSpaceFacade44.cancelBooking("Jane");
        boolean boolean51 = parkingSpaceFacade44.extendBooking("jane", (int) ' ');
        ParkingSystem.SpaceManager spaceManager52 = parkingSpaceFacade44.getSpaceManager();
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap53 = spaceManager52.getParkingLots();
        cSVManager0.loadParkingLots(strMap53);
        ParkingSystem.Client client55 = ParkingSystem.Client.getInstance();
        java.lang.String str56 = client55.getClientType();
        boolean boolean64 = client55.confirmBooking("", "pass", (int) (byte) 0, "Paid $ 10.0 with Mobile Pay", (int) (byte) 0, "", "Jane");
        java.lang.String str65 = client55.getUsername();
        client55.setClientInfo("hi!", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841", "qPYDfDnbtD", "Jane", "86z9Z9e0MN", "02659ad3-0b5c-4c48-a915-a466f2b50775", false);
        cSVManager0.saveClient(client55);
        boolean boolean75 = client55.getIsValidated();
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArray9);
// flaky "84) test0943(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray9, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(strArray10);
// flaky "40) test0943(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray10, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(parkingSpaceFacade44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(spaceManager52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(client55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str56, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        ParkingSystem.CheckInManager checkInManager1 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.SpaceManager spaceManager2 = parkingSpaceFacade0.getSpaceManager();
        spaceManager2.loadParkingLots();
        ParkingSystem.ParkingLot parkingLot7 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot7.assignBooking(0, booking9);
        boolean boolean12 = parkingLot7.isSpaceAvailable((int) '#');
        ParkingSystem.Booking booking21 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean22 = parkingLot7.assignBooking((int) (short) -1, booking21);
        java.lang.String str23 = booking21.getLotId();
        int int24 = booking21.getDuration();
        int int25 = booking21.getSpaceId();
        booking21.setStartTime("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean28 = spaceManager2.assignBooking("02659ad3-0b5c-4c48-a915-a466f2b50775", (int) 'a', booking21);
        double double29 = booking21.getTotalCost();
        booking21.setStartTime("Refunded total cost of $0.0");
        org.junit.Assert.assertNotNull(checkInManager1);
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "jane" + "'", str23, "jane");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        boolean boolean13 = client0.getIsValidated();
        boolean boolean14 = client0.cancelBooking();
        boolean boolean16 = client0.extendBooking((int) (byte) -1);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841" + "'", str1, "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry15 = superManager4.getRegistry();
        ParkingSystem.Client client17 = ParkingSystem.Client.getInstance();
        java.lang.String str18 = client17.getName();
        client17.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str27 = client17.getUsername();
        java.lang.String str28 = client17.getPassword();
        java.lang.String str29 = client17.getUsername();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = null;
        client17.assignProxy(parkingSpaceProxy30);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy32 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj35 = parkingSpaceProxy32.login("empty", "Jane");
        client17.assignProxy(parkingSpaceProxy32);
        parkingSpaceProxy32.validateClient("13b04414-31a5-407f-8ea3-fba4613c73d1");
        parkingSpaceProxy32.addParkingLot("Refunded without deposit ($-42.0)");
        accountRegistry15.assignProxyToManager("09622cbf-e665-45db-b1ad-365065947a20", parkingSpaceProxy32);
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertNotNull(client17);
// flaky "85) test0946(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "jane" + "'", str18, "jane");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "disabled" + "'", str28, "disabled");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.AccountRegistry accountRegistry8 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager9 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry8);
        superManager4.registry = accountRegistry8;
        ParkingSystem.Client client12 = accountRegistry8.getClient("empty");
        boolean boolean18 = accountRegistry8.registerClient("Paid $ -1.0 with Mobile Pay", "jane", "hi!", "Refunded total cost of $1.0", "");
        accountRegistry8.validateClient("K6PkM9rcCx");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager9);
        org.junit.Assert.assertNull(client12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy3 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry4 = parkingSpaceProxy3.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj9 = parkingSpaceProxy6.login("empty", "Jane");
        parkingSpaceProxy6.validateClient("Jane");
        parkingSpaceProxy6.toggleSpace("", "staff", false);
        accountRegistry4.assignProxyToManager("pass", parkingSpaceProxy6);
        ParkingSystem.Client client18 = accountRegistry4.getClient("");
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "empty", "Paid $ -1.0 with Mobile Pay", accountRegistry4);
        boolean boolean25 = accountRegistry4.registerClient("hi!", "Refunded total cost of $1.0", "2afd610d-a8cb-413a-bbee-7927f86b526c", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean30 = parkingSpaceProxy27.checkIn("");
        parkingSpaceProxy27.toggleLot("", true);
        accountRegistry4.assignProxyToManager("", parkingSpaceProxy27);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade35 = parkingSpaceProxy27.getFacade();
        parkingSpaceFacade35.addParkingLot("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNotNull(accountRegistry4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(client18);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade35);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        boolean boolean16 = accountRegistry6.registerClient("jane", "", "", "Paid $ 10.0 with Mobile Pay", "staff");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy18 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj21 = parkingSpaceProxy18.login("empty", "Jane");
        parkingSpaceProxy18.validateClient("Jane");
        parkingSpaceProxy18.toggleSpace("", "staff", false);
        boolean boolean29 = parkingSpaceProxy18.cancelBooking("Jane");
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy18);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap31 = accountRegistry6.getManagers();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy33 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj36 = parkingSpaceProxy33.login("empty", "Jane");
        parkingSpaceProxy33.validateClient("Jane");
        parkingSpaceProxy33.toggleSpace("", "staff", false);
        boolean boolean44 = parkingSpaceProxy33.cancelBooking("Jane");
        boolean boolean46 = parkingSpaceProxy33.checkOut("empty");
        boolean boolean56 = parkingSpaceProxy33.confirmBooking("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ -1.0 with Mobile Pay", "", "", (int) (short) 0, "disabled", 32, "", "jane");
        accountRegistry6.assignProxyToManager("2afd610d-a8cb-413a-bbee-7927f86b526c", parkingSpaceProxy33);
        ParkingSystem.User user59 = new ParkingSystem.User();
        java.lang.Object obj60 = user59.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy61 = user59.parkingProxy;
        ParkingSystem.User user62 = new ParkingSystem.User();
        java.lang.Object obj63 = user62.user;
        ParkingSystem.Client client64 = ParkingSystem.Client.getInstance();
        java.lang.String str65 = client64.getName();
        client64.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy68 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry69 = parkingSpaceProxy68.getRegistry();
        boolean boolean71 = parkingSpaceProxy68.checkIn("");
        client64.assignProxy(parkingSpaceProxy68);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade73 = parkingSpaceProxy68.getFacade();
        user62.assignProxy(parkingSpaceProxy68);
        user59.parkingProxy = parkingSpaceProxy68;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade76 = parkingSpaceProxy68.getFacade();
        accountRegistry6.assignProxyToClient("pass", parkingSpaceProxy68);
        ParkingSystem.Client client79 = accountRegistry6.getClient("Paid $ -1.0 with Mobile Pay");
        accountRegistry6.validateClient("pass");
        ParkingSystem.Manager manager82 = accountRegistry6.autoGenerateManager();
        ParkingSystem.SuperManager superManager83 = ParkingSystem.SuperManager.createFromCSV("pass", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "CLT-035180a0-4707-410d-a011-2a4f0f46838b", accountRegistry6);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap84 = accountRegistry6.getManagers();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(parkingSpaceProxy61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(client64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "jane" + "'", str65, "jane");
        org.junit.Assert.assertNotNull(accountRegistry69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade73);
        org.junit.Assert.assertNotNull(parkingSpaceFacade76);
        org.junit.Assert.assertNull(client79);
        org.junit.Assert.assertNotNull(manager82);
        org.junit.Assert.assertNotNull(superManager83);
        org.junit.Assert.assertNotNull(strMap84);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        boolean boolean3 = parkingLot1.isSpaceAvailable((int) (byte) 1);
        ParkingSystem.ParkingLotIterator parkingLotIterator4 = parkingLot1.getIterator();
        ParkingSystem.Booking booking13 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int14 = booking13.getDuration();
        java.lang.String str15 = booking13.getClientId();
        booking13.setStartTime("hi!");
        booking13.setCheckedIn(true);
        boolean boolean20 = booking13.isCheckedIn();
        boolean boolean21 = parkingLot1.assignBooking((int) '#', booking13);
        java.lang.String str22 = booking13.getLicensePlate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "staff" + "'", str15, "staff");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "disabled" + "'", str22, "disabled");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("Jane", "staff", (int) (short) 100);
        boolean boolean9 = parkingSpaceFacade0.extendBooking("empty", 100);
        ParkingSystem.CheckInManager checkInManager10 = parkingSpaceFacade0.getCheckInManager();
        ParkingSystem.CheckInManager checkInManager11 = parkingSpaceFacade0.getCheckInManager();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(checkInManager10);
        org.junit.Assert.assertNotNull(checkInManager11);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        boolean boolean5 = bookingManager0.extendBooking("jane", (int) (short) -1, "", "Paid $ 10.0 with Mobile Pay");
        boolean boolean10 = bookingManager0.extendBooking("25527a32-01ef-45ba-816a-1d0a2fc2a52d", 100, "09622cbf-e665-45db-b1ad-365065947a20", "CLT-d7ac7477-2083-415e-84c8-8e0763f03efc");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        java.util.Map<java.lang.String, ParkingSystem.Booking> strMap1 = bookingManager0.getActiveBookings();
        ParkingSystem.CheckInManager checkInManager2 = new ParkingSystem.CheckInManager(bookingManager0);
        java.lang.String str3 = checkInManager2.refundMessage;
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.Client client2 = ParkingSystem.Client.getInstance();
        java.lang.String str3 = client2.getName();
        client2.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry7 = parkingSpaceProxy6.getRegistry();
        boolean boolean9 = parkingSpaceProxy6.checkIn("");
        client2.assignProxy(parkingSpaceProxy6);
        boolean boolean11 = client2.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = new ParkingSystem.ParkingSpaceProxy();
        client2.assignProxy(parkingSpaceProxy12);
        ParkingSystem.AccountRegistry accountRegistry14 = parkingSpaceProxy12.getRegistry();
        boolean boolean16 = parkingSpaceProxy12.checkIn("hi!");
        user0.parkingProxy = parkingSpaceProxy12;
        user0.register("Card number should be 16 digits", "Paid $ 100.0 with Mobile Pay", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "Refunded total cost of $1.0", "Paid $ 0.0 with Mobile Pay");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy24 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy25 = user0.parkingProxy;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy26 = user0.parkingProxy;
        java.lang.Object obj29 = user0.login("4a1f2343-8b2e-4dea-ba69-efd105414390", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(client2);
// flaky "86) test0954(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(accountRegistry7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(accountRegistry14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(parkingSpaceProxy24);
        org.junit.Assert.assertNotNull(parkingSpaceProxy25);
        org.junit.Assert.assertNotNull(parkingSpaceProxy26);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        ParkingSystem.AccountRegistry accountRegistry12 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager13 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry12);
        java.lang.String str14 = superManager13.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy21 = null;
        accountRegistry18.assignProxyToManager("disabled", parkingSpaceProxy21);
        superManager13.registry = accountRegistry18;
        ParkingSystem.AccountRegistry accountRegistry24 = superManager13.getRegistry();
        ParkingSystem.Manager manager25 = accountRegistry24.autoGenerateManager();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        boolean boolean34 = parkingSpaceProxy27.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        parkingSpaceProxy27.toggleLot("hi!", false);
        accountRegistry24.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        accountRegistry3.assignProxyToClient("CLT-30fd593b-dedd-41b3-a919-c48700301f41", parkingSpaceProxy27);
        accountRegistry3.validateClient("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertNotNull(superManager13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertNotNull(manager25);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) (byte) 10);
        ParkingSystem.Enabled enabled11 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot13 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator14 = parkingLot13.getIterator();
        ParkingSystem.ParkingSpace parkingSpace16 = parkingLot13.getParkingSpace((int) (byte) -1);
        java.lang.String str17 = enabled11.scanSpace(parkingSpace16);
        parkingSpace10.setState((ParkingSystem.SpaceState) enabled11);
        ParkingSystem.ParkingLot parkingLot20 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking22 = null;
        boolean boolean23 = parkingLot20.assignBooking(0, booking22);
        boolean boolean25 = parkingLot20.isSpaceAvailable((int) '#');
        boolean boolean27 = parkingLot20.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace29 = parkingLot20.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking30 = parkingSpace29.getCurrentBooking();
        parkingSpace29.removeBooking();
        ParkingSystem.Booking booking32 = parkingSpace29.getCurrentBooking();
        parkingSpace29.removeBooking();
        java.lang.String str34 = enabled11.scanSpace(parkingSpace29);
        ParkingSystem.ParkingLot parkingLot36 = new ParkingSystem.ParkingLot("CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        parkingLot36.removeBooking(2);
        ParkingSystem.ParkingSpace parkingSpace40 = parkingLot36.getParkingSpace(0);
        java.lang.String str41 = enabled11.scanSpace(parkingSpace40);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertNotNull(parkingLotIterator14);
        org.junit.Assert.assertNotNull(parkingSpace16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "empty" + "'", str17, "empty");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(parkingSpace29);
        org.junit.Assert.assertNull(booking30);
        org.junit.Assert.assertNull(booking32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "empty" + "'", str34, "empty");
        org.junit.Assert.assertNotNull(parkingSpace40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "empty" + "'", str41, "empty");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        double double5 = bookingManager3.getHourlyRate("jane");
        ParkingSystem.MobilePay mobilePay6 = new ParkingSystem.MobilePay();
        bookingManager3.setPaymentStrategy((ParkingSystem.Strategy) mobilePay6);
        ParkingSystem.Booking booking9 = bookingManager3.getBooking("Paid $ 100.0 with Mobile Pay");
        double double11 = bookingManager3.getDeposit("02659ad3-0b5c-4c48-a915-a466f2b50775");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNull(booking9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.0d + "'", double11 == 15.0d);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        ParkingSystem.Enabled enabled0 = new ParkingSystem.Enabled();
        ParkingSystem.ParkingLot parkingLot2 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking4 = null;
        boolean boolean5 = parkingLot2.assignBooking(0, booking4);
        boolean boolean7 = parkingLot2.isSpaceAvailable((int) '#');
        boolean boolean9 = parkingLot2.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot2.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking12 = parkingSpace11.getCurrentBooking();
        parkingSpace11.removeBooking();
        java.lang.String str14 = enabled0.scanSpace(parkingSpace11);
        ParkingSystem.ParkingLot parkingLot16 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking18 = null;
        boolean boolean19 = parkingLot16.assignBooking(0, booking18);
        boolean boolean21 = parkingLot16.isSpaceAvailable((int) '#');
        boolean boolean23 = parkingLot16.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace25 = parkingLot16.getParkingSpace((int) (byte) 10);
        int int26 = parkingSpace25.getSpaceId();
        ParkingSystem.Booking booking27 = parkingSpace25.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager28 = new ParkingSystem.SpaceManager();
        boolean boolean31 = spaceManager28.isSpaceAvailable("hi!", (int) '#');
        spaceManager28.toggleLot("disabled", false);
        ParkingSystem.Booking booking44 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean45 = spaceManager28.assignBooking("empty", (int) (short) 0, booking44);
        boolean boolean46 = parkingSpace25.assignBooking(booking44);
        java.lang.String str47 = enabled0.scanSpace(parkingSpace25);
        ParkingSystem.ParkingLot parkingLot49 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking51 = null;
        boolean boolean52 = parkingLot49.assignBooking(0, booking51);
        boolean boolean54 = parkingLot49.isSpaceAvailable((int) '#');
        boolean boolean56 = parkingLot49.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace58 = parkingLot49.getParkingSpace((int) (byte) 10);
        int int59 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking60 = parkingSpace58.getCurrentBooking();
        java.lang.String str61 = parkingSpace58.scanSpace();
        int int62 = parkingSpace58.getSpaceId();
        ParkingSystem.Booking booking63 = parkingSpace58.getCurrentBooking();
        int int64 = parkingSpace58.getSpaceId();
        java.lang.String str65 = enabled0.scanSpace(parkingSpace58);
        boolean boolean66 = parkingSpace58.isAvailable();
        ParkingSystem.Booking booking74 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double75 = booking74.getTotalCost();
        java.lang.String str76 = booking74.getLotId();
        boolean boolean77 = booking74.isCheckedIn();
        int int78 = booking74.getDuration();
        boolean boolean79 = parkingSpace58.assignBooking(booking74);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNull(booking12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "empty" + "'", str14, "empty");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(parkingSpace25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(booking27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "disabled" + "'", str47, "disabled");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(parkingSpace58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(booking60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "empty" + "'", str61, "empty");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(booking63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "empty" + "'", str65, "empty");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "jane" + "'", str76, "jane");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 32 + "'", int78 == 32);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy6 = null;
        accountRegistry3.assignProxyToManager("disabled", parkingSpaceProxy6);
        // The following exception was thrown during execution in test generation
        try {
            accountRegistry3.loadManagersFromCSV();
// flaky "87) test0959(RegressionTest1)":             org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(superManager4);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        ParkingSystem.MobilePay mobilePay0 = new ParkingSystem.MobilePay();
        boolean boolean5 = mobilePay0.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str6 = mobilePay0.getPaymentMessage();
        boolean boolean11 = mobilePay0.processPayment("Jane", (double) 10L, "jane", "Paid $ 10.0 with Mobile Pay");
        boolean boolean16 = mobilePay0.processPayment("Jane", (double) (byte) 0, "hi!", "Jane");
        java.lang.String str17 = mobilePay0.getPaymentMessage();
        boolean boolean22 = mobilePay0.processPayment("Refunded without deposit ($-96.0)", (double) ' ', "CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", "3b453211-7dd1-4452-8741-a206711c1217");
        boolean boolean27 = mobilePay0.processPayment("CLT-41ead7fd-0c3b-4694-a2a9-d760d7e008d6", (-1.0d), "staff", "empty");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str6, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Paid $ 0.0 with Mobile Pay" + "'", str17, "Paid $ 0.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        ParkingSystem.ParkingSpace parkingSpace1 = new ParkingSystem.ParkingSpace((int) (short) -1);
        java.lang.String str2 = parkingSpace1.scanSpace();
        ParkingSystem.Booking booking10 = new ParkingSystem.Booking("disabled", "CLT-30fd593b-dedd-41b3-a919-c48700301f41", (int) (short) 1, "13b04414-31a5-407f-8ea3-fba4613c73d1", (int) (byte) 100, "CLT-30fd593b-dedd-41b3-a919-c48700301f41", (double) 0L);
        boolean boolean11 = parkingSpace1.assignBooking(booking10);
        java.lang.String str12 = booking10.getStartTime();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "empty" + "'", str2, "empty");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "13b04414-31a5-407f-8ea3-fba4613c73d1" + "'", str12, "13b04414-31a5-407f-8ea3-fba4613c73d1");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.Booking booking5 = parkingSpace4.getCurrentBooking();
        ParkingSystem.ParkingLot parkingLot7 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking9 = null;
        boolean boolean10 = parkingLot7.assignBooking(0, booking9);
        boolean boolean12 = parkingLot7.isSpaceAvailable((int) '#');
        boolean boolean14 = parkingLot7.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace16 = parkingLot7.getParkingSpace((int) (byte) 10);
        int int17 = parkingSpace16.getSpaceId();
        ParkingSystem.Booking booking18 = parkingSpace16.getCurrentBooking();
        ParkingSystem.SpaceManager spaceManager19 = new ParkingSystem.SpaceManager();
        boolean boolean22 = spaceManager19.isSpaceAvailable("hi!", (int) '#');
        spaceManager19.toggleLot("disabled", false);
        ParkingSystem.Booking booking35 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean36 = spaceManager19.assignBooking("empty", (int) (short) 0, booking35);
        boolean boolean37 = parkingSpace16.assignBooking(booking35);
        ParkingSystem.SpaceManager spaceManager38 = new ParkingSystem.SpaceManager();
        boolean boolean41 = spaceManager38.isSpaceAvailable("hi!", (int) '#');
        spaceManager38.toggleLot("disabled", false);
        ParkingSystem.Booking booking54 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean55 = spaceManager38.assignBooking("empty", (int) (short) 0, booking54);
        boolean boolean56 = booking54.isCheckedIn();
        java.lang.String str57 = booking54.getClientId();
        boolean boolean58 = parkingSpace16.assignBooking(booking54);
        boolean boolean59 = parkingSpace4.assignBooking(booking54);
        ParkingSystem.SpaceState spaceState60 = parkingSpace4.getState();
        ParkingSystem.Booking booking61 = parkingSpace4.getCurrentBooking();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(parkingSpace16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(booking18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "staff" + "'", str57, "staff");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(spaceState60);
        org.junit.Assert.assertNotNull(booking61);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        double double8 = booking7.getTotalCost();
        int int9 = booking7.getDuration();
        java.lang.String str10 = booking7.getClientId();
        double double11 = booking7.getTotalCost();
        booking7.setDuration((int) (short) -1);
        java.lang.String str14 = booking7.getClientId();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "staff" + "'", str10, "staff");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "staff" + "'", str14, "staff");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap11 = accountRegistry9.getManagers();
        ParkingSystem.SuperManager superManager12 = ParkingSystem.SuperManager.createFromCSV("Paid $ 10.0 with Mobile Pay", "7aecb00c-028c-4dcf-96cc-14d25bd709ab", "disabled", accountRegistry9);
        int int13 = accountRegistry9.getManagersSize();
        ParkingSystem.SuperManager superManager14 = ParkingSystem.SuperManager.createFromCSV("CLT-0173ebd7-c50a-4d20-8ab3-f6039f068cff", "jane", "jane", accountRegistry9);
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(superManager12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(superManager14);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean8 = parkingLot1.isEnabled();
        parkingLot1.removeBooking(2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "hi!";
        ParkingSystem.BookingManager bookingManager7 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager8 = new ParkingSystem.CheckInManager(bookingManager7);
        ParkingSystem.SpaceManager spaceManager9 = bookingManager7.getSpaceManager();
        double double12 = bookingManager7.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit13 = new ParkingSystem.DebitOrCredit();
        bookingManager7.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit13);
        boolean boolean19 = debitOrCredit13.processPayment("2afd610d-a8cb-413a-bbee-7927f86b526c", (double) (-1), "Paid $ -1.0 with Mobile Pay", "");
        java.lang.String str20 = debitOrCredit13.getPaymentMessage();
        java.lang.String str21 = debitOrCredit13.getPaymentMessage();
        paymentManager0.setStrategy((ParkingSystem.Strategy) debitOrCredit13);
        java.lang.String str23 = debitOrCredit13.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(spaceManager9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 165.0d + "'", double12 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Card number should be 16 digits" + "'", str20, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Card number should be 16 digits" + "'", str21, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Card number should be 16 digits" + "'", str23, "Card number should be 16 digits");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("");
        ParkingSystem.ParkingLotIterator parkingLotIterator2 = parkingLot1.getIterator();
        ParkingSystem.ParkingSpace parkingSpace4 = parkingLot1.getParkingSpace((int) (byte) -1);
        ParkingSystem.ParkingLot parkingLot6 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking8 = null;
        boolean boolean9 = parkingLot6.assignBooking(0, booking8);
        boolean boolean11 = parkingLot6.isSpaceAvailable((int) '#');
        boolean boolean13 = parkingLot6.isSpaceAvailable((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace15 = parkingLot6.getParkingSpace((int) (byte) 10);
        ParkingSystem.Booking booking16 = parkingSpace15.getCurrentBooking();
        parkingSpace15.removeBooking();
        int int18 = parkingSpace15.getSpaceId();
        ParkingSystem.Booking booking26 = new ParkingSystem.Booking("jane", "Paid $ 10.0 with Mobile Pay", (-1), "Paid $ 10.0 with Mobile Pay", (int) (short) 1, "hi!", (double) 100);
        boolean boolean27 = parkingSpace15.assignBooking(booking26);
        boolean boolean28 = parkingSpace4.assignBooking(booking26);
        int int29 = booking26.getDuration();
        org.junit.Assert.assertNotNull(parkingLotIterator2);
        org.junit.Assert.assertNotNull(parkingSpace4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(parkingSpace15);
        org.junit.Assert.assertNull(booking16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        java.lang.String str1 = paymentManager0.refundMessage;
        boolean boolean3 = paymentManager0.refundTotalCost((-1.0d));
        paymentManager0.paymentMessage = "pass";
        paymentManager0.paymentMessage = "empty";
        boolean boolean9 = paymentManager0.refundDeposit((double) ' ');
        boolean boolean12 = paymentManager0.refundWithoutDeposit((double) ' ', (double) 1.0f);
        boolean boolean14 = paymentManager0.refundTotalCost((double) 100);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        ParkingSystem.PaymentManager paymentManager0 = new ParkingSystem.PaymentManager();
        paymentManager0.refundMessage = "";
        boolean boolean4 = paymentManager0.refundTotalCost((double) (byte) 1);
        paymentManager0.paymentMessage = "Paid $ 100.0 with Mobile Pay";
        boolean boolean9 = paymentManager0.refundWithoutDeposit((double) 1L, (double) 'a');
        java.lang.String str10 = paymentManager0.paymentMessage;
        boolean boolean15 = paymentManager0.processPayment("disabled", (double) (short) 1, "ST001", "2afd610d-a8cb-413a-bbee-7927f86b526c");
        ParkingSystem.Strategy strategy16 = null;
        paymentManager0.setStrategy(strategy16);
        java.lang.String str18 = paymentManager0.refundMessage;
        ParkingSystem.MobilePay mobilePay19 = new ParkingSystem.MobilePay();
        boolean boolean24 = mobilePay19.processPayment("disabled", 10.0d, "disabled", "disabled");
        java.lang.String str25 = mobilePay19.getPaymentMessage();
        java.lang.String str26 = mobilePay19.getPaymentMessage();
        boolean boolean31 = mobilePay19.processPayment("CLT-270f1c6f-0e01-426b-8fb3-6944808f1f52", 1.0d, "disabled", "Refunded without deposit ($0.0)");
        paymentManager0.setStrategy((ParkingSystem.Strategy) mobilePay19);
        java.lang.String str33 = mobilePay19.getPaymentMessage();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Paid $ 100.0 with Mobile Pay" + "'", str10, "Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Refunded without deposit ($-96.0)" + "'", str18, "Refunded without deposit ($-96.0)");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str25, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str26, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Paid $ 1.0 with Mobile Pay" + "'", str33, "Paid $ 1.0 with Mobile Pay");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        boolean boolean3 = spaceManager0.isSpaceAvailable("hi!", (int) '#');
        boolean boolean6 = spaceManager0.isSpaceAvailable("CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        ParkingSystem.Booking booking6 = null;
        boolean boolean7 = parkingLot1.assignBooking(1, booking6);
        boolean boolean8 = parkingLot1.isEnabled();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.Client client27 = ParkingSystem.Client.getInstance();
        java.lang.String str28 = client27.getClientType();
        java.lang.String str29 = client27.getPassword();
        user0.user = client27;
        java.lang.Object obj33 = user0.login("ST001", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        ParkingSystem.User user34 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj38 = parkingSpaceProxy35.login("empty", "Jane");
        parkingSpaceProxy35.validateClient("Jane");
        parkingSpaceProxy35.toggleSpace("", "staff", false);
        boolean boolean46 = parkingSpaceProxy35.cancelBooking("");
        user34.assignProxy(parkingSpaceProxy35);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy48 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj51 = parkingSpaceProxy48.login("empty", "Jane");
        parkingSpaceProxy48.validateClient("Jane");
        parkingSpaceProxy48.toggleSpace("", "staff", false);
        boolean boolean59 = parkingSpaceProxy48.cancelBooking("");
        boolean boolean65 = parkingSpaceProxy48.register("jane", "jane", "Jane", "hi!", "disabled");
        user34.parkingProxy = parkingSpaceProxy48;
        user0.user = user34;
        java.lang.Object obj68 = user0.user;
        ParkingSystem.User user69 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade70 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean72 = parkingSpaceFacade70.checkIn("");
        ParkingSystem.BookingManager bookingManager73 = parkingSpaceFacade70.getBookingManager();
        parkingSpaceFacade70.toggleLot("Paid $ -1.0 with Mobile Pay", false);
        user69.user = "Paid $ -1.0 with Mobile Pay";
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy78 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj81 = parkingSpaceProxy78.login("empty", "Jane");
        boolean boolean84 = parkingSpaceProxy78.extendBooking("", 100);
        boolean boolean88 = parkingSpaceProxy78.editBooking("Paid $ 10.0 with Mobile Pay", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (short) 10);
        parkingSpaceProxy78.toggleLot("2afd610d-a8cb-413a-bbee-7927f86b526c", true);
        user69.parkingProxy = parkingSpaceProxy78;
        user0.assignProxy(parkingSpaceProxy78);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(client27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "empty" + "'", str28, "empty");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Paid $ 10.0 with Mobile Pay" + "'", str29, "Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bookingManager73);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        ParkingSystem.SpaceManager spaceManager0 = new ParkingSystem.SpaceManager();
        spaceManager0.removeBooking("hi!", (int) (byte) 0);
        spaceManager0.addParkingLot("");
        ParkingSystem.SpaceManager spaceManager8 = new ParkingSystem.SpaceManager();
        boolean boolean11 = spaceManager8.isSpaceAvailable("hi!", (int) '#');
        spaceManager8.toggleLot("disabled", false);
        ParkingSystem.Booking booking24 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean25 = spaceManager8.assignBooking("empty", (int) (short) 0, booking24);
        boolean boolean26 = booking24.isCheckedIn();
        boolean boolean27 = spaceManager0.assignBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (byte) 0, booking24);
        java.util.Map<java.lang.String, ParkingSystem.ParkingLot> strMap28 = spaceManager0.getParkingLots();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        double double3 = bookingManager0.calculateCost("", 0);
        double double5 = bookingManager0.getHourlyRate("disabled");
        ParkingSystem.BookingManager bookingManager6 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager6);
        ParkingSystem.SpaceManager spaceManager8 = bookingManager6.getSpaceManager();
        double double11 = bookingManager6.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit12 = new ParkingSystem.DebitOrCredit();
        bookingManager6.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        boolean boolean18 = debitOrCredit12.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit12);
        double double21 = bookingManager0.getDeposit("9701df9a-2178-4ad5-8076-46ff5f05b3e8");
        ParkingSystem.AccountRegistry accountRegistry22 = bookingManager0.getAccountRegistry();
        ParkingSystem.Booking booking24 = bookingManager0.getBooking("Refunded without deposit ($0.0)");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.0d + "'", double3 == 15.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.0d + "'", double5 == 15.0d);
        org.junit.Assert.assertNotNull(spaceManager8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 165.0d + "'", double11 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 15.0d + "'", double21 == 15.0d);
        org.junit.Assert.assertNotNull(accountRegistry22);
        org.junit.Assert.assertNull(booking24);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("3b453211-7dd1-4452-8741-a206711c1217");
        ParkingSystem.ParkingSpace parkingSpace3 = parkingLot1.getParkingSpace((int) ' ');
        org.junit.Assert.assertNotNull(parkingSpace3);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        boolean boolean10 = client0.checkIn();
        ParkingSystem.Booking booking11 = client0.getBookingDetails();
        client0.setValidated(false);
        org.junit.Assert.assertNotNull(client0);
// flaky "88) test0976(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(booking11);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        ParkingSystem.AccountRegistry accountRegistry3 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager4 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry3);
        java.lang.String str5 = superManager4.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry9 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager10 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry9);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy12 = null;
        accountRegistry9.assignProxyToManager("disabled", parkingSpaceProxy12);
        superManager4.registry = accountRegistry9;
        ParkingSystem.AccountRegistry accountRegistry18 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager19 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry18);
        java.lang.String str20 = superManager19.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry24 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager25 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry24);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = null;
        accountRegistry24.assignProxyToManager("disabled", parkingSpaceProxy27);
        superManager19.registry = accountRegistry24;
        superManager4.registry = accountRegistry24;
        java.util.List<ParkingSystem.Client> clientList31 = accountRegistry24.displayPendingValidations();
        java.util.Map<java.lang.String, ParkingSystem.Manager> strMap32 = accountRegistry24.getManagers();
        boolean boolean38 = accountRegistry24.registerClient("", "ST001", "CLT-5ea5e3c6-5e7b-4ad6-9ff4-2cb4f2bc1fe5", "jane", "staff");
        accountRegistry24.validateClient("Paid $ 100.0 with Mobile Pay");
        org.junit.Assert.assertNotNull(superManager4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(superManager10);
        org.junit.Assert.assertNotNull(superManager19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(superManager25);
        org.junit.Assert.assertNotNull(clientList31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        parkingSpaceFacade0.addParkingLot("");
        boolean boolean6 = parkingSpaceFacade0.editBooking("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "Card number should be 16 digits", 100);
        boolean boolean9 = parkingSpaceFacade0.extendBooking("CLT-2aaedfbd-8450-4ae9-a41d-e7746f52d089", 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        parkingLot1.setEnabled(true);
        parkingLot1.removeBooking((int) (short) 10);
        ParkingSystem.ParkingSpace parkingSpace12 = parkingLot1.getParkingSpace((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingSpace12);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.SpaceManager spaceManager4 = bookingManager0.getSpaceManager();
        boolean boolean14 = bookingManager0.confirmBooking("disabled", "jane", "Jane", "Jane", (int) ' ', "jane", (int) (short) 100, "", "hi!");
        double double16 = bookingManager0.getDeposit("Paid $ 10.0 with Mobile Pay");
        double double18 = bookingManager0.getHourlyRate("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNotNull(spaceManager4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 15.0d + "'", double16 == 15.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 15.0d + "'", double18 == 15.0d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        java.lang.String str4 = client0.getExtraId();
        java.lang.String str5 = client0.getPassword();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
// flaky "89) test0981(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
// flaky "41) test0981(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "disabled" + "'", str5, "disabled");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("pass");
        ParkingSystem.SpaceManager spaceManager3 = new ParkingSystem.SpaceManager();
        spaceManager3.toggleLot("Jane", false);
        spaceManager3.removeBooking("disabled", 10);
        ParkingSystem.SpaceManager spaceManager12 = new ParkingSystem.SpaceManager();
        boolean boolean15 = spaceManager12.isSpaceAvailable("hi!", (int) '#');
        spaceManager12.toggleLot("disabled", false);
        ParkingSystem.Booking booking28 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        boolean boolean29 = spaceManager12.assignBooking("empty", (int) (short) 0, booking28);
        boolean boolean30 = spaceManager3.assignBooking("hi!", 0, booking28);
        double double31 = booking28.getTotalCost();
        booking28.setDuration((-1));
        java.lang.String str34 = booking28.getLotId();
        boolean boolean35 = parkingLot1.assignBooking(1, booking28);
        java.lang.String str36 = booking28.getStartTime();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "jane" + "'", str34, "jane");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Jane" + "'", str36, "Jane");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        ParkingSystem.CSVManager cSVManager0 = new ParkingSystem.CSVManager();
        java.util.List<java.lang.String[]> strArrayList2 = cSVManager0.readCSV("");
        cSVManager0.updateClientValidation("pass", false);
        java.lang.String[] strArray6 = cSVManager0.loadSuperManager();
        ParkingSystem.AccountRegistry accountRegistry10 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry10);
        java.lang.String str12 = superManager11.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry13 = superManager11.getRegistry();
        cSVManager0.saveManager((ParkingSystem.Manager) superManager11);
        superManager11.setManagerInfo("h40rNQ7kR1", "", "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArray6);
// flaky "90) test0983(RegressionTest1)":         org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "SMGR-1\tsuperuser\tsuperpass" });
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(accountRegistry13);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade9 = parkingSpaceProxy4.getFacade();
        boolean boolean11 = parkingSpaceFacade9.checkOut("Paid $ 0.0 with Mobile Pay");
        ParkingSystem.Booking booking13 = parkingSpaceFacade9.getBookingDetails("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        boolean boolean16 = parkingSpaceFacade9.extendBooking("ST001", 2);
        ParkingSystem.CheckInManager checkInManager17 = parkingSpaceFacade9.getCheckInManager();
        java.lang.String str20 = parkingSpaceFacade9.scanSpace("CLT-d2153556-bc61-49e7-b73d-6af2a45e5167", "Refunded total cost of $1.0");
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(booking13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(checkInManager17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "disabled" + "'", str20, "disabled");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean8 = parkingLot1.isEnabled();
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) ' ');
        java.lang.String str11 = parkingSpace10.scanSpace();
        java.lang.String str12 = parkingSpace10.scanSpace();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "empty" + "'", str11, "empty");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "empty" + "'", str12, "empty");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        ParkingSystem.User user13 = new ParkingSystem.User();
        java.lang.Object obj14 = user13.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy15 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj18 = parkingSpaceProxy15.login("empty", "Jane");
        parkingSpaceProxy15.validateClient("Jane");
        java.lang.String str23 = parkingSpaceProxy15.scanSpace("", "");
        parkingSpaceProxy15.toggleSpace("", "disabled", true);
        user13.parkingProxy = parkingSpaceProxy15;
        ParkingSystem.ParkingLot parkingLot30 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.ParkingLotIterator parkingLotIterator31 = parkingLot30.getIterator();
        ParkingSystem.ParkingLotIterator parkingLotIterator32 = parkingLot30.getIterator();
        user13.user = parkingLot30;
        ParkingSystem.User user34 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy35 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj38 = parkingSpaceProxy35.login("empty", "Jane");
        parkingSpaceProxy35.validateClient("Jane");
        parkingSpaceProxy35.toggleSpace("", "staff", false);
        boolean boolean46 = parkingSpaceProxy35.cancelBooking("");
        user34.assignProxy(parkingSpaceProxy35);
        user13.user = parkingSpaceProxy35;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy49 = user13.parkingProxy;
        client0.assignProxy(parkingSpaceProxy49);
        boolean boolean54 = parkingSpaceProxy49.editBooking("09622cbf-e665-45db-b1ad-365065947a20", "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", (int) (byte) 0);
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "disabled" + "'", str23, "disabled");
        org.junit.Assert.assertNotNull(parkingLotIterator31);
        org.junit.Assert.assertNotNull(parkingLotIterator32);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(parkingSpaceProxy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy4 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry5 = parkingSpaceProxy4.getRegistry();
        boolean boolean7 = parkingSpaceProxy4.checkIn("");
        client0.assignProxy(parkingSpaceProxy4);
        boolean boolean9 = client0.cancelBooking();
        java.lang.String str10 = client0.getExtraId();
        java.lang.String str11 = client0.getName();
        java.lang.String str12 = client0.getName();
        java.lang.String str13 = client0.getClientType();
        boolean boolean16 = client0.editBooking("Jane", 100);
        boolean boolean18 = client0.extendBooking((int) '#');
        boolean boolean26 = client0.confirmBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (-1), "Card number should be 16 digits", (int) 'a', "staff", "Refunded without deposit ($-42.0)");
        boolean boolean27 = client0.getIsValidated();
        org.junit.Assert.assertNotNull(client0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(accountRegistry5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "disabled" + "'", str13, "disabled");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        ParkingSystem.Booking booking7 = new ParkingSystem.Booking("staff", "Paid $ -1.0 with Mobile Pay", 1, "Paid $ 100.0 with Mobile Pay", (-1), "CLT-93b11069-2e34-4ef4-bf17-b3bb8758882b", 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime8 = booking7.getCheckedInDeadline();
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Paid $ 100.0 with Mobile Pay' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        ParkingSystem.User user0 = new ParkingSystem.User();
        java.lang.Object obj1 = user0.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy2 = user0.parkingProxy;
        ParkingSystem.User user3 = new ParkingSystem.User();
        java.lang.Object obj4 = user3.user;
        ParkingSystem.Client client5 = ParkingSystem.Client.getInstance();
        java.lang.String str6 = client5.getName();
        client5.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy9 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry10 = parkingSpaceProxy9.getRegistry();
        boolean boolean12 = parkingSpaceProxy9.checkIn("");
        client5.assignProxy(parkingSpaceProxy9);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade14 = parkingSpaceProxy9.getFacade();
        user3.assignProxy(parkingSpaceProxy9);
        user0.parkingProxy = parkingSpaceProxy9;
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade17 = parkingSpaceProxy9.getFacade();
        ParkingSystem.BookingManager bookingManager18 = parkingSpaceFacade17.getBookingManager();
        boolean boolean20 = bookingManager18.cancelBooking("disabled");
        double double22 = bookingManager18.getHourlyRate("disabled");
        ParkingSystem.Booking booking24 = bookingManager18.getBooking("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7");
        double double26 = bookingManager18.getDeposit("CLT-45a3d895-9bc3-45d3-9068-d4559eae3183");
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(parkingSpaceProxy2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(client5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(accountRegistry10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade14);
        org.junit.Assert.assertNotNull(parkingSpaceFacade17);
        org.junit.Assert.assertNotNull(bookingManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 15.0d + "'", double22 == 15.0d);
        org.junit.Assert.assertNull(booking24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 15.0d + "'", double26 == 15.0d);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        ParkingSystem.ParkingLotIterator parkingLotIterator7 = parkingLot1.getIterator();
        parkingLot1.removeBooking((int) ' ');
        ParkingSystem.ParkingSpace parkingSpace11 = parkingLot1.getParkingSpace(0);
        ParkingSystem.ParkingSpace parkingSpace13 = parkingLot1.getParkingSpace((int) '#');
        ParkingSystem.ParkingSpace parkingSpace15 = parkingLot1.getParkingSpace(52);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator7);
        org.junit.Assert.assertNotNull(parkingSpace11);
        org.junit.Assert.assertNotNull(parkingSpace13);
        org.junit.Assert.assertNotNull(parkingSpace15);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        ParkingSystem.User user0 = new ParkingSystem.User();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy1 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj4 = parkingSpaceProxy1.login("empty", "Jane");
        parkingSpaceProxy1.validateClient("Jane");
        parkingSpaceProxy1.toggleSpace("", "staff", false);
        boolean boolean12 = parkingSpaceProxy1.cancelBooking("");
        user0.assignProxy(parkingSpaceProxy1);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy14 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry15 = parkingSpaceProxy14.getRegistry();
        boolean boolean21 = parkingSpaceProxy14.register("empty", "disabled", "Paid $ 10.0 with Mobile Pay", "empty", "jane");
        boolean boolean25 = parkingSpaceProxy14.editBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", 0);
        user0.parkingProxy = parkingSpaceProxy14;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy27 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry28 = parkingSpaceProxy27.getRegistry();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy30 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj33 = parkingSpaceProxy30.login("empty", "Jane");
        parkingSpaceProxy30.validateClient("Jane");
        parkingSpaceProxy30.toggleSpace("", "staff", false);
        accountRegistry28.assignProxyToManager("pass", parkingSpaceProxy30);
        boolean boolean46 = parkingSpaceProxy30.register("CLT-30fd593b-dedd-41b3-a919-c48700301f41", "disabled", "Refunded total cost of $1.0", "", "CLT-30fd593b-dedd-41b3-a919-c48700301f41");
        user0.parkingProxy = parkingSpaceProxy30;
        java.lang.Object obj48 = user0.user;
        java.lang.Object obj49 = user0.user;
        ParkingSystem.AccountRegistry accountRegistry53 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager54 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry53);
        boolean boolean56 = accountRegistry53.requiresValidation("disabled");
        int int57 = accountRegistry53.getManagersSize();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy59 = new ParkingSystem.ParkingSpaceProxy();
        java.lang.Object obj62 = parkingSpaceProxy59.login("empty", "Jane");
        parkingSpaceProxy59.validateClient("Jane");
        parkingSpaceProxy59.toggleSpace("", "staff", false);
        boolean boolean70 = parkingSpaceProxy59.cancelBooking("Jane");
        accountRegistry53.assignProxyToClient("pass", parkingSpaceProxy59);
        boolean boolean77 = parkingSpaceProxy59.register("Jane", "Paid $ -1.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "", "Refunded total cost of $1.0");
        boolean boolean83 = parkingSpaceProxy59.register("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "jane", "", "jane", "CLT-84172690-12e5-43e4-8a26-14753ff3c6e3");
        boolean boolean89 = parkingSpaceProxy59.register("CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", "staff", "Refunded total cost of $1.0", "Paid $ 10.0 with Mobile Pay", "jane");
        user0.assignProxy(parkingSpaceProxy59);
        java.lang.Object obj93 = user0.login("", "3b453211-7dd1-4452-8741-a206711c1217");
        java.lang.Object obj96 = user0.login("CLT-07d9fe1c-cd89-4d98-a22b-f08722eb0f49", "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(accountRegistry15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(accountRegistry28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(superManager54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        boolean boolean4 = parkingSpaceFacade0.cancelBooking("jane");
        boolean boolean7 = parkingSpaceFacade0.extendBooking("hi!", (-1));
        parkingSpaceFacade0.toggleLot("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", true);
        parkingSpaceFacade0.toggleSpace("2afd610d-a8cb-413a-bbee-7927f86b526c", "Paid $ 10.0 with Mobile Pay", true);
        ParkingSystem.SpaceManager spaceManager15 = parkingSpaceFacade0.getSpaceManager();
        spaceManager15.toggleLot("CLT-d8bf4c7d-97ae-4388-8e43-8e38dfdc8d7c", false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(spaceManager15);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy0 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry1 = parkingSpaceProxy0.getRegistry();
        java.lang.Object obj4 = accountRegistry1.login("7aecb00c-028c-4dcf-96cc-14d25bd709ab", "CLT-80eb5e7b-8816-4a02-9591-2ca1a19558fa");
        int int5 = accountRegistry1.getManagersSize();
        org.junit.Assert.assertNotNull(accountRegistry1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        ParkingSystem.Client client0 = ParkingSystem.Client.getInstance();
        java.lang.String str1 = client0.getName();
        client0.setClientInfo("hi!", "", "", "disabled", "disabled", "hi!", true);
        java.lang.String str10 = client0.getUsername();
        java.lang.String str11 = client0.getPassword();
        java.lang.String str12 = client0.getClientType();
        java.lang.String str13 = client0.getName();
        ParkingSystem.User user14 = new ParkingSystem.User();
        java.lang.Object obj15 = user14.user;
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy16 = user14.parkingProxy;
        ParkingSystem.User user17 = new ParkingSystem.User();
        java.lang.Object obj18 = user17.user;
        ParkingSystem.Client client19 = ParkingSystem.Client.getInstance();
        java.lang.String str20 = client19.getName();
        client19.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy23 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry24 = parkingSpaceProxy23.getRegistry();
        boolean boolean26 = parkingSpaceProxy23.checkIn("");
        client19.assignProxy(parkingSpaceProxy23);
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade28 = parkingSpaceProxy23.getFacade();
        user17.assignProxy(parkingSpaceProxy23);
        user14.parkingProxy = parkingSpaceProxy23;
        ParkingSystem.AccountRegistry accountRegistry34 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager35 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry34);
        java.lang.String str36 = superManager35.getManagerId();
        ParkingSystem.AccountRegistry accountRegistry37 = superManager35.registry;
        java.lang.String str38 = superManager35.getManagerId();
        ParkingSystem.Client client39 = ParkingSystem.Client.getInstance();
        java.lang.String str40 = client39.getName();
        client39.setValidated(true);
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy43 = new ParkingSystem.ParkingSpaceProxy();
        ParkingSystem.AccountRegistry accountRegistry44 = parkingSpaceProxy43.getRegistry();
        boolean boolean46 = parkingSpaceProxy43.checkIn("");
        client39.assignProxy(parkingSpaceProxy43);
        boolean boolean48 = client39.cancelBooking();
        ParkingSystem.ParkingSpaceProxy parkingSpaceProxy49 = new ParkingSystem.ParkingSpaceProxy();
        client39.assignProxy(parkingSpaceProxy49);
        superManager35.assignProxy(parkingSpaceProxy49);
        user14.assignProxy(parkingSpaceProxy49);
        ParkingSystem.AccountRegistry accountRegistry53 = parkingSpaceProxy49.getRegistry();
        java.lang.String str56 = parkingSpaceProxy49.scanSpace("CLT-84172690-12e5-43e4-8a26-14753ff3c6e3", "");
        java.lang.Object obj59 = parkingSpaceProxy49.login("jane", "Refunded without deposit ($0.0)");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade60 = parkingSpaceProxy49.getFacade();
        client0.assignProxy(parkingSpaceProxy49);
        boolean boolean69 = client0.confirmBooking("FNuxCiXmkP", "tbHxuilT", (int) (short) 0, "", (int) (byte) 1, "Refunded total cost of $-1.0", "CLT-cef4e11f-bc4f-4469-a240-c82b3dc24841");
        org.junit.Assert.assertNotNull(client0);
// flaky "91) test0994(RegressionTest1)":         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7aecb00c-028c-4dcf-96cc-14d25bd709ab" + "'", str1, "7aecb00c-028c-4dcf-96cc-14d25bd709ab");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "disabled" + "'", str11, "disabled");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "disabled" + "'", str12, "disabled");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(parkingSpaceProxy16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(client19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(accountRegistry24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(parkingSpaceFacade28);
        org.junit.Assert.assertNotNull(superManager35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "h40rNQ7kR1" + "'", str36, "h40rNQ7kR1");
        org.junit.Assert.assertNotNull(accountRegistry37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "h40rNQ7kR1" + "'", str38, "h40rNQ7kR1");
        org.junit.Assert.assertNotNull(client39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(accountRegistry44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(accountRegistry53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "disabled" + "'", str56, "disabled");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(parkingSpaceFacade60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.SpaceManager spaceManager2 = bookingManager0.getSpaceManager();
        double double5 = bookingManager0.calculateCost("", (int) (byte) 10);
        ParkingSystem.DebitOrCredit debitOrCredit6 = new ParkingSystem.DebitOrCredit();
        bookingManager0.setPaymentStrategy((ParkingSystem.Strategy) debitOrCredit6);
        boolean boolean12 = debitOrCredit6.processPayment("jane", (double) '#', "CLT-30fd593b-dedd-41b3-a919-c48700301f41", "jane");
        java.lang.String str13 = debitOrCredit6.getPaymentMessage();
        boolean boolean18 = debitOrCredit6.processPayment("Paid $ 0.0 with Mobile Pay", 30.0d, "Paid $ -1.0 with Mobile Pay", "Paid $ 0.0 with Mobile Pay");
        boolean boolean21 = debitOrCredit6.validateCard("Jane", (double) '4');
        java.lang.String str22 = debitOrCredit6.getPaymentMessage();
        java.lang.String str23 = debitOrCredit6.getPaymentMessage();
        org.junit.Assert.assertNotNull(spaceManager2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 165.0d + "'", double5 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Card number should be 16 digits" + "'", str13, "Card number should be 16 digits");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Card number should be 16 digits" + "'", str22, "Card number should be 16 digits");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Card number should be 16 digits" + "'", str23, "Card number should be 16 digits");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        ParkingSystem.ParkingSpaceFacade parkingSpaceFacade0 = new ParkingSystem.ParkingSpaceFacade();
        boolean boolean2 = parkingSpaceFacade0.checkIn("");
        ParkingSystem.BookingManager bookingManager3 = parkingSpaceFacade0.getBookingManager();
        boolean boolean13 = parkingSpaceFacade0.confirmBooking("Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", "Paid $ 10.0 with Mobile Pay", (int) (short) -1, "pass", (int) (short) 1, "Paid $ -1.0 with Mobile Pay", "hi!");
        boolean boolean23 = parkingSpaceFacade0.confirmBooking("Refunded total cost of $-1.0", "pass", "Refunded without deposit ($0.0)", "disabled", (int) (short) 100, "CLT-2c703e7f-c82c-4d1c-a76c-41c5a1c52bf7", (int) (short) 1, "Refunded total cost of $1.0", "02659ad3-0b5c-4c48-a915-a466f2b50775");
        ParkingSystem.Booking booking25 = parkingSpaceFacade0.getBookingDetails("Paid $ 10.0 with Mobile Pay");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(bookingManager3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(booking25);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        ParkingSystem.AccountRegistry accountRegistry6 = new ParkingSystem.AccountRegistry();
        ParkingSystem.SuperManager superManager7 = ParkingSystem.SuperManager.createFromCSV("", "", "disabled", accountRegistry6);
        boolean boolean9 = accountRegistry6.requiresValidation("disabled");
        int int10 = accountRegistry6.getManagersSize();
        ParkingSystem.SuperManager superManager11 = ParkingSystem.SuperManager.createFromCSV("disabled", "", "jane", accountRegistry6);
        ParkingSystem.AccountRegistry accountRegistry12 = superManager11.getRegistry();
        int int13 = accountRegistry12.getManagersSize();
        org.junit.Assert.assertNotNull(superManager7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(superManager11);
        org.junit.Assert.assertNotNull(accountRegistry12);
// flaky "92) test0997(RegressionTest1)":         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean8 = parkingLot1.isSpaceAvailable(0);
        ParkingSystem.ParkingSpace parkingSpace10 = parkingLot1.getParkingSpace((int) ' ');
        boolean boolean11 = parkingLot1.isEnabled();
        boolean boolean13 = parkingLot1.isSpaceAvailable((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parkingSpace10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        ParkingSystem.BookingManager bookingManager0 = new ParkingSystem.BookingManager();
        ParkingSystem.CheckInManager checkInManager1 = new ParkingSystem.CheckInManager(bookingManager0);
        ParkingSystem.Booking booking3 = bookingManager0.getBooking("");
        ParkingSystem.Booking booking5 = bookingManager0.getBooking("Refunded without deposit ($0.0)");
        ParkingSystem.SpaceManager spaceManager6 = bookingManager0.getSpaceManager();
        ParkingSystem.CheckInManager checkInManager7 = new ParkingSystem.CheckInManager(bookingManager0);
        org.junit.Assert.assertNull(booking3);
        org.junit.Assert.assertNull(booking5);
        org.junit.Assert.assertNotNull(spaceManager6);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        ParkingSystem.ParkingLot parkingLot1 = new ParkingSystem.ParkingLot("hi!");
        ParkingSystem.Booking booking3 = null;
        boolean boolean4 = parkingLot1.assignBooking(0, booking3);
        boolean boolean6 = parkingLot1.isSpaceAvailable((int) '#');
        boolean boolean7 = parkingLot1.isEnabled();
        boolean boolean9 = parkingLot1.isSpaceAvailable((int) (byte) 100);
        ParkingSystem.ParkingLotIterator parkingLotIterator10 = parkingLot1.getIterator();
        ParkingSystem.Booking booking19 = new ParkingSystem.Booking("staff", "jane", (int) (short) -1, "Jane", (int) ' ', "disabled", (double) (byte) 1);
        int int20 = booking19.getDuration();
        java.lang.String str21 = booking19.getClientId();
        booking19.setStartTime("hi!");
        boolean boolean24 = booking19.isCheckedIn();
        java.lang.String str25 = booking19.getLotId();
        boolean boolean26 = parkingLot1.assignBooking((int) '#', booking19);
        boolean boolean27 = booking19.isCheckedIn();
        java.lang.String str28 = booking19.getLotId();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parkingLotIterator10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "staff" + "'", str21, "staff");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jane" + "'", str25, "jane");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "jane" + "'", str28, "jane");
    }
}
